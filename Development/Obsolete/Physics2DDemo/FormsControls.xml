<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FormsControls</name>
    </assembly>
    <members>
        <member name="T:System.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.Checkmark">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:System.Properties.Resources.svg11">
             <summary>
               Looks up a localized string similar to &lt;!-- ....................................................................... --&gt;
            &lt;!-- SVG 1.1 DTD ........................................................... --&gt;
            &lt;!-- file: svg11.dtd
            --&gt;
            
            &lt;!-- SVG 1.1 DTD
            
                 This is SVG, a language for describing two-dimensional graphics in XML.
            
                 The Scalable Vector Graphics (SVG)
                 Copyright 2001, 2002 World Wide Web Consortium
                    (Massachusetts Institute of Technology, Institut National de
                     Recherche en Informatique et en Automatique, K [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:System.Diagnostics.AsyncResult">
            <summary>
            A configurable IAsyncResult implementation.
            </summary>
        </member>
        <member name="F:System.Diagnostics.AsyncResult.Handler">
            <summary>
            The AsyncResult instance to use instead of this one. This is useful for chaining asynchronous method calls.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncResult.CompletedSynchronously">
            <summary>
            Gets or setsa flag whether the task completed synchronously or asynchronously;
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets or sets the WaitHandle of the instance.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncResult.AsyncState">
            <summary>
            Gets or sets the state of the task.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncResult.IsCompleted">
            <summary>
            Gets or sets whether *this* task is completed (if Handler is not null, its IsCompleted value is returned for Get).
            </summary>
        </member>
        <member name="M:System.Diagnostics.AsyncResult.#ctor">
            <summary>
            Initializes a new IAsyncResult implementation.
            </summary>
        </member>
        <member name="M:System.Diagnostics.AsyncResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new IAsyncResult implementation.
            </summary>
            <param name="isCompleted">Whether the task is already completed.</param>
        </member>
        <member name="T:System.Diagnostics.PreciseStopwatch">
            <summary>
            A flexible stopwatch for measuring elapsed time very precisely.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PreciseStopwatch.IsHighResolutionTimingSupported">
            <summary>
            Gets whether high resolution timing is supported on the current platform.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PreciseStopwatch.NanosecondsPerTick">
            <summary>
            Gets the amount of nanoseconds every platform-specific tick represents.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.SpeedMultiplier">
            <summary>
            Gets or sets the stopwatch speed multiplier (1 means time speed is normal).
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.Running">
            <summary>
            Gets or sets whether the stopwatch is started.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.Elapsed">
            <summary>
            Gets the elapsed time.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedTicks">
            <summary>
            Gets the elapsed time in platform-specific ticks.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedFortnights">
            <summary>
            Gets the elapsed time in fortnights.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedWeeks">
            <summary>
            Gets the elapsed time in weeks.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedDays">
            <summary>
            Gets the elapsed time in days.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedHours">
            <summary>
            Gets the elapsed time in hours.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedMinutes">
            <summary>
            Gets the elapsed time in minutes.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedSeconds">
            <summary>
            Gets the elapsed time in seconds.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed time in milliseconds.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedMicroseconds">
            <summary>
            Gets the elapsed time in microseconds.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.Elapsed100NanosecondTicks">
            <summary>
            Gets the elapsed time in standard ticks (not platform-specific).
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedNanoseconds">
            <summary>
            Gets the elapsed time in nanoseconds.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.Timestamp">
            <summary>
            Gets the current time in platform-specific ticks.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.#ctor">
            <summary>
            Initializes a new high-resolution stopwatch.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.#ctor(System.Double)">
            <summary>
            Initializes a new high-resolution stopwatch with pre-elapsed ticks.
            </summary>
            <param name="preElapsedTicks">The starting elapsed ticks.</param>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.#ctor(System.Diagnostics.PreciseStopwatch)">
            <summary>
            Initializes a new high-resolution stopwatch with pre-elapsed ticks.
            </summary>
            <param name="stopwatch">The stopwatch to clone.</param>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.#ctor(System.Diagnostics.Stopwatch)">
            <summary>
            Initializes a new high-resolution stopwatch with pre-elapsed ticks.
            </summary>
            <param name="stopwatch">The stopwatch to clone.</param>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.ConvertToTicks(System.Double)">
            <summary>
            Converts nanoseconds to platform-specific ticks.
            </summary>
            <param name="nanoseconds">The value of nanoseconds to convert to platform-specific ticks.</param>
            <returns>The equivalent of the nanoseconds in platform-specific ticks.</returns>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.ConvertToNanoseconds(System.Double)">
            <summary>
            Converts platform-specific ticks to nanoseconds.
            </summary>
            <param name="ticks">The value of platform-specific ticks to convert to nanoseconds.</param>
            <returns>The equivalent of the platform-specific ticks in nanoseconds.</returns>
        </member>
        <member name="T:System.Diagnostics.AsyncTimer">
            <summary>
            Initalizes a component that flexibly handles calling methods asynchronously at given intervals on the same dedicated thread.
            It is a very accurate timer, and can be used to time gameplay renders and updates.
            </summary>
        </member>
        <member name="T:System.Diagnostics.AsyncTimer.TimerMode">
            <summary>
            The async timer mode.
            </summary>
        </member>
        <member name="F:System.Diagnostics.AsyncTimer.TimerMode.LowCpuUsage">
            <summary>
            The CPU usage will be reduced at the expense of accuracy.
            This mode guarantees low CPU overhead even at tight intervals, but has the worst accuracy of all modes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.AsyncTimer.TimerMode.LowCpuWhenIdle">
            <summary>
            The CPU usage will be reduced at the expense of accuracy only when the timer is idle between ticks. This is the default mode, and it is recommended for intervals greater than 50ms.
            </summary>
        </member>
        <member name="F:System.Diagnostics.AsyncTimer.TimerMode.Accurate">
            <summary>
            The timer will be very accurate, ideal for gameplay and fast, steady intervals. It consumes more CPU cycles though, so beware.
            </summary>
        </member>
        <member name="T:System.Diagnostics.AsyncTimer.TickEventHandler">
            <summary>
            Handles the AsyncTimer tick event.
            </summary>
            <param name="sender">The AsyncTimer that caused the tick.</param>
            <param name="elapsedMilliseconds">The elapsed milliseconds since the last tick.</param>
        </member>
        <member name="E:System.Diagnostics.AsyncTimer.Tick">
            <summary>
            Occurs when the time interval has elapsed.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.PileTicks">
            <summary>
            Gets or sets whether to execute delayed queued ticks or to discard them.
            Only appropriate when time accuracy and steadiness is not a priority but method call count is. 
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.ElapsedMilliseconds">
            <summary>
            Gets the elapsed milliseconds since the last tick.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.Elapsed">
            <summary>
            Gets the PreciseStopwatch instance that governs this AsyncTimer.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.IsFinished">
            <summary>
            This is only invoked when FinishesAsynchronously is set to true.
            Returns whether all previous Tick method calls should be considered completed and OnFinished should be called.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.IsDisposed">
            <summary>
            Gets whether the timer is disposed.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.AutoReset">
            <summary>
            Gets or sets whether the timer will keep firing events periodically.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.FinishesAsynchronously">
            <summary>
            Gets or sets whether the actions invoked by the Tick event will require a completion flag from IsFinished
            in order to consider all previous method calls as completed and call OnFinished and get ready for another firing of the Tick event.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.Enabled">
            <summary>
            Gets or sets whether the timer thread is initalized and running.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.Mode">
            <summary>
            Gets or sets the timer mode to use.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.Paused">
            <summary>
            Gets or sets whether the timer is paused.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncTimer.TimeInterval">
            <summary>
            Gets or sets the interval in milliseconds between each tick (must be greater than zero).
            </summary>
        </member>
        <member name="M:System.Diagnostics.AsyncTimer.#ctor">
            <summary>
            Initializes a new asynchronous timer.
            </summary>
        </member>
        <member name="M:System.Diagnostics.AsyncTimer.#ctor(System.String)">
            <summary>
            Initializes a new asynchronous timer.
            </summary>
            <param name="threadName">The name of the thread</param>
        </member>
        <member name="M:System.Diagnostics.AsyncTimer.OnTick(System.Double)">
            <summary>
            Called when the timer is elapsed.
            </summary>
            <param name="elapsedMilliseconds">The elapsed milliseconds since the last tick.</param>
        </member>
        <member name="M:System.Diagnostics.AsyncTimer.OnFinished">
            <summary>
            Called when the previously queued tick method call has been completed.
            </summary>
        </member>
        <member name="M:System.Diagnostics.AsyncTimer.Finalize">
            <summary>
            Disposes of the timer asynchronously.
            </summary>
        </member>
        <member name="M:System.Diagnostics.AsyncTimer.Dispose(System.Boolean)">
            <summary>
            Disposes of the timer.
            </summary>
            <param name="sync">True to wait for the timer loop to fully close before returning from disposal.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgCircle">
            <summary>
            An SVG element to render circles to the document.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgCircle.Center">
            <summary>
            Gets the center point of the circle.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgCircle.CenterX">
            <summary>
            Gets or sets the center X co-ordinate.
            </summary>
            <value>The center X.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgCircle.CenterY">
            <summary>
            Gets or sets the center Y co-ordinate.
            </summary>
            <value>The center Y.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgCircle.Radius">
            <summary>
            Gets or sets the radius of the circle.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgCircle.Bounds">
            <summary>
            Gets the bounds of the circle.
            </summary>
            <value>The rectangular bounds of the circle.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgCircle.RequiresSmoothRendering">
            <summary>
            Gets a value indicating whether the circle requires anti-aliasing when being rendered.
            </summary>
            <value>
            	<c>true</c> if the circle requires anti-aliasing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgCircle.Path">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> representing this element.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgCircle.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the circle to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="renderer">The graphics object.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgCircle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgCircle"/> class.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgEllipse">
            <summary>
            Represents and SVG ellipse element.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgEllipse.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgEllipse.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgEllipse.Path">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgEllipse.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Graphics"/> object to render to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgEllipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgEllipse"/> class.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgLine">
            <summary>
            Represents and SVG line element.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgPolygon">
            <summary>
            SvgPolygon defines a closed shape consisting of a set of connected straight line segments.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgPolygon.Points">
            <summary>
            The points that make up the SvgPolygon
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgPolyline">
            <summary>
            SvgPolyline defines a set of connected straight line segments. Typically, <see cref="T:System.Drawing.Imaging.Svg.SvgPolyline"/> defines open shapes.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgPolyline.Path">
            <summary>
            Gets the graphics path from the points of the polygon.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgRectangle">
            <summary>
            Represents and SVG rectangle that could also have reounded edges.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgRectangle"/> class.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.Location">
            <summary>
            Gets an <see cref="T:System.Drawing.Imaging.Svg.SvgPoint"/> representing the top left point of the rectangle.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.X">
            <summary>
            Gets or sets the position where the left point of the rectangle should start.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.Y">
            <summary>
            Gets or sets the position where the top point of the rectangle should start.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.CornerRadiusX">
            <summary>
            Gets or sets the X-radius of the rounded edges of this rectangle.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.CornerRadiusY">
            <summary>
            Gets or sets the Y-radius of the rounded edges of this rectangle.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgRectangle.Path">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgRectangle.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgVisualElement">
            <summary>
            The class that all SVG elements should derive from when they are to be rendered.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.Path">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.IsPathDirty">
            <summary>
            Gets or sets a value indicating whether this element's <see cref="P:System.Drawing.Imaging.Svg.SvgVisualElement.Path"/> is dirty.
            </summary>
            <value>
            	<c>true</c> if the path is dirty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.ClipPath">
            <summary>
            Gets the associated <see cref="T:System.Drawing.Imaging.Svg.SvgClipPath"/> if one has been specified.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.ClipRule">
            <summary>
            Gets or sets the algorithm which is to be used to determine the clipping region.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgVisualElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgVisualElement"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgVisualElement.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgVisualElement.RenderFill(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the fill of the <see cref="T:System.Drawing.Imaging.Svg.SvgVisualElement"/> to the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgVisualElement.RenderStroke(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the stroke of the <see cref="T:System.Drawing.Imaging.Svg.SvgVisualElement"/> to the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgVisualElement.SetClip(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Sets the clipping region of the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to have its clipping region set.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgVisualElement.ResetClip(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Resets the clipping region of the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> back to where it was before the <see cref="M:System.Drawing.Imaging.Svg.SvgVisualElement.SetClip(System.Drawing.Imaging.Svg.SvgRenderer)"/> method was called.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to have its clipping region reset.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgVisualElement.System#Drawing#Imaging#Svg#ISvgClipable#SetClip(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Sets the clipping region of the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to have its clipping region set.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgVisualElement.System#Drawing#Imaging#Svg#ISvgClipable#ResetClip(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Resets the clipping region of the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> back to where it was before the <see cref="M:System.Drawing.Imaging.Svg.SvgVisualElement.SetClip(System.Drawing.Imaging.Svg.SvgRenderer)"/> method was called.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to have its clipping region reset.</param>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.Visible">
            <summary>
            Gets or sets a value to determine whether the element will be rendered.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.Fill">
            <summary>
            Gets or sets the fill <see cref="T:System.Drawing.Imaging.Svg.SvgPaintServer"/> of this element.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.Stroke">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Imaging.Svg.SvgPaintServer"/> to be used when rendering a stroke around this element.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.FillOpacity">
            <summary>
            Gets or sets the opacity of this element's <see cref="P:System.Drawing.Imaging.Svg.SvgVisualElement.Fill"/>.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke (if the <see cref="P:System.Drawing.Imaging.Svg.SvgVisualElement.Stroke"/> property has a valid value specified.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.StrokeOpacity">
            <summary>
            Gets or sets the opacity of the stroke, if the <see cref="P:System.Drawing.Imaging.Svg.SvgVisualElement.Stroke"/> property has been specified. 1.0 is fully opaque; 0.0 is transparent.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgVisualElement.Opacity">
            <summary>
            Gets or sets the opacity of the element. 1.0 is fully opaque; 0.0 is transparent.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.ISvgClipable">
            <summary>
            Defines the methods and properties that an <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> must implement to support clipping.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.ISvgClipable.ClipPath">
            <summary>
            Gets or sets the ID of the associated <see cref="T:System.Drawing.Imaging.Svg.SvgClipPath"/> if one has been specified.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.ISvgClipable.ClipRule">
            <summary>
            Specifies the rule used to define the clipping region when the element is within a <see cref="T:System.Drawing.Imaging.Svg.SvgClipPath"/>.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.ISvgClipable.SetClip(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Sets the clipping region of the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to have its clipping region set.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.ISvgClipable.ResetClip(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Resets the clipping region of the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> back to where it was before the <see cref="M:System.Drawing.Imaging.Svg.ISvgClipable.SetClip(System.Drawing.Imaging.Svg.SvgRenderer)"/> method was called.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to have its clipping region reset.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgClipPath">
            <summary>
            Defines a path that can be used by other <see cref="T:System.Drawing.Imaging.Svg.ISvgClipable"/> elements.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgClipPath.ClipPathUnits">
            <summary>
            Specifies the coordinate system for the clipping path.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgClipPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgClipPath"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgClipPath.GetClipRegion(System.Drawing.Imaging.Svg.SvgVisualElement)">
            <summary>
            Gets this <see cref="T:System.Drawing.Imaging.Svg.SvgClipPath"/>'s region to be used as a clipping region.
            </summary>
            <returns>A new <see cref="T:System.Drawing.Region"/> containing the <see cref="T:System.Drawing.Region"/> to be used for clipping.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgClipPath.CombinePaths(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="element"></param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgClipPath.AddElement(System.Drawing.Imaging.Svg.SvgElement,System.Int32)">
            <summary>
            Called by the underlying <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> when an element has been added to the Children collection.
            </summary>
            <param name="child">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgClipPath.RemoveElement(System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Called by the underlying <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> when an element has been removed from the Children collection.
            </summary>
            <param name="child">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgClipPath.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgClipRule">
            <summary>
            Indicates the algorithm which is to be used to determine the clipping region.
            </summary>
            <remarks>
                <para>This rule determines the "insideness" of a point on the canvas by drawing a ray from 
                that point to infinity in any direction and then examining the places where a segment of the 
                shape crosses the ray.</para>
            </remarks>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgClipRule.NonZero">
            <summary>
            This rule determines the "insideness" of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside  the path. Otherwise, it is inside.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgClipRule.EvenOdd">
            <summary>
            This rule determines the "insideness" of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.ISvgViewPort">
            <summary>
            Provides properties and methods to be implemented by view port elements.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.ISvgViewPort.ViewBox">
            <summary>
            Gets or sets the viewport of the element.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgCoordinateUnits">
            <summary>
            Defines the various coordinate units certain SVG elements may use.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgCoordinateUnits.UserSpaceOnUse">
            <summary>
            Indicates that the coordinate system of the entire document is to be used.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgCoordinateUnits.ObjectBoundingBox">
            <summary>
            Indicates that the coordinate system of the owner element is to be used.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgUnit">
            <summary>
            Represents a unit in an Scalable Vector Graphics document.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnit.Empty">
            <summary>
            Gets and empty <see cref="T:System.Drawing.Imaging.Svg.SvgUnit"/>.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnit.None">
            <summary>
            Gets an <see cref="T:System.Drawing.Imaging.Svg.SvgUnit"/> with a value of none.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgUnit.IsEmpty">
            <summary>
            Gets a value to determine whether the unit is empty.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgUnit.IsNone">
            <summary>
            Gets whether this unit is none.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgUnit.Value">
            <summary>
            Gets the value of the unit.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgUnit.Type">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.Svg.SvgUnitType"/> of unit.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.ToDeviceValue">
            <summary>
            Converts the current unit to one that can be used at render time.
            </summary>
            <returns>The representation of the current unit in a device value (usually pixels).</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.ToDeviceValue(System.Drawing.Imaging.Svg.ISvgStylable)">
            <summary>
            Converts the current unit to one that can be used at render time.
            </summary>
            <returns>The representation of the current unit in a device value (usually pixels).</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.ToDeviceValue(System.Drawing.Imaging.Svg.ISvgStylable,System.Boolean)">
            <summary>
            Converts the current unit to one that can be used at render time.
            </summary>
            <returns>The representation of the current unit in a device value (usually pixels).</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.ToPercentage">
            <summary>
            Converts the current unit to a percentage, if applicable.
            </summary>
            <returns>An <see cref="T:System.Drawing.Imaging.Svg.SvgUnit"/> of type SvgUnitType.Percentage.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.GetHashCode">
            <summary>
            Calls base.GetHashCode().
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.ToString">
            <summary>
            Returns a string representation of the unit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.op_Implicit(System.Drawing.Imaging.Svg.SvgUnit)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Imaging.Svg.SvgUnit"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.op_Implicit(System.Single)~System.Drawing.Imaging.Svg.SvgUnit">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:System.Drawing.Imaging.Svg.SvgUnit"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.#ctor(System.Drawing.Imaging.Svg.SvgUnitType,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgUnit"/> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnit.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgUnit"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgUnitType">
            <summary>
            Defines the various types of unit an <see cref="T:System.Drawing.Imaging.Svg.SvgUnit"/> can be.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.None">
            <summary>
            Indicates that the unit holds no value.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.Pixel">
            <summary>
            Indicates that the unit is in pixels.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.Em">
            <summary>
            Indicates that the unit is equal to the pt size of the current font.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.Percentage">
            <summary>
            Indicates that the unit is a percentage.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.User">
            <summary>
            Indicates that the unit has no unit identifier and is a value in the current user coordinate system.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.Inch">
            <summary>
            Indicates the the unit is in inches.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.Centimeter">
            <summary>
            Indicates that the unit is in centimeters.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.Millimeter">
            <summary>
            Indicates that the unit is in millimeters.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.Pica">
            <summary>
            Indicates that the unit is in picas.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgUnitType.Point">
            <summary>
            Indicates that the unit is in points, the smallest unit of measure, being a subdivision of the larger <see cref="F:System.Drawing.Imaging.Svg.SvgUnitType.Pica"/>. There are 12 points in the <see cref="F:System.Drawing.Imaging.Svg.SvgUnitType.Pica"/>.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgUnitCollection">
            <summary>
            Represents a list of SvgUnits.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgUnitCollectionConverter">
            <summary>
            A class to convert string into <see cref="T:System.Drawing.Imaging.Svg.SvgUnitCollection"/> instances.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUnitCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgViewBox">
            <summary>
            It is often desirable to specify that a given set of graphics stretch to fit a particular container element. The viewBox attribute provides this capability.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgViewBox.Empty">
            <summary>
            An empty view box instance.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgViewBox.MinX">
            <summary>
            Gets or sets the position where the viewport starts horizontally.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgViewBox.MinY">
            <summary>
            Gets or sets the position where the viewport starts vertically.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgViewBox.Width">
            <summary>
            Gets or sets the width of the viewport.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgViewBox.Height">
            <summary>
            Gets or sets the height of the viewport.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgViewBox.op_Implicit(System.Drawing.Imaging.Svg.SvgViewBox)~System.Drawing.RectangleF">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Imaging.Svg.SvgViewBox"/> to <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgViewBox.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgViewBox"/> struct.
            </summary>
            <param name="minX">The min X.</param>
            <param name="minY">The min Y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgViewBoxConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgDefinitionList">
            <summary>
            Represents a list of re-usable SVG components.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDefinitionList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgDefinitionList"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDefinitionList.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgDescription">
            <summary>
            An SVG description element.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgDescription.Text">
            <summary>
            Gets or sets the text of the description.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDescription.ToString">
            <summary>
            Returns the description.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgFragment">
            <summary>
            An <see cref="T:System.Drawing.Imaging.Svg.SvgFragment"/> represents an SVG fragment that can be the root element or an embedded fragment of an SVG document.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgFragment.Namespace">
            <summary>
            Gets the SVG namespace string.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgFragment.Width">
            <summary>
            Gets or sets the width of the fragment.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgFragment.Height">
            <summary>
            Gets or sets the height of the fragment.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgFragment.ViewBox">
            <summary>
            Gets or sets the viewport of the element.
            </summary>
            <value></value>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgFragment.PushTransforms(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgFragment"/> class.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgGroup">
            <summary>
            An element used to group SVG shapes.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGroup.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGroup.Path">
            <summary>
            Gets the GraphicsPath for this element.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGroup.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgGroup.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Graphics"/> object to render to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUse.PushTransforms(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgUse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgUse"/> class.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.Filters.SvgGaussianBlur">
            <summary>
            Applies a gaussian blur effect to the SVG.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Filters.SvgGaussianBlur.Apply(System.Drawing.Image,System.Single)">
            <summary>
            Applies a gaussion blur to the given image at the specified radius.
            </summary>
            <param name="inputImage">The image to apply a filter on.</param>
            <param name="radius">The radius to use for the gaussion blur.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.Filters.SvgFilter">
            <summary>
            A filter effect consists of a series of graphics operations that are applied to a given source graphic to produce a modified graphical result.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.Filters.SvgFilter.Width">
            <summary>
            Gets or sets the width of the resulting filter graphic.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.Filters.SvgFilter.Height">
            <summary>
            Gets or sets the height of the resulting filter graphic.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Filters.SvgFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.Filters.SvgFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Filters.SvgFilter.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Filters.SvgFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Filters.SvgFilter.ApplyFilter(System.Drawing.Imaging.Svg.SvgVisualElement,System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Applies a filter using the given renderer to the specified element.
            </summary>
            <param name="element">The element to apply the filter on.</param>
            <param name="renderer">The renderer to use.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.ISvgStylable">
            <summary>
            Defines the methods and properties required for an SVG element to be styled.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgColourConverter">
            <summary>
            Converts string representations of colours into <see cref="T:System.Drawing.Color"/> objects.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgColourConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the converter's native type.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor"/> that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> that specifies the culture to represent the color.</param>
            <param name="value">The object to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the converted value.
            </returns>
            <exception cref="T:System.ArgumentException">The conversion cannot be performed.</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
            </PermissionSet>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgGradientServer">
            <summary>
            Provides the base class for all paint servers that wish to render a gradient.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgGradientServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgGradientServer"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgGradientServer.AddElement(System.Drawing.Imaging.Svg.SvgElement,System.Int32)">
            <summary>
            Called by the underlying <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> when an element has been added to the Children collection.
            </summary>
            <param name="child">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgGradientServer.RemoveElement(System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Called by the underlying <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> when an element has been removed from the Children collection.
            </summary>
            <param name="child">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGradientServer.Stops">
            <summary>
            Gets the ramp of colors to use on a gradient.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGradientServer.SpreadMethod">
            <summary>
            Specifies what happens if the gradient starts or ends inside the bounds of the target rectangle.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGradientServer.GradientUnits">
            <summary>
            Gets or sets the coordinate system of the gradient.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGradientServer.InheritGradient">
            <summary>
            Gets or sets another gradient fill from which to inherit the stops from.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgGradientServer.GetColourBlend(System.Drawing.Imaging.Svg.SvgVisualElement,System.Single)">
            <summary>
            Gets a ColourBlend representing the <see cref="T:System.Drawing.Imaging.Svg.SvgGradientServer"/>'s gradient stops.
            </summary>
            <param name="owner">The parent <see cref="T:System.Drawing.Imaging.Svg.SvgVisualElement"/>.</param>
            <param name="opacity">The opacity of the colour blend.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgGradientServer.InheritStops">
            <summary>
            If this gradient contains no stops then it will search any inherited gradients for stops.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgGradientStop">
            <summary>
            Represents a colour stop in a gradient.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGradientStop.Offset">
            <summary>
            Gets or sets the offset, i.e. where the stop begins from the beginning, of the gradient stop.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGradientStop.Colour">
            <summary>
            Gets or sets the colour of the gradient stop.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgGradientStop.Opacity">
            <summary>
            Gets or sets the opacity of the gradient stop (0-1).
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgGradientStop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgGradientStop"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgGradientStop.#ctor(System.Drawing.Imaging.Svg.SvgUnit,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgGradientStop"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="colour">The colour.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgPaintServer">
            <summary>
            Represents the base class for all paint servers that are intended to be used as a fill or stroke.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgPaintServer.None">
            <summary>
            An unspecified <see cref="T:System.Drawing.Imaging.Svg.SvgPaintServer"/>.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgPaintServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgPaintServer"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgPaintServer.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgPaintServer.GetBrush(System.Drawing.Imaging.Svg.SvgVisualElement,System.Single)">
            <summary>
            Gets a <see cref="T:System.Drawing.Brush"/> representing the current paint server.
            </summary>
            <param name="styleOwner">The owner <see cref="T:System.Drawing.Imaging.Svg.SvgVisualElement"/>.</param>
            <param name="opacity">The opacity of the brush.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgPaintServer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgPatternServer">
            <summary>
            A pattern is used to fill or stroke an object using a pre-defined graphic object which can be replicated ("tiled") at fixed intervals in x and y to cover the areas to be painted.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgPatternServer.ViewBox">
            <summary>
            Specifies a supplemental transformation which is applied on top of any 
            transformations necessary to create a new pattern coordinate system.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgPatternServer.Width">
            <summary>
            Gets or sets the width of the pattern.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgPatternServer.Height">
            <summary>
            Gets or sets the height of the pattern.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgPatternServer.X">
            <summary>
            Gets or sets the X-axis location of the pattern.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgPatternServer.Y">
            <summary>
            Gets or sets the Y-axis location of the pattern.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgPatternServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgPatternServer"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgPatternServer.GetBrush(System.Drawing.Imaging.Svg.SvgVisualElement,System.Single)">
            <summary>
            Gets a <see cref="T:System.Drawing.Brush"/> representing the current paint server.
            </summary>
            <param name="renderingElement">The owner <see cref="T:System.Drawing.Imaging.Svg.SvgVisualElement"/>.</param>
            <param name="opacity">The opacity of the brush.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgRadialGradientServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgRadialGradientServer"/> class.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.Paths.SvgPath">
            <summary>
            Represents an SVG path element.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.Paths.SvgPath.PathData">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Imaging.Svg.Paths.SvgPathSegmentList"/> of path data.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.Paths.SvgPath.PathLength">
            <summary>
            Gets or sets the length of the path.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.Paths.SvgPath.Path">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.Paths.SvgPath.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.Paths.SvgPath.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Paths.SvgPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.Paths.SvgPath"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Paths.SvgPathBuilder.Parse(System.String)">
            <summary>
            Parses the specified string into a collection of path segments.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing path data.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Paths.SvgPathBuilder.ToAbsolute(System.Single,System.Single,System.Drawing.Imaging.Svg.Paths.SvgPathSegmentList,System.Boolean)">
            <summary>
            Creates point with absolute coorindates.
            </summary>
            <param name="x">Raw X-coordinate value.</param>
            <param name="y">Raw Y-coordinate value.</param>
            <param name="segments">Current path segments.</param>
            <param name="isRelativeBoth"><b>true</b> if <paramref name="x"/> and <paramref name="y"/> contains relative coordinate values, otherwise <b>false</b>.</param>
            <returns><see cref="T:System.Drawing.PointF"/> that contains absolute coordinates.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Paths.SvgPathBuilder.ToAbsolute(System.Single,System.Single,System.Drawing.Imaging.Svg.Paths.SvgPathSegmentList,System.Boolean,System.Boolean)">
            <summary>
            Creates point with absolute coorindates.
            </summary>
            <param name="x">Raw X-coordinate value.</param>
            <param name="y">Raw Y-coordinate value.</param>
            <param name="segments">Current path segments.</param>
            <param name="isRelativeX"><b>true</b> if <paramref name="x"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <param name="isRelativeY"><b>true</b> if <paramref name="y"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <returns><see cref="T:System.Drawing.PointF"/> that contains absolute coordinates.</returns>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgAttribute">
            <summary>
            Specifies the SVG attribute name of the associated property.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgAttribute.Match(System.Object)">
            <summary>
            When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare with this instance of <see cref="T:System.Attribute"/>.</param>
            <returns>
            true if this instance equals <paramref name="obj"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgAttribute.Name">
            <summary>
            Gets the name of the SVG attribute.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgAttribute.NameSpace">
            <summary>
            Gets the namespace of the SVG attribute.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgAttribute"/> class with the specified attribute name.
            </summary>
            <param name="name">The name of the SVG attribute.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgAttribute"/> class with the specified SVG attribute name and namespace.
            </summary>
            <param name="name">The name of the SVG attribute.</param>
            <param name="nameSpace">The namespace of the SVG attribute (e.g. http://www.w3.org/2000/svg).</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgAttributeCollection">
            <summary>
            A collection of Scalable Vector Attributes that can be inherited from the owner elements ancestors.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgAttributeCollection.#ctor(System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Initialises a new instance of a <see cref="T:System.Drawing.Imaging.Svg.SvgAttributeCollection"/> with the given <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> as the owner.
            </summary>
            <param name="owner">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> owner of the collection.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgAttributeCollection.GetAttribute``1(System.String)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <typeparam name="TAttributeType">The type of the attribute value.</typeparam>
            <param name="attributeName">A <see cref="T:System.String"/> containing the name of the attribute.</param>
            <returns>The attribute value if available; otherwise the default value of <typeparamref name="TAttributeType"/>.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgAttributeCollection.GetAttribute``1(System.String,``0)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <typeparam name="T">The type of the attribute value.</typeparam>
            <param name="attributeName">A <see cref="T:System.String"/> containing the name of the attribute.</param>
            <param name="defaultValue">The value to return if a value hasn't already been specified.</param>
            <returns>The attribute value if available; otherwise the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgAttributeCollection.GetInheritedAttribute``1(System.String)">
            <summary>
            Gets the attribute with the specified name and inherits from ancestors if there is no attribute set.
            </summary>
            <typeparam name="TAttributeType">The type of the attribute value.</typeparam>
            <param name="attributeName">A <see cref="T:System.String"/> containing the name of the attribute.</param>
            <returns>The attribute value if available; otherwise the ancestors value for the same attribute; otherwise the default value of <typeparamref name="TAttributeType"/>.</returns>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgAttributeCollection.Item(System.String)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <param name="attributeName">A <see cref="T:System.String"/> containing the attribute name.</param>
            <returns>The attribute value associated with the specified name; If there is no attribute the parent's value will be inherited.</returns>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgDocument">
            <summary>
            The class used to create and load SVG documents.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgDocument.XLinkNamespace">
            <summary>
            Gets a <see cref="T:System.String"/> containing the XLink namespace (http://www.w3.org/1999/xlink).
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/> class.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgDocument.IdManager">
            <summary>
            Gets an <see cref="T:System.Drawing.Imaging.Svg.SvgElementIdManager"/> for this document.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgDocument.PpiOfImage">
            <summary>
            Gets or sets the Pixels Per Inch of the rendered image.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.GetElementById(System.String)">
            <summary>
            Retrieves the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> with the specified ID.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID of the element to find.</param>
            <returns>An <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> of one exists with the specified ID; otherwise false.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.GetElementById``1(System.String)">
            <summary>
            Retrieves the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> with the specified ID.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID of the element to find.</param>
            <returns>An <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> of one exists with the specified ID; otherwise false.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.Open(System.String)">
            <summary>
            Opens the document at the specified path and loads the SVG contents.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the file to open.</param>
            <returns>An <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/> with the contents loaded.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The document at the specified <paramref name="path"/> cannot be found.</exception>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.Open(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Opens the document at the specified path and loads the SVG contents.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the file to open.</param>
            <param name="entities">A dictionary of custom entity definitions to be used when resolving XML entities within the document.</param>
            <returns>An <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/> with the contents loaded.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The document at the specified <paramref name="path"/> cannot be found.</exception>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.Open(System.IO.Stream)">
            <summary>
            Attempts to open an SVG document from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the SVG document to open.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.Open(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Opens an SVG document from the specified <see cref="T:System.IO.Stream"/> and adds the specified entities.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the SVG document to open.</param>
            <param name="entities">Custom entity definitions.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stream"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.Open(System.Xml.XmlDocument)">
            <summary>
            Opens an SVG document from the specified <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/> containing the SVG document XML.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="document"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.Draw(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/> to the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to render the document with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="renderer"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/> to the specified <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to be rendered to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="graphics"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDocument.Draw">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/> and returns the image as a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> containing the rendered document.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgDtdResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object containing the actual resource.
            </summary>
            <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"/></param>
            <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns System.IO.Stream objects.</param>
            <returns>
            A System.IO.Stream object or null if a type other than stream is specified.
            </returns>
            <exception cref="T:System.Xml.XmlException">
            	<paramref name="ofObjectToReturn"/> is neither null nor a Stream type. </exception>
            <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="absoluteUri"/> is null. </exception>
            <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgElement">
            <summary>
            The base class of which all SVG elements are derived from.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElement.ElementName">
            <summary>
            Gets the name of the element.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElement.Content">
            <summary>
            Gets or sets the content of the element.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElement.Events">
            <summary>
            Gets an <see cref="T:System.ComponentModel.EventHandlerList"/> of all events belonging to the element.
            </summary>
        </member>
        <member name="E:System.Drawing.Imaging.Svg.SvgElement.Load">
            <summary>
            Occurs when the element is loaded.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElement.Children">
            <summary>
            Gets a collection of all child SvgElements.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.HasChildren">
            <summary>
            Gets a value to determine whether the element has children.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElement.Parent">
            <summary>
            Gets the parent <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/>.
            </summary>
            <value>An <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> if one exists; otherwise null.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElement.OwnerDocument">
            <summary>
            Gets the owner <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/>.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElement.Attributes">
            <summary>
            Gets a collection of element attributes.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.PushTransforms(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.PopTransforms(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Removes any previously applied transforms from the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> that should have transforms removed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.System#Drawing#Imaging#Svg#Transforms#ISvgTransformable#PushTransforms(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.System#Drawing#Imaging#Svg#Transforms#ISvgTransformable#PopTransforms(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Removes any previously applied transforms from the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> that should have transforms removed.</param>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElement.Transforms">
            <summary>
            Gets or sets the element transforms.
            </summary>
            <value>The transforms.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElement.ID">
            <summary>
            Gets or sets the ID of the element.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.AddElement(System.Drawing.Imaging.Svg.SvgElement,System.Int32)">
            <summary>
            Called by the underlying <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> when an element has been added to the
            <see cref="P:System.Drawing.Imaging.Svg.SvgElement.Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.OnElementAdded(System.Drawing.Imaging.Svg.SvgElement,System.Int32)">
            <summary>
            Calls the <see cref="M:System.Drawing.Imaging.Svg.SvgElement.AddElement(System.Drawing.Imaging.Svg.SvgElement,System.Int32)"/> method with the specified parameters.
            </summary>
            <param name="child">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.RemoveElement(System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Called by the underlying <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> when an element has been removed from the
            <see cref="P:System.Drawing.Imaging.Svg.SvgElement.Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.OnElementRemoved(System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Calls the <see cref="M:System.Drawing.Imaging.Svg.SvgElement.RemoveElement(System.Drawing.Imaging.Svg.SvgElement)"/> method with the specified <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> as the parameter.
            </summary>
            <param name="child">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.RenderElement(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders this element to the <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> that the element should use to render itself.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.RenderChildren(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the children of this <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to render the child <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/>s to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.System#Drawing#Imaging#Svg#ISvgElement#Render(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElement.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgElementAttribute">
            <summary>
            Specifies the SVG name of an <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElementAttribute.ElementName">
            <summary>
            Gets the name of the SVG element.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgElementAttribute"/> class with the specified element name;
            </summary>
            <param name="elementName">The name of the SVG element.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgElementCollection">
            <summary>
            Represents a collection of <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/>s.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementCollection.#ctor(System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Initialises a new instance of an <see cref="T:System.Drawing.Imaging.Svg.SvgElementCollection"/> class.
            </summary>
            <param name="owner">The owner <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> of the collection.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementCollection.IndexOf(System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Returns the index of the specified <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> in the collection.
            </summary>
            <param name="item">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> to search for.</param>
            <returns>The index of the element if it is present; otherwise -1.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementCollection.Insert(System.Int32,System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Inserts the given <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> to the collection at the specified index.
            </summary>
            <param name="index">The index that the <paramref name="item"/> should be added at.</param>
            <param name="item">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> to be added.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgElementFactory">
            <summary>
            Provides the methods required in order to parse and create <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> instances from XML.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElementFactory.AvailableElements">
            <summary>
            Gets a list of available types that can be used when creating an <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementFactory.CreateDocument(System.Xml.XmlTextReader)">
            <summary>
            Creates an <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/> from the current node in the specified <see cref="T:System.Xml.XmlTextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlTextReader"/> containing the node to parse into an <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="reader"/> parameter cannot be <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The CreateDocument method can only be used to parse root &lt;svg&gt; elements.</exception>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementFactory.CreateElement(System.Xml.XmlTextReader,System.Drawing.Imaging.Svg.SvgDocument)">
            <summary>
            Creates an <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> from the current node in the specified <see cref="T:System.Xml.XmlTextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlTextReader"/> containing the node to parse into a subclass of <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/>.</param>
            <param name="document">The <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/> that the created element belongs to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="reader"/> and <paramref name="document"/> parameters cannot be <c>null</c>.</exception>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgElementFactory.ElementInfo">
            <summary>
            Contains information about a type inheriting from <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElementFactory.ElementInfo.ElementName">
            <summary>
            Gets the SVG name of the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgElementFactory.ElementInfo.ElementType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> subclass.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementFactory.ElementInfo.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgElementFactory.ElementInfo"/> struct.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementFactory.ElementInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgElementFactory.ElementInfo"/> class.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgElementIdManager">
            <summary>
            Provides methods to ensure element ID's are valid and unique.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementIdManager.GetElementById(System.String)">
            <summary>
            Retrieves the <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> with the specified ID.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID of the element to find.</param>
            <returns>An <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> of one exists with the specified ID; otherwise false.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementIdManager.GetElementById(System.Uri)">
            <summary>
            Gets the Svg element linked by the specified Uri.
            </summary>
            <param name="uri">The Uri linking to the Svg.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementIdManager.Add(System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Adds the specified <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> for ID management.
            </summary>
            <param name="element">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> to be managed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementIdManager.Remove(System.Drawing.Imaging.Svg.SvgElement)">
            <summary>
            Removed the specified <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> from ID management.
            </summary>
            <param name="element">The <see cref="T:System.Drawing.Imaging.Svg.SvgElement"/> to be removed from ID management.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementIdManager.EnsureValidId(System.String)">
            <summary>
            Ensures that the specified ID is valid within the containing <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/>.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID to validate.</param>
            <exception cref="T:System.FormatException">
            <para>The ID cannot start with a digit.</para>
            <para>An element with the same ID already exists within the containing <see cref="T:System.Drawing.Imaging.Svg.SvgDocument"/>.</para>
            </exception>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgElementIdManager.#ctor">
            <summary>
            Initialises a new instance of an <see cref="T:System.Drawing.Imaging.Svg.SvgElementIdManager"/>.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgRenderer.FromImage(System.Drawing.Image)">
            <summary>
            Creates a new <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> from the specified <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="image"><see cref="T:System.Drawing.Image"/> from which to create the new <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgRenderer.FromGraphics(System.Drawing.Graphics)">
            <summary>
            Creates a new <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> from the specified <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to create the renderer from.</param>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgTextReader.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
            <value></value>
            <returns>The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType"/> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space within an xml:space= 'preserve' scope. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgTextReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
            <value></value>
            <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgTextReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgTextReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgTextReader.ResolveEntity">
            <summary>
            Resolves the entity reference for EntityReference nodes.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgText">
            <summary>
            The <see cref="T:System.Drawing.Imaging.Svg.SvgText"/> element defines a graphics element consisting of text.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgText.#cctor">
            <summary>
            Initializes the <see cref="T:System.Drawing.Imaging.Svg.SvgText"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgText"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Svg.SvgText"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.Text">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.TextAnchor">
            <summary>
            Gets or sets the text anchor.
            </summary>
            <value>The text anchor.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.LetterSpacing">
            <summary>
            Specifies spacing behavior between text characters.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.WordSpacing">
            <summary>
            Specifies spacing behavior between words.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.FontFamily">
            <summary>
            Indicates which font family is to be used to render the text.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.FontSize">
            <summary>
            Refers to the size of the font from baseline to baseline when multiple lines of text are set solid in a multiline layout environment.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.Font">
            <summary>
            Set all font information.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <remarks>
            <para>Unlike other SvgGraphicsElements, <see cref="T:System.Drawing.Imaging.Svg.SvgText"/> has a default fill of black rather than transparent.</para>
            </remarks>
            <value>The fill.</value>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.SvgText.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.SvgText.Path">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgTextAnchor">
            <summary>
            Text anchor is used to align (start-, middle- or end-alignment) a string of text relative to a given point.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgTextAnchor.Start">
            <summary>
            The rendered characters are aligned such that the start of the text string is at the initial current text position.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgTextAnchor.Middle">
            <summary>
            The rendered characters are aligned such that the middle of the text string is at the current text position.
            </summary>
        </member>
        <member name="F:System.Drawing.Imaging.Svg.SvgTextAnchor.End">
            <summary>
            The rendered characters are aligned such that the end of the text string is at the initial current text position.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.SvgTextSpan">
            <summary>
            Represents sets a text span.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.Transforms.ISvgTransformable">
            <summary>
            Represents and element that may be transformed.
            </summary>
        </member>
        <member name="P:System.Drawing.Imaging.Svg.Transforms.ISvgTransformable.Transforms">
            <summary>
            Gets or sets an <see cref="T:System.Drawing.Imaging.Svg.Transforms.SvgTransformCollection"/> of element transforms.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Transforms.ISvgTransformable.PushTransforms(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Transforms.ISvgTransformable.PopTransforms(System.Drawing.Imaging.Svg.SvgRenderer)">
            <summary>
            Removes any previously applied transforms from the specified <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Imaging.Svg.SvgRenderer"/> that should have transforms removed.</param>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.Transforms.SvgMatrix">
            <summary>
            The class which applies custom transform to this Matrix (Required for projects created by the Inkscape).
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.Transforms.SvgShear">
            <summary>
            The class which applies the specified shear vector to this Matrix.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.Transforms.SvgSkew">
            <summary>
            The class which applies the specified skew vector to this Matrix.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.Svg.Transforms.SvgTransformCollection">
            <summary>
            Holds a collection of SvgTransform elements.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.Svg.Transforms.SvgTransformConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:System.Drawing.ImageUtils">
            <summary>
            An image manipulation library written in C#.
            </summary>
        </member>
        <member name="T:System.Drawing.ImageUtils.Filter">
            <summary>
            Represents a type of convolution filter to use.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageUtils.Filter.GaussianBlur">
            <summary>
            A gaussian blur convolution filter.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageUtils.Filter.UnsharpMask">
            <summary>
            An unsharp mask convolution filter.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageUtils.Filter.Sharpen">
            <summary>
            A sharpening convolution filter.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageUtils.TilingAttributes">
            <summary>
            Wraparound tiling attributes.
            </summary>
        </member>
        <member name="M:System.Drawing.ImageUtils.GetTrimBounds(System.Drawing.Bitmap)">
            <summary>
            Returns the size of the bitmap after trimming transparent pixels from each side.
            </summary>
            <param name="source">The bitmap to use as source.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Trim(System.Drawing.Bitmap)">
            <summary>
            Trims transparent pixels from each side and returns the result.
            </summary>
            <param name="source">The bitmap to use as source.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Overlay(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Single,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be composited with each other.
            </summary>
            <param name="baseImage">The image to impose on and modify.</param>
            <param name="overlayImage">The image to use as overlay. If it is smaller than the base image, then an error will occur, if it is larger, graphics cropping will occur.</param>
            <param name="opacity">The opacity multiplier of the overlay.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
            <returns>The resultant image.</returns>
        </member>
        <member name="M:System.Drawing.ImageUtils.Transition(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Single,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be averaged out, shifted towards with each other depending on the opacity.
            </summary>
            <param name="baseImage">The image to impose on and modify.</param>
            <param name="overlayImage">The image to transition into.</param>
            <param name="opacity">The point in time during the transition.</param>
            <param name="layout">The layout to use if the overlay image is not the same size as the base image.</param>
            <param name="interpolation">The interpolation algorithm to use if the overlay is not the same size.</param>
            <returns>The resultant image.</returns>
        </member>
        <member name="M:System.Drawing.ImageUtils.AdjustContrast(System.Drawing.Bitmap,System.Single)">
            <summary>
            Adjusts the contrast of an image.
            </summary>
            <param name="image">The image whose contrast to adjust.</param>
            <param name="value">Sets the contrast from 0 (no contrast) upwards. 1 means the image will not be modified.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Stretch(System.Drawing.Image,System.Drawing.Size,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Stretches the image to the specified size using the specified interpolation method.
            </summary>
            <param name="image">The source image to stretch.</param>
            <param name="newSize">The desired size of the stretched image.</param>
            <param name="interpolation">The interpolation method to use.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.DrawStretched(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Draws the specified image stretced to the specified size on the specified graphics canvas at (0, 0).
            </summary>
            <param name="g">The graphics canvas to draw the stretched image on.</param>
            <param name="image">The source image to stretch.</param>
            <param name="size">The desired size of the stretched image.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ResizeImageWithLayout(System.Drawing.Image,System.Drawing.SizeF,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Resizes the image to the specified size using the specified interpolation method and layout.
            </summary>
            <param name="image">The source image to resize.</param>
            <param name="newSize">The desired size of the stretched image.</param>
            <param name="layout">The desired output image layout.</param>
            <param name="interpolation">The interpolation method to use.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.DrawImageWithLayout(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.RectangleF,System.Windows.Forms.ImageLayout)">
            <summary>
            Draws the specified image resized to the specified size on the given graphics canvas using the specified layout.
            </summary>
            <param name="g">The graphics canvas to draw the stretched image on.</param>
            <param name="image">The source image to resize.</param>
            <param name="area">The desired area to draw the stretched image.</param>
            <param name="layout">The desured layout of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.CenterOf(System.Drawing.Rectangle)">
            <summary>
            Returns the center of the specified rectangle.
            </summary>
            <param name="rect">The rectangle to get the center of.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.AlignRectangle(System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.ContentAlignment)">
            <summary>
            Aligns the specified rectangle inside the given bounds and returns the new location of the rectangle after alignment.
            </summary>
            <param name="bounds">The boundaries to align the rectangle into.</param>
            <param name="size">The size of the rectangle to center.</param>
            <param name="alignment">The alignment of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.AlignRectangle(System.Drawing.RectangleF,System.Drawing.SizeF,System.Drawing.ContentAlignment)">
            <summary>
            Aligns the specified rectangle inside the given bounds and returns the new location of the rectangle after alignment.
            </summary>
            <param name="bounds">The boundaries to align the rectangle into.</param>
            <param name="size">The size of the rectangle to center.</param>
            <param name="alignment">The alignment of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.CenterOf(System.Drawing.RectangleF)">
            <summary>
            Returns the center of the specified rectangle.
            </summary>
            <param name="rect">The rectangle to get the center of.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Center(System.Drawing.Size,System.Drawing.Point)">
            <summary>
            Centers the specified rectangle around the specified point by returning its new location.
            </summary>
            <param name="size">The size of the rectangle to center.</param>
            <param name="center">The point to center the rectangle around.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Center(System.Drawing.SizeF,System.Drawing.PointF)">
            <summary>
            Centers the specified rectangle around the specified point by returning its new location.
            </summary>
            <param name="size">The size of the rectangle to center.</param>
            <param name="center">The point to center the rectangle around.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.SetBackColor(System.Drawing.Bitmap,System.Drawing.Color,System.Single)">
            <summary>
            Sets the backround color the image is overlaid upon (only has an effect if the specified image contains transparency).
            </summary>
            <param name="image">The image whose backcolor to change.</param>
            <param name="backColor">The color to use for the specified image to be overlaid upon.</param>
            <param name="opacity">The opacity to multiply the backcolor with.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.SetImageOpacity(System.Drawing.Bitmap,System.Single)">
            <summary>
            Changes the image opacity by multiplying all colors with the specified component.
            </summary>
            <param name="image">The image whose global opacity to set.</param>
            <param name="opacity">The multiplier to use.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.DrawFaded(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.RectangleF,System.Single)">
            <summary>
            Draws the specified image on the given canvas using the specified opacity.
            </summary>
            <param name="g">The graphics canvas to draw the faded image on.</param>
            <param name="image">The image to draw.</param>
            <param name="dest">The destination rectangle.</param>
            <param name="opacity">The opacity to multiply the image with.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ConvertPixelFormat(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts the bitmap pixel format.
            </summary>
            <param name="image">The image to use.</param>
            <param name="format">The destination pixel format of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ConvertPixelFormat(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts the bitmap pixel format and stretches it to the specified width and height.
            </summary>
            <param name="image">The image to use.</param>
            <param name="format">The destination pixel format of the image.</param>
            <param name="newWidth">The width of the resultant image.</param>
            <param name="newHeight">The height of the resultant image.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.GetOpacityAttributes(System.Single)">
            <summary>
            Gets the ImageAttributes from the specified opacity.
            </summary>
            <param name="opacity">The opacity attribute.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToDestPoints(System.Drawing.Rectangle)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="rectangle">The rectangle to extract the destination points from.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToDestPoints(System.Drawing.RectangleF)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="rectangle">The rectangle to extract the destination points from.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToDestPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="x">The X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToDestPoints(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="x">The X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToDestPoints(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="location">The coordinates of the upper-left corner of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToDestPoints(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="location">The coordinates of the upper-left corner of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Compose(System.Drawing.Color,System.Drawing.Color,System.Byte)">
            <summary>
            Composes the given pixels by calculating the addition of their colors and returning the result with the specified alpha component.
            </summary>
            <param name="basePixel">The base pixel color.</param>
            <param name="overlayPixel">The pixel whose color is to be overlaid on the base pixel.</param>
            <param name="alpha">The alpha component of the resulting color.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Overlay(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Overlays the specified pixel on top of the base pixel and returns the resultant color.
            </summary>
            <param name="basePixel">The base pixel color.</param>
            <param name="overlayPixel">The pixel whose color is to be overlaid on the base pixel.</param>
            <param name="opacity">The opacity multiplier of the overlay.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Overlay(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Overlays the specified pixel on top of the base pixel and returns the resultant color.
            </summary>
            <param name="basePixel">The base pixel color.</param>
            <param name="overlayPixel">The pixel whose color is to be overlaid on the base pixel.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Transition(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Computes the transition color at the state specified.
            </summary>
            <param name="basePixel">The original pixel color.</param>
            <param name="overlayPixel">The target pixel color.</param>
            <param name="opacity">The transition state (0 - original, 1 - target color).</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Transition(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Computes the transition color at the state specified.
            </summary>
            <param name="basePixel">The original pixel color.</param>
            <param name="overlayPixel">The target pixel color.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Transition(System.Drawing.Color,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Computes the transition color at the state specified.
            </summary>
            <param name="basePixel">The original pixel color.</param>
            <param name="overlayPixel">The target pixel color.</param>
            <param name="opacity">The transition state (0 - original, 1 - target color).</param>
            <param name="offset">The transition linear offset.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Transition(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes the transition value at the state specified.
            </summary>
            <param name="baseValue">The original value.</param>
            <param name="targetValue">The target value.</param>
            <param name="state">The transition state (0 - original value, 1 - target value).</param>
            <param name="offset">The transition linear offset.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Transition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the transition value at the state specified.
            </summary>
            <param name="baseValue">The original value.</param>
            <param name="targetValue">The target value.</param>
            <param name="state">The transition state (0 - original value, 1 - target value).</param>
            <param name="offset">The transition linear offset.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ApplyFilter(System.Drawing.Bitmap,System.Drawing.ImageUtils.Filter,System.Single,System.Single)">
            <summary>
            Applies the specifies convolution filter to the given image.
            </summary>
            <param name="image">The image to apply the filter to.</param>
            <param name="type">The type of convolution filter to apply.</param>
            <param name="radius">The radius of the blur filter.</param>
            <param name="amount">The mix level of the filter.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToRGB(System.Byte)">
            <summary>
            Converts the specified grayscale color to RGB.
            </summary>
            <param name="grayscale">The grayscale color to convert.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToARGB(System.Byte,System.Byte)">
            <summary>
            Converts the specified grayscale color to ARGB.
            </summary>
            <param name="grayscale">The grayscale color to convert.</param>
            <param name="alpha">The alpha component of the output.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToGrayscale(System.Drawing.Color)">
            <summary>
            Converts the specified color to a grayscale.
            </summary>
            <param name="color">The color to convert to grayscale.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToGrayscale(System.Drawing.Color,System.Byte)">
            <summary>
            Converts the specified color to a grayscale.
            </summary>
            <param name="color">The color to convert to grayscale.</param>
            <param name="alpha">The alpha value to use instead of the color's.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ToGrayscale(System.Drawing.Color,System.Single)">
            <summary>
            Converts the specified color to a grayscale.
            </summary>
            <param name="color">The color to convert to grayscale.</param>
            <param name="opacity">The opacity to multiply to the color.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.AntiAlias(System.Drawing.Bitmap,System.Single)">
            <summary>
            Applies pixeloffset anti-aliasing (PFAA) to the specified image.
            </summary>
            <param name="image">The image to apply anti-aliasing to.</param>
            <param name="offset">The pixel offset to use for anti-aliasing (0 means no anti-aliasing, 0.5 means maximum offset.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.PixelOffset(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Returns an image with a given pixel offset (size of original bitmap + offset).
            </summary>
            <param name="image">The image to offset.</param>
            <param name="offset">The amount of X and Y offset to apply.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.PixelOffset(System.Drawing.Bitmap,System.Drawing.Size,System.Int32)">
            <summary>
            Returns an image with a given pixel offset. The size of the resultant is the specified size + offset).
            </summary>
            <param name="image">The image to offset.</param>
            <param name="size">The size of the resulting bitmap (excluding offset).</param>
            <param name="offset">The amount of X and Y offset to apply.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.PixelOffset(System.Drawing.Bitmap,System.Single)">
            <summary>
            Returns an image with a given pixel offset (size of original bitmap + offset).
            </summary>
            <param name="image">The image to offset.</param>
            <param name="offset">The amount of X and Y offset to apply.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Crop(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Crops the given imae to the specified rectangle.
            </summary>
            <param name="source">The source image to crop.</param>
            <param name="section">The section to keep.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ChangeBrightness(System.Drawing.Color,System.Single)">
            <summary>
            Changes the brightness of the specified color.
            </summary>
            <param name="color">The color whose brightness to change.</param>
            <param name="multiplier">The brightness multiplier (0 means black, 1 means brightness is unchanged, larger numbers increase brightness).</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.ChangeLightness(System.Drawing.Color,System.Int32)">
            <summary>
            Changes the lightness of the specified color.
            </summary>
            <param name="color">The color whose lightness to change.</param>
            <param name="offset">The color offset.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Truncate(System.Single)">
            <summary>
            Truncates the value to byte range.
            </summary>
            <param name="value">The value to truncate.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.TruncateToDouble(System.Double)">
            <summary>
            Truncates the value to byte range.
            </summary>
            <param name="value">The value to truncate.</param>
        </member>
        <member name="M:System.Drawing.ImageUtils.Truncate(System.Int32)">
            <summary>
            Truncates the value to byte range.
            </summary>
            <param name="value">The value to truncate.</param>
        </member>
        <member name="T:System.Drawing.PixelProcessingWrapper">
            <summary>
            Wraps a bitmap image to optimize for fast pixel processing.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelProcessingWrapper.Format">
            <summary>
            Gets the pixel format of the image.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelProcessingWrapper.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelProcessingWrapper.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelProcessingWrapper.Bounds">
            <summary>
            Gets the image rectangle.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelProcessingWrapper.DisposeImage">
            <summary>
            Whether to dispose the image as well on dispose.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelProcessingWrapper.Pixels">
            <summary>
            The byte array of pixel components. It is the size of PixelComponentCount.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelProcessingWrapper.PixelCount">
            <summary>
            The number of pixels in the image (Width * Height).
            </summary>
        </member>
        <member name="F:System.Drawing.PixelProcessingWrapper.ComponentCount">
            <summary>
            The number of components or channels per pixel (Depth / 8).
            </summary>
        </member>
        <member name="F:System.Drawing.PixelProcessingWrapper.PixelComponentCount">
            <summary>
            The total number of components or channels (PixelCount * ComponentCount).
            </summary>
        </member>
        <member name="P:System.Drawing.PixelProcessingWrapper.ImageCopy">
            <summary>
            Gets a copy of the image represented by this instance.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelProcessingWrapper.Image">
            <summary>
            Gets the image represented by this instance.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelProcessingWrapper.BitmapData">
            <summary>
            Gets the bitmap data representative by this instance.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelProcessingWrapper.Disposed">
            <summary>
            Gets whether Pixels is null.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.#ctor(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Initializes a new PixelProcessingwrapper from the specified image.
            </summary>
            <param name="image">The image to get the required data from.</param>
            <param name="disposeImage">Whether to dispose the image as well on dispose.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new PixelProcessingwrapper from the pixel values.
            </summary>
            <param name="pixels">The pixel channels array of the image.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="copyPixelArray">Whether to copy the pixel array or just reference it.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.#ctor(System.Drawing.Imaging.BitmapData)">
            <summary>
            Initializes a new PixelProcessingwrapper from the given locked bitmap data.
            </summary>
            <param name="bitmapData">The pixel channels array of the image.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.GetPixelIndex(System.Int32,System.Int32)">
            <summary>
            Gets the pixel index referred to by the specified coordinates.
            </summary>
            <param name="x">The X-coordinate of the pixel.</param>
            <param name="y">The Y-coordinate of the pixel.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.GetPixelPointUsingPixelCount(System.Int32)">
            <summary>
            Gets the pixel point referred to by the specified pixel.
            </summary>
            <param name="index">The pixel number (horizontal scan).</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.GetPixelPoint(System.Int32)">
            <summary>
            Gets the pixel point referred to by the specified pixel.
            </summary>
            <param name="index">The pixel address (horizontal scan).</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.GetPixel(System.Drawing.Point)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.GetPixel(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.GetPixelUsingPixelCount(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (PixelCount-1) of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Get32BitPixelUsingPixelCount(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (PixelCount-1) of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Get24BitPixelUsingPixelCount(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (PixelCount-1) of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Get8BitPixelUsingPixelCount(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (PixelCount-1) of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Get32BitPixel(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Get24BitPixel(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Get8BitPixel(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Get32BitPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Get24BitPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.GetAllPixels">
            <summary>
            Gets all the colors of pixels.
            </summary>
            <returns>The array of pixel colors.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Clear">
            <summary>
            Clears all pixels.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Clear(System.Drawing.Color)">
            <summary>
            Clears all pixels with the specified color.
            </summary>
            <param name="color">The color to set all pixels to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.GetAllPixels2D">
            <summary>
            Gets all the colors of pixels (slow).
            </summary>
            <returns>The 2D array of pixel colors.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Get8BitPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.SetPixel(System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.SetPixel(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.SetPixelUsingPixelCount(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (PixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Set32BitPixelUsingPixelCount(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (PixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Set24BitPixelUsingPixelCount(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (PixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Set8BitPixelUsingPixelCount(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (PixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Set32BitPixel(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Set24BitPixel(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Set8BitPixel(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Set32BitPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Set24BitPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Set8BitPixel(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.SetAllPixels(System.Drawing.Color[])">
            <summary>
            Sets all the pixels to the specified colors.
            </summary>
            <param name="colors">The array of colors to set the pixels to.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.SetAllPixels2D(System.Drawing.Color[][])">
            <summary>
            Sets all the pixels to the specified colors (slow).
            </summary>
            <param name="colors">The array of colors to set.</param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.ReloadPixelsFromBitmap">
            <summary>
            Reloads the pixel values from the bitmap (usually not useful).
            </summary>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.WriteChanges">
            <summary>
            Writes all modifications to the bitmap.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.LockBits(System.Drawing.Imaging.ImageLockMode)">
            <summary>
            Locks the bits of the image.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.UnlockBits">
            <summary>
            Unlocks the bits of the image.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Finalize">
            <summary>
            Destructs the current instance.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Dispose">
            <summary>
            Disposes of the original image.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelProcessingWrapper.Dispose(System.Boolean)">
            <summary>
            Disposes of the original image.
            </summary>
            <param name="writeChanges">Whethe to write any modifications to the image.</param>
        </member>
        <member name="T:System.IO.Compression.CompressionUtils">
            <summary>
            Contains utilities for handling Zip compression.
            </summary>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.Compress(System.Byte[])">
            <summary>
            Compresses the byte array using a Zip algorithm.
            </summary>
            <param name="bytes">The byte array to compress.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.CompressToStream(System.Byte[])">
            <summary>
            Compresses the byte array onto a stream in memory.
            </summary>
            <param name="bytes">The byte array to compress.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.Compress(System.IO.Stream)">
            <summary>
            Compresses the stream into a byte array.
            </summary>
            <param name="stream">The stream of data to compress.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.CompressToStream(System.IO.Stream)">
            <summary>
            Compresses the stream onto a memory stream.
            </summary>
            <param name="stream">The stream of data to compress.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.Decompress(System.Byte[])">
            <summary>
            Deompresses the byte array using a Zip algorithm.
            </summary>
            <param name="bytes">The byte array of compressed data.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.DecompressToStream(System.Byte[])">
            <summary>
            Decompresses the byte array onto a stream in memory.
            </summary>
            <param name="bytes">The byte array of compressed data.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.Decompress(System.IO.Stream)">
            <summary>
            Decompresses the stream into a byte array.
            </summary>
            <param name="stream">The stream of compressed data.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.DecompressToStream(System.IO.Stream)">
            <summary>
            Decompresses the stream onto a memory stream.
            </summary>
            <param name="stream">The stream of compressed data.</param>
        </member>
        <member name="T:System.IO.FileLoader">
            <summary>
            Handles flexible file loading for an application.
            </summary>
        </member>
        <member name="F:System.IO.FileLoader.Directories">
            <summary>
            The directories to search the file for.
            </summary>
        </member>
        <member name="M:System.IO.FileLoader.LoadFile(System.String,System.IO.FileMode)">
            <summary>
            Loads the specified file.
            </summary>
            <param name="path">A path to the file (can be relative or absolute).</param>
            <param name="mode">The file mode to use.</param>
        </member>
        <member name="T:System.MathHelper">
            <summary>
            Contains common mathematical functions and constants.
            </summary>
        </member>
        <member name="F:System.MathHelper.TwoPIInverseF">
            <summary>
            Defines the value of 1/2Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.TwoPIInverseD">
            <summary>
            Defines the value of 1/2Pi as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PIInverseF">
            <summary>
            Defines the value of 1/Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PIInverseD">
            <summary>
            Defines the value of 1/Pi as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiF">
            <summary>
            Defines the value of Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiD">
            <summary>
            Defines the value of Pi as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver2F">
            <summary>
            Defines the value of Pi/2 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver2D">
            <summary>
            Defines the value of Pi/2 divided by two as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver3F">
            <summary>
            Defines the value of Pi/3 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver3D">
            <summary>
            Defines the value of Pi/3 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver4F">
            <summary>
            Defines the value of Pi/4 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver4D">
            <summary>
            Defines the value of Pi/4 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver5F">
            <summary>
            Defines the value of Pi/5 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver5D">
            <summary>
            Defines the value of Pi/5 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver6F">
            <summary>
            Defines the value of Pi/6 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.PiOver6D">
            <summary>
            Defines the value of Pi/6 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.TwoPiF">
            <summary>
            Defines the value of Pi*2 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.TwoPiD">
            <summary>
            Defines the value of Pi*2 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.ThreePiF">
            <summary>
            Defines the value of Pi*3 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.ThreePiD">
            <summary>
            Defines the value of Pi*3 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.ThreePiOver2F">
            <summary>
            Defines the value of Pi*3/2 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.ThreePiOver2D">
            <summary>
            Defines the value of Pi*3/2 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.Log10eF">
            <summary>
            Defines the base-10 logarithm of E as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.Log10eD">
            <summary>
            Defines the base-10 logarithm of E as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.MathHelper.DegToRadF">
            <summary>
            Defines a constant that when multiplied to a degrees value converts it to radians (PI/180). 
            </summary>
        </member>
        <member name="F:System.MathHelper.DegToRadD">
            <summary>
            Defines a constant that when multiplied to a degrees value converts it to radians (PI/180). 
            </summary>
        </member>
        <member name="F:System.MathHelper.RadToDegF">
            <summary>
            Defines a constant that when multiplied to a radian value converts it to degrees (180/PI). 
            </summary>
        </member>
        <member name="F:System.MathHelper.RadToDegD">
            <summary>
            Defines a constant that when multiplied to a radian value converts it to degrees (180/PI). 
            </summary>
        </member>
        <member name="F:System.MathHelper.SqrtOf2F">
            <summary>
            Defines the square root of 2. 
            </summary>
        </member>
        <member name="F:System.MathHelper.SqrtOf2D">
            <summary>
            Defines the square root of 2. 
            </summary>
        </member>
        <member name="M:System.MathHelper.NormInv(System.Double,System.Double,System.Double)">
            <summary>
            Quantile function (Inverse CDF) for the normal distribution (based on the R function QNorm()).
            </summary>
            <param name="p">Probability.</param>
            <param name="mean">The mean of normal distribution.</param>
            <param name="sigma">Standard deviation of normal distribution.</param>
        </member>
        <member name="M:System.MathHelper.Sigmoid(System.Double)">
            <summary>
            Computes the sigmoid of the specified parameter.
            </summary>
            <param name="value">The value to use as parameter.</param>
        </member>
        <member name="M:System.MathHelper.ApplyNormativeSkew(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Skews the specified uniform values into a normal frequency distribution approximation (no randomization).
            </summary>
            <param name="min">The minimum value of the distribution graph.</param>
            <param name="value">The value to convert into the corresponding normally-distributed value.</param>
            <param name="max">The maximum value of the distribution graph.</param>
            <param name="inverted">Whether to flip the distribution upside down (favoring min and max instead of the center).</param>
        </member>
        <member name="M:System.MathHelper.CeilingPowerOfTwo(System.Int64)">
            <summary>
            Returns the next power of two that is equal or larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:System.MathHelper.CeilingPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is equal or larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:System.MathHelper.NextPowerOfTwo(System.Double)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:System.MathHelper.Factorial(System.Int32)">
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:System.MathHelper.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="T:System.Threading.Dispatch.Dispatcher">
            <summary>
            Invokes methods synchronously or asynchronously on a thread.
            </summary>
        </member>
        <member name="T:System.Threading.Dispatch.Dispatcher.InvokeEventHandler">
            <summary>
            Represents the event handler of an invocation.
            </summary>
            <param name="sender">The instance on which the event occurred.</param>
            <param name="e">The data of the invocation.</param>
        </member>
        <member name="T:System.Threading.Dispatch.Dispatcher.StartedEventHandler">
            <summary>
            Represents the event handler of when the dispatcher is started.
            </summary>
            <param name="sender">The instance on which the event occurred.</param>
            <param name="mode">The mode of the dispatcher.</param>
        </member>
        <member name="T:System.Threading.Dispatch.Dispatcher.DisposingEventHandler">
            <summary>
            Represents the event handler of when the dispatcher is being disposed.
            </summary>
            <param name="sender">The instance on which the event occurred.</param>
            <param name="sync">Whether the dispatcher is being disposed synchronously or asynchronously.</param>
        </member>
        <member name="T:System.Threading.Dispatch.Dispatcher.ExceptionEventHandler">
            <summary>
            Represents the event handler of when the dispatcher encountered an exception during an invocation and caught it.
            </summary>
            <param name="sender">The instance on which the event occurred</param>
            <param name="e">The exception that occurred.</param>
        </member>
        <member name="E:System.Threading.Dispatch.Dispatcher.InvocationQueued">
            <summary>
            Signals that an invocation has been added to the queue.
            </summary>
        </member>
        <member name="E:System.Threading.Dispatch.Dispatcher.InvocationStarted">
            <summary>
            Signals that an invocation has been started.
            </summary>
        </member>
        <member name="E:System.Threading.Dispatch.Dispatcher.InvocationEnded">
            <summary>
            Signals that an invocation has ended.
            </summary>
        </member>
        <member name="E:System.Threading.Dispatch.Dispatcher.Disposing">
            <summary>
            Signals that the dispatcher is being disposed.
            </summary>
        </member>
        <member name="E:System.Threading.Dispatch.Dispatcher.ExceptionOccurred">
            <summary>
            Signals that the dispatcher encountered an exception during invocation and caught it.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.Dispatcher.IsBackground">
            <summary>
            Whether the thread is a background thread.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.Dispatcher.IsHidden">
            <summary>
            Whether the dispatcher is hidden, thus could not be obtained using the System.Threading.Dispatcher.GetDispatcherOnThread() method.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.Mode">
            <summary>
            The mode the dispatcher thread was initialized in.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.InvokeRequired">
            <summary>
            Gets or sets whether asynchronous calls are disabled (if true, then disabled).
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.NumberOfDispatchers">
            <summary>
            Gets the current number of dispatchers that are runnning.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.CatchErrors">
            <summary>
            Gets or sets whether to catch or throw errors during invocation.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.MaxPriority">
            <summary>
            Gets the highest priority that an invocation can have on the dispatcher.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.DispatchThread">
            <summary>
            Gets the thread on which the dispatcher resides.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.DefaultPriority">
            <summary>
            Gets the default priority of invocations.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.Current">
            <summary>
            Gets the invocation that is currently being executed.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.Queue">
            <summary>
            Gets the length of the dispatch queue.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.IsRunning">
            <summary>
            Gets whether the dispatcher is started.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.IsDisposed">
            <summary>
            Gets whether the dispatcher is disposed.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.SuppressEvents">
            <summary>
            Gets or sets whether or not to suppress events.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.State">
            <summary>
            Gets the current state of the dispatcher.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.Dispatcher.SynchronizingObject">
            <summary>
            Gets or sets the synchronizing object on which to fire events.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.#ctor(System.Threading.Dispatch.DispatchMode,System.Boolean,System.Boolean)">
            <summary>
            Initializes the dispatcher, with a maximum priority of 7.
            </summary>
            <param name="mode">Specifies the thread on which the dispatcher will reside.</param>
            <param name="isBackground">Whether the thread is set to background (only applies to "OnSeperateThread" mode).</param>
            <param name="sync">Whether to start the dispatcher synchronously or asynchronously.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.#ctor(System.Threading.Dispatch.DispatchMode,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Initializes the dispatcher.
            </summary>
            <param name="mode">Specifies the thread on which the dispatcher will reside.</param>
            <param name="isBackground">Whether the thread is set to background (only applies to "OnSeperateThread" mode).</param>
            <param name="sync">Whether to start the dispatcher synchronously or asynchronously.</param>
            <param name="maxPriority">The highest priority that an invocation can have on the dispatcher.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.CheckForDispatcherOnThread(System.Threading.Thread)">
            <summary>
            Returns whether a dispatcher resides on the specified thread.
            </summary>
            <param name="thread">The thread on which to check for a dispatcher.</param>
            <returns>Whether a dispatcher resides on the specified thread.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.GetDispatcherOnThread(System.Threading.Thread)">
            <summary>
            Returns the dispatcher that resides on the specified thread. The return value cannot be converted to System.Threading.Dispatch.Dispatcher while the IsHidden property of it is set to true.
            </summary>
            <param name="thread">The thread on which to check for a dispatcher.</param>
            <returns>The dispatcher associated with the specified thread (may be read-only).</returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.CreateCopy">
            <summary>
            Returns the instance.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.BeginInvoke(System.Threading.Dispatch.InvokeEventArgs@)">
            <summary>
            Invokes the specified method asynchronously. This is the fastest and the most versatile overload.
            </summary>
            <param name="e">Holds the data required to make an invocation.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.BeginInvoke(System.Threading.Dispatch.InvokeEventArgsSlim@)">
            <summary>
            Invokes the specified method asynchronously.
            </summary>
            <param name="e">Holds the data required to make an invocation.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method asynchronously. The return value is actually an instance of InvokeEventArgs.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="args">The parameters to pass to the method.</param>
            <returns>The data of the invocation.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.BeginInvoke(System.Boolean,System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method asynchronously.
            </summary>
            <param name="canConvert">Whether the invocation can be converted to synchronous.</param>
            <param name="method">The method to invoke.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>The data of the invocation.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.BeginInvoke(System.Byte,System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method asynchronously.
            </summary>
            <param name="priority">The priority of the invocation.</param>
            <param name="method">The method to invoke.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>The data of the invocation.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.BeginInvoke(System.Boolean,System.Byte,System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method asynchronously.
            </summary>
            <param name="canConvert">Whether the invocation can be converted to synchronous.</param>
            <param name="priority">The priority of the invocation.</param>
            <param name="method">The method to invoke.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>The data of the invocation.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Do not use. Use BeginInvoke() instead.
            </summary>
            <param name="d">The method to invoke.</param>
            <param name="state">The parameter to pass to the method.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Invoke(System.Threading.Dispatch.InvokeEventArgs@)">
            <summary>
            Invokes the specified method synchronously. This is the fastest and the most versatile overload.
            </summary>
            <param name="e">Holds the data required to make an invocation.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Invoke(System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method synchronously. Returns the return value of the method.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="args">The parameters to pass to the method.</param>
            <returns>The return value of the method.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Invoke(System.Byte,System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method synchronously.
            </summary>
            <param name="priority">The priority of the invocation.</param>
            <param name="method">The method to invoke.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>The data of the invocation.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Do not use. Use Invoke() instead.
            </summary>
            <param name="d">The method to invoke.</param>
            <param name="state">The parameter to pass to the method.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.EndInvoke(System.IAsyncResult)">
            <summary>
            Converts an invocation from asynchronous to synchronous by waiting for the invocation to end. Returns the return value of the method. Do not use. Use the other overload of EndInvoke() instead.
            </summary>
            <param name="result">The data returned by the invocation (must be a valid instance of InvokeEventArgs).</param>
            <returns>The return value of the method.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.EndInvoke(System.Threading.Dispatch.InvokeEventArgs)">
            <summary>
            Converts an invocation to synchronous by waiting for the invocation to end. This is the fastest and most versatile overload.
            </summary>
            <param name="e">The data returned by the invocation.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.GetCurrentQueuePosition(System.Threading.Dispatch.InvokeEventArgs)">
            <summary>
            Returns the number of invocations that are to be dispatched before the one specified. 
            </summary>
            <param name="e">The invocation data to look for.</param>
            <returns>The number of invocations that are to be dispatched before the one specified. </returns>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.InterruptExecution(System.Boolean)">
            <summary>
            Interrupts the execution of te current delegate (highly not recommended).
            </summary>
            <param name="sync">Whether to synchronize the interruption.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.OperationStarted">
            <summary>
            Sends the signal that an invocation has started.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.OperationCompleted">
            <summary>
            Sends the signal that an invocation has completed.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Wait">
            <summary>
            Waits for the dispatcher to be disposed.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Wait(System.Int32)">
            <summary>
            Waits for the dispatcher to be disposed, with the specified millisecond timeout.
            </summary>
            <param name="milliseconds">The amount of milliseconds to wait for the dispatcher to be disposed.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Wait(System.TimeSpan)">
            <summary>
            Waits for the dispatcher to be disposed, with the specified timespan.
            </summary>
            <param name="timeSpan">The time span to wait for the dispatcher to be disposed.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Finalize">
            <summary>
            Disposes of the dispatcher asynchronously.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Dispose">
            <summary>
            Disposes of the dispatcher asynchronously.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Dispose(System.Boolean)">
            <summary>
            Disposed of the dispatcher.
            </summary>
            <param name="sync">Whether to dispose it synchronously or asynchronously.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Dispose(System.Byte)">
            <summary>
            Disposes of the dispatcher.
            </summary>
            <param name="priority">The priority at which the dispatcher will be disposed.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.Dispose(System.Boolean,System.Byte)">
            <summary>
            Disposes of the dispatcher.
            </summary>
            <param name="sync">Whether to dispose it synchronously or asynchronously.</param>
            <param name="priority">The priority at which the dispatcher will be disposed.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.OnInvocationQueued(System.Threading.Dispatch.InvokeEventArgs)">
            <summary>
            Fires the InvocationQueued event.
            </summary>
            <param name="e">The data of the invocation.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.OnInvocationStarted(System.Threading.Dispatch.InvokeEventArgs)">
            <summary>
            Fires the InvocationStarted event.
            </summary>
            <param name="e">The data of the invocation.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.OnInvocationEnded(System.Threading.Dispatch.InvokeEventArgs)">
            <summary>
            Fires the InvocationEnded event.
            </summary>
            <param name="e">The data of the invocation.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.OnDisposing(System.Boolean)">
            <summary>
            Fires the Disposing event.
            </summary>
            <param name="sync">Whether the dispatcher is disposing synchronously or asynchronously.</param>
        </member>
        <member name="M:System.Threading.Dispatch.Dispatcher.OnExceptionOccurred(System.Exception)">
            <summary>
            Fires the ExceptionOccurred event.
            </summary>
            <param name="e">The exception that the dispatcher caught.</param>
        </member>
        <member name="T:System.Threading.Dispatch.DispatcherSlim">
            <summary>
            A slim version of System.Threading.Dispatch.Dispatcher.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.IsBackground">
            <summary>
            Whether the thread is a background thread.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.IgnoreInvocations">
            <summary>
            Gets or sets whether to ignore invocations.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.CatchExceptions">
            <summary>
            Gets or sets whether to catch exceptions.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.IsExecuting">
            <summary>
            Whether dispatcher is currently invoking methods.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.IsStarted">
            <summary>
            Gets whether the dispatcher is started.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.IsDisposed">
            <summary>
            Gets whether the dispatcher is disposed.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.DispatchThread">
            <summary>
            Gets the thread on which the dispatcher resides.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes and starts new instance of DispatcherSlim.
            </summary>
            <param name="isBackground">Whether the thread is a background thread.</param>
            <param name="catchExceptions">Whether to catch any exceptions that may some up.</param>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.BeginInvoke(System.Threading.Dispatch.InvokeEventArgsSlim)">
            <summary>
            Invokes the specified method with the specified parameters.
            </summary>
            <param name="e">Holds the data required for a slim invocation.</param>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.InterruptExecution">
            <summary>
            Interrupts the execution of the current delegate (highly not recommended).
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.Finalize">
            <summary>
            Disposes of the dispatcher asynchronously.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.Dispose">
            <summary>
            Disposes of the dispatcher asynchronously.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.Dispose(System.Boolean)">
            <summary>
            Disposes of the dispatcher, specifying whether it is disposed synchronously or asynchronously.
            </summary>
            <param name="sync">Whether the dispatcher is disposed synchronously or asynchronously.</param>
        </member>
        <member name="T:System.Threading.Dispatch.DispatcherState">
            <summary>
            Provides information about the dispatcher's state.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Starting">
            <summary>
            The dispatcher is starting.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Idle">
            <summary>
            The dispatcher is running and it is waiting for an invocation.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Busy">
            <summary>
            The dispatcher is running and it is busy invoking methods.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Disposing">
            <summary>
            The dispatcher is being disposed.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Disposed">
            <summary>
            The dispatcher is disposed.
            </summary>
        </member>
        <member name="T:System.Threading.Dispatch.DispatchMode">
            <summary>
            Specifies the thread on which the dispatcher will reside.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatchMode.OnCurrentThread">
            <summary>
            The dispatcher will reside on the current thread (causing the thread to block until the dispatcher is disposed).
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatchMode.OnSeperateThread">
            <summary>
            The dispatcher will reside on a seperate thread.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatchMode.OnThreadPoolThread">
            <summary>
            The dispatcher will reside on a ThreadPool thread.
            </summary>
        </member>
        <member name="T:System.Threading.Dispatch.InvokeEventArgs">
            <summary>
            Holds the data required for a synchronous or asynchronous invocation.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.IsVisible">
            <summary>
            Gets or sets whether the invocation data is visible, thus no read-only wrapper is used to send the data to event handlers.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.CanConvertToSync">
            <summary>
            Gets whether the invocation can be converted to synchronous using System.Threading.Dispatch.Dispatcher.EndInvoke().
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.State">
            <summary>
            Gets the current state of the invocation.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.AsyncState">
            <summary>
            Gets the return value of the method. If the invocation has not yet completed, gets null.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.CompletedSynchronously">
            <summary>
            Gets whether the operation completed synchronously.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.AsyncWaitHandle">
            <summary>
            Gets the wait handle of the invocation.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.IsQueued">
            <summary>
            Gets whether this instance has been queued for invocation.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.IsStarted">
            <summary>
            Gets whether the invocation has started.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.IsCompleted">
            <summary>
            Gets whether the operation is completed.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgs.Priority">
            <summary>
            Gets or sets the priority of the invocation.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.InvokeEventArgs.CompareTo(System.Object)">
            <summary>
            Compares the priority of instance to the priority of the one specified.
            </summary>
            <param name="obj">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of this instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvokeEventArgs.CompareTo(System.Threading.Dispatch.InvokeEventArgs)">
            <summary>
            Compares the priority of the instance to the priority of the one specified.
            </summary>
            <param name="e">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of this instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvokeEventArgs.Compare(System.Threading.Dispatch.InvokeEventArgs,System.Threading.Dispatch.InvokeEventArgs)">
            <summary>
            Compares the priority of the instance of InvokeEventArgs to the priority of the one specified.
            </summary>
            <param name="instance">The instance of InvokeEventArgs.</param>
            <param name="toCompareWith">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of the instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvokeEventArgs.Compare(System.Object,System.Object)">
            <summary>
            Compares the priority of the instance of InvokeEventArgs to the priority of the one specified.
            </summary>
            <param name="instance">The instance of InvokeEventArgs.</param>
            <param name="toCompareWith">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of the instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvokeEventArgs.CompareStatic(System.Threading.Dispatch.InvokeEventArgs,System.Threading.Dispatch.InvokeEventArgs)">
            <summary>
            Compares the priority of the instance of InvokeEventArgs to the priority of the one specified.
            </summary>
            <param name="instance">The instance of InvokeEventArgs.</param>
            <param name="toCompareWith">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of the instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvokeEventArgs.CompareStatic(System.Object,System.Object)">
            <summary>
            Compares the priority of the instance of InvokeEventArgs to the priority of the one specified.
            </summary>
            <param name="instance">The instance of InvokeEventArgs.</param>
            <param name="toCompareWith">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of the instance to the priority of the one specified.</returns>
        </member>
        <member name="T:System.Threading.Dispatch.InvokeEventArgsSlim">
            <summary>
            Holds the data for a simple invocation.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgsSlim.Method">
            <summary>
            Gets the method to invoke.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvokeEventArgsSlim.Parameters">
            <summary>
            Gets the parameters to pass to the method.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.InvokeEventArgsSlim.#ctor(System.Delegate,System.Object[])">
            <summary>
            Initializes a new instance of InvokeEventArgsSlim.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameters">The parameters to pass to the method.</param>
        </member>
        <member name="T:System.Threading.Dispatch.InvokeState">
            <summary>
            The state of the invocation.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvokeState.Idle">
            <summary>
            The invocation has not been used.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvokeState.Queued">
            <summary>
            The invocation has been queued.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvokeState.Started">
            <summary>
            The invocation has started.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvokeState.Completed">
            <summary>
            The invocation has completed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ArrowButton">
            <summary>
            A rotatable arrow button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ArrowButton.IsLeftMouseButtonDown">
            <summary>
            Whether the arrow button is pressed but not released.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ArrowButton.IsMouseOver">
            <summary>
            Whether the arrow button is hovered over.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ArrowButton.LeftGradientColor">
            <summary>
            Left color of the unhovered button gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ArrowButton.RightGradientColor">
            <summary>
            Right color of the unhovered button gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ArrowButton.LeftHoverColor">
            <summary>
            Left color of the hovered button gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ArrowButton.RightHoverColor">
            <summary>
            Right color of the hovered button gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ArrowButton.Rotation">
            <summary>
            The arrow button pointing direction.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ArrowButton.#ctor">
            <summary>
            Initializes an arrow button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ArrowButton.#ctor(System.String)">
            <summary>
            Initializes an arrow button using the specified text.
            </summary>
            <param name="text">The text of the label.</param>
        </member>
        <member name="M:System.Windows.Forms.ArrowButton.OnResize(System.EventArgs)">
            <summary>
            Resizes and repaints the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ArrowButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the arrow button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ArrowButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Called when the mouse enters the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ArrowButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Called when the mouse leaves the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ArrowButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is pressed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ArrowButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ArrowButton.Dispose(System.Boolean)">
            <summary>
            Called when the button is disposed.
            </summary>
            <param name="disposing">Whether Dispose() was called manually or automatically.</param>
        </member>
        <member name="T:System.Windows.Forms.ClipboardMonitor">
            <summary>
            Monitors the clipboard, and raises an event whenever its contents change.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ClipboardMonitor.ClipboardContentChanged">
            <summary>
            The event which is raised when the clipboard content has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ClipboardMonitor.Enabled">
            <summary>
            Gets or sets whether the clipboard is monitored.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DoubleBufferedSplitContainer">
            <summary>
            A double-buffered split control container.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DoubleBufferedSplitContainer.#ctor">
            <summary>
            Initializes a double-buffered split control container using default parameters.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DoubleBufferedSplitContainer.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a double-buffered split control container using the specfied parameters.
            </summary>
            <param name="panel1">Whether to use double-buffering in the first panel.</param>
            <param name="panel2">Whether to use double-buffering in the second panel.</param>
        </member>
        <member name="T:System.Windows.Forms.ErrorDialogButton">
            <summary>
            An enumeration of all the buttons that can be shown in the error dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorDialogButton.Ignore">
            <summary>
            Tries to ignore the error that happened.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorDialogButton.Throw">
            <summary>
            Throws the ecxeptions that happened.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorDialogButton.Exit">
            <summary>
            Tries to exits the application thread gracefully.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorDialogButton.Kill">
            <summary>
            Kills the current process immediately.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ErrorDialog">
            <summary>
            A verbose error message dialog, perfect for advanced flexible exception handling.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorDialog.ThrowInstead">
            <summary>
            Whether to throw error instead of showing dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorDialog.AllButtons">
            <summary>
            A default constant for showing all buttons.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorDialog.Show(System.Boolean,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="modal">True to use ShowDialog() to present the dialog modally, false to use Show().</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Windows.Forms.ErrorDialog.Show(System.Windows.Forms.ErrorDialogButton,System.Boolean,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="buttons">The buttons to show.</param>
            <param name="modal">True to use ShowDialog() to present the dialog modally, false to use Show().</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Windows.Forms.ErrorDialog.Show(System.String,System.Boolean,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="message">The error message to show on top.</param>
            <param name="modal">True to use ShowDialog() to present the dialog modally, false to use Show().</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Windows.Forms.ErrorDialog.Show(System.String,System.Windows.Forms.ErrorDialogButton,System.Boolean,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="message">The error message to show on top.</param>
            <param name="buttons">The buttons to show.</param>
            <param name="modal">True to use ShowDialog() to present the dialog modally, false to use Show().</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="T:System.Windows.Forms.GoToDialog">
            <summary>
            A simple go-to-line prompt dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.GoToDialog.Label">
            <summary>
            The label showing: "Line:".
            </summary>
        </member>
        <member name="F:System.Windows.Forms.GoToDialog.NumericUpDown">
            <summary>
            The line number.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.GoToDialog.Button">
            <summary>
            The OK button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GoToDialog.#ctor">
            <summary>
            Initializes the go to dialog.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GoToDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ImageMessageBox">
            <summary>
            Shows an image message box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageMessageBox.Show(System.Drawing.Image,System.String,System.String,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode,System.Boolean,System.Windows.Forms.IWin32Window)">
            <summary>
            Shows an image message box using the specified parameters.
            </summary>
            <param name="image">The image to show.</param>
            <param name="text">The text in the caption of the image.</param>
            <param name="title">The text in the title bar of the message box.</param>
            <param name="layout">The layout to use to represent the image.</param>
            <param name="interpolation">The interpolation method to use.</param>
            <param name="modal">True to use ShowDialog() to present the dialog modally, false to use Show().</param>
            <param name="owner">The target handle on which to initialize the dialog message pump.</param>
        </member>
        <member name="M:System.Windows.Forms.ImageMessageBox.Show(System.String,System.String,System.String,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode,System.Boolean,System.Windows.Forms.IWin32Window)">
            <summary>
            Shows an image message box using the specified parameters.
            </summary>
            <param name="imagePath">The path to the image to show.</param>
            <param name="text">The text in the caption of the image.</param>
            <param name="title">The text in the title bar of the message box.</param>
            <param name="layout">The layout to use to represent the image.</param>
            <param name="interpolation">The interpolation method to use.</param>
            <param name="modal">True to use ShowDialog() to present the dialog modally, false to use Show().</param>
            <param name="owner">The target handle on which to initialize the dialog message pump.</param>
        </member>
        <member name="M:System.Windows.Forms.ImageMessageBox.ImgMsgBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.KeyListener">
            <summary>
            A C# API Layer for a global key hook.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.KeyListener.KeyPress">
            <summary>
            Fired when a key is pressed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.KeyListener.KeyRelease">
            <summary>
            Fired when a key is released.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.KeyListener.KeyEventHandler">
            <summary>
            Delegates the method called on key event.
            </summary>
            <param name="value">The key involved represented as a string.</param>
            <param name="isChar">Whether the key involved is a character key.</param>
            <param name="key">The key involved.</param>
        </member>
        <member name="P:System.Windows.Forms.KeyListener.Enabled">
            <summary>
            Whether the key press hook is enabled.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeyListener.Append(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Appends StringBuilder content to a StringBuilder without reallocation (hence is faster).
            </summary>
            <param name="builder">The StringBuilder instance to append to.</param>
            <param name="toAppend">The StringBuilder whose content to append.</param>
            <returns>The first StringBuilder instance (the one that has been appended to).</returns>
        </member>
        <member name="M:System.Windows.Forms.KeyListener.IndexOf(System.Text.StringBuilder,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the index of the start of the contents in a StringBuilder.
            </summary>
            <param name="sb">The StringBuilder value to search.</param>
            <param name="value">The string to find.</param>
            <param name="startIndex">The starting index.</param>
            <param name="ignoreCase">Whether to ignore case.</param>
            <returns>The index of the specified value, and if not found returns -1.</returns>
        </member>
        <member name="T:System.Windows.Forms.LinkLabelCustomCursor">
            <summary>
            A link label that exposes the ability to override cursor when hovering over link.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.LinkLabelCustomCursor.LinkCursor">
            <summary>
            Gets or sets the cursor to use when hovering over a link.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabelCustomCursor.#ctor">
            <summary>
            Initializes the link label.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabelCustomCursor.#ctor(System.String)">
            <summary>
            Initializes the link label using the specified text.
            </summary>
            <param name="text">The text to initialize the label with.</param>
        </member>
        <member name="M:System.Windows.Forms.LinkLabelCustomCursor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the event when the mouse moves.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MouseListener">
            <summary>
            A C# API Layer for a global mouse hook.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MouseListener.Empty">
            <summary>
            An empty mouse event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MouseListener.MouseDown">
            <summary>
            Fired when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MouseListener.MouseMove">
            <summary>
            Fired when the mouse is moved.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MouseListener.MouseUp">
            <summary>
            Fired when a mouse button is released.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MouseListener.MouseWheel">
            <summary>
            Fired when a mouse wheel is scrolled.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MouseListener.MouseDoubleClick">
            <summary>
            Fired when a mouse button is double-clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MouseListener.Enabled">
            <summary>
            Whether the key press hook is enabled.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NewRichTextBox">
            <summary>
            A RichTextBox instance that uses newer API.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NewRichTextBox.CreateParams">
            <summary>
            Specified that the RichTextBox instance should use RichEdit50W API instead of the old RichEdit20W.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NewRichTextBox.#ctor">
            <summary>
            Initializes a RichTextBox instance that uses RichEdit50W API instead of the old RichEdit20W.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NewRichTextBox.#ctor(System.String)">
            <summary>
            Initializes a NewRichTextBox with the specified text.
            </summary>
            <param name="text">The text to initialize the RichTextBox with.</param>
        </member>
        <member name="T:System.Windows.Forms.TransparentControl">
            <summary>
            A transparent control for background overlay.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TransparentControl.ClickThrough">
            <summary>
            Gets or sets whether the control is clicx-through or not.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TransparentControl.#ctor">
            <summary>
            Initializes a new transparent control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TransparentControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides some Windows messages of the underlying control.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="T:System.Windows.Forms.StyledLabel">
            <summary>
            A label that supports background shadow. IMPORTANT: '\v' characters will be interpreted as line spacing insertion.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.Dpi">
            <summary>
            Gets or sets the Dpi to use for AutoSize calculation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.ShadowColor">
            <summary>
            Gets or sets the shadow color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.RenderShadow">
            <summary>
            Gets or sets whether to render a shadow.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.Opacity">
            <summary>
            Gets or sets the degree of opacity of the shadow (can be any value >=0).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.Blur">
            <summary>
            Gets or sets the blur of the shadow.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.ShadowScale">
            <summary>
            Gets or sets the scale the shadow.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.OffsetX">
            <summary>
            Gets or sets the X offset of the shadow.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.OffsetY">
            <summary>
            Gets or sets the Y offset of the shadow.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.BackgroundImage">
            <summary>
            Gets or sets the background image.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.Wrapping">
            <summary>
            Gets or sets whether the text is wrapped.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.Vertical">
            <summary>
            Gets or sets whether the text is vertical.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.LineSpacing">
            <summary>
            Gets or sets the line spacing in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledLabel.MaximumSize">
            <summary>
            Gets or sets the maximum size of the label.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.#ctor">
            <summary>
            Initializes a new shadowed label.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.#ctor(System.String)">
            <summary>
            Initializes a new shadowed label using the specified text.
            </summary>
            <param name="text">The text of the label.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when the label is redrawn.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.OnTextChanged(System.EventArgs)">
            <summary>
            Fired when the text of the label is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.OnFontChanged(System.EventArgs)">
            <summary>
            Fired when the font of the label is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.OnSizeChanged(System.EventArgs)">
            <summary>
            Fired when size is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.DrawOnCanvas(System.Drawing.Graphics)">
            <summary>
            Draws the label onto the specified graphics canvas.
            </summary>
            <param name="g">The canvas to draw the label on.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.ToBitmap">
            <summary>
            Renders the label to an image.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.ResizeFont(System.Drawing.Font,System.String,System.Drawing.SizeF)">
            <summary>
            Resizes the specified font enough so that the text fits the specified size better.
            </summary>
            <param name="font">The font to adjust.</param>
            <param name="text">The text to fit.</param>
            <param name="size">The size to fit the text to.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.GetCharSize(System.Drawing.Font,System.Char)">
            <summary>
            Gets the dimensions of the character for the specified font.
            For more accurate metrics use a large font size and divide the result accordingly to compensate rounding to nearest integer.
            </summary>
            <param name="font">The font to use font for evaluation.</param>
            <param name="character">The cahacter whose metrics to evaluate.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.OnParentChanged(System.EventArgs)">
            <summary>
            Fired whet the parent contral is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.OnAutoSizeChanged(System.EventArgs)">
            <summary>
            Fired when auto-size is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.GetAutoSize">
            <summary>
            Gets the resultant size of the label if it were to be auto-sized with both grow and shrink enabled.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.GetAutoSize(System.Drawing.Size)">
            <summary>
            Gets the resultant size of the label if it were to be auto-sized with both grow and shrink enabled.
            </summary>
            <param name="maxBounds">The maximum size possible.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides some Windows messages of the underlying control.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledLabel.Dispose(System.Boolean)">
            <summary>
            Disposes of the label and its resources.
            </summary>
            <param name="disposing">Whether Dispose() was called manually or automatically.</param>
        </member>
        <member name="T:System.Windows.Forms.Slider">
            <summary>
            A slider that supports custom coloring and is more precise and flexible than the stock ScrollBar in System.Windows.Forms.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Slider.Themes">
            <summary>
            An enumeration of all the preset themes.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Slider.Themes.BlueGreen">
            <summary>
            The Blue-green theme
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Slider.Themes.RedCoral">
            <summary>
            The Red-coral theme
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Slider.Themes.Gold">
            <summary>
            The Gold theme
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Slider.Themes.Royal">
            <summary>
            The Royal theme
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Slider.ValueChanged">
            <summary>
            Fired when the slider position has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.KnobBounds">
            <summary>
            Gets the boundary rectangle of the knob.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.KnobSize">
            <summary>
            Gets or sets the size of the knob.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.KnobShape">
            <summary>
            Gets or sets the knob's shape.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.KnobRoundRectSize">
            <summary>
            Gets or sets the size of the knob round rectangle edges.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.BorderRoundRectSize">
            <summary>
            Gets or sets the size of the border round rectangle edges.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.IsHorizontal">
            <summary>
            Gets or sets the orientation of the slider.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.Value">
            <summary>
            Gets or sets the value of the slider.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.SmallChange">
            <summary>
            Gets or sets change when directional keys are pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.LargeChange">
            <summary>
            Gets or sets change when Page Up/Down keys are pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.DrawFocusRectangle">
            <summary>
            Gets or sets a value indicating whether to draw focus rectangle.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.DrawSemitransparentKnob">
            <summary>
            Gets or sets a value indicating whether to draw semitransparent knob.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.MouseEffects">
            <summary>
            Gets or sets whether mouse hover has an impact on how the control looks.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.MouseWheelBarPartitions">
            <summary>
            Gets or sets the number of mouse wheel bar partitions.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.KnobOuterColor">
            <summary>
            Gets or sets the knob outer color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.KnobInnerColor">
            <summary>
            Gets or sets the inner color of the knob.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.KnobOutlineColor">
            <summary>
            Gets or sets the color of the knob outline.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.BarOuterColor">
            <summary>
            Gets or sets the outer color of the bar.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.BarInnerColor">
            <summary>
            Gets or sets the inner color of the bar.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.BarOutlineColor">
            <summary>
            Gets or sets the color of the bar outline.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.ElapsedOuterColor">
            <summary>
            Gets or sets the outer color of the elapsed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.ElapsedInnerColor">
            <summary>
            Gets or sets the inner color of the elapsed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Slider.Preset">
            <summary>
            Gets or sets the color preset (has no effect if slider colors are changed manually). 
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Slider.#ctor">
            <summary>
            Initializes a new instance of a Slider control with default values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Slider.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of a Slider control.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="value">The current value.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when the control is to be redrawn.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Slider.DesaturateColors(System.Drawing.Color[])">
            <summary>
            Desaturates colors from given array.
            </summary>
            <param name="colorsToDesaturate">The colors to be desaturated.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Slider.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Processes a dialog key.
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key to process.</param>
            <returns>
            true if the key was processed by the control; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.Slider.CreateRoundRectPath(System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Creates the round rect path.
            </summary>
            <param name="rect">The rectangle on which graphics path will be spanned.</param>
            <param name="size">The size of rounded rectangle edges.</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.Slider.LightenColors(System.Drawing.Color[])">
            <summary>
            Lightens colors from given array.
            </summary>
            <param name="colorsToLighten">The colors to lighten.</param>
        </member>
        <member name="T:System.Windows.Forms.SplashScreen">
            <summary>
            Initializes a simple fast splash screen.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplashScreen.CreateParams">
            <summary>
            Adds a drop-shadow effect.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplashScreen.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a splash screen showing the specified image.
            </summary>
            <param name="background">The image to show.</param>
        </member>
        <member name="M:System.Windows.Forms.SplashScreen.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when the control is painted.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StyledItem">
            <summary>
            A customizable styled item.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyledItem.ContextMenu">
            <summary>
            The associated context menu to open on click (can be null).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyledItem.Renderer">
            <summary>
            The renderer to use.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledItem.ItemRenderer">
            <summary>
            Gets or sets the renderer used for styling items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledItem.CheckBoxEnabled">
            <summary>
            Gets whether checkboxes are enabled on this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledItem.ItemControl">
            <summary>
            The label used to render the specified text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledItem.Text">
            <summary>
            Gets or sets the text of the label shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledItem.#ctor">
            <summary>
            Initializes the styled item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledItem.#ctor(System.Windows.Forms.StyleRenderer)">
            <summary>
            Initializes the styled tool strip using the specified renderer options.
            </summary>
            <param name="renderer">The renderer parameters to copy.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledItem.#ctor(System.Windows.Forms.ToolStripItem,System.Windows.Forms.StyleRenderer)">
            <summary>
             Initializes the styled item using the specified renderer options based on the specified ToolStripMenuItem.
            </summary>
            <param name="item">The item whose parameters to assimilate.</param>
            <param name="renderer">The renderer to use.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledItem.UpdateItemRenderer">
            <summary>
            Updates the item renderer on each item to the value of ItemRenderer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledItem.OnDropDownShow(System.EventArgs)">
            <summary>
            Fired when the drop down menu is shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledItem.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Fired when the check state is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledItem.OnFontChanged(System.EventArgs)">
            <summary>
            Fired when the font is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledItem.OnForeColorChanged(System.EventArgs)">
            <summary>
            Fired when the forecolor is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledItem.DrawOnCanvas(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            Draws the item on the specified canvas.
            </summary>
            <param name="g">The canvas to use.</param>
            <param name="size">The size to draw the item at.</param>
        </member>
        <member name="T:System.Windows.Forms.StyledButton">
            <summary>
            A customizable styled button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledButton.Label">
            <summary>
            Gets the button label.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledButton.Renderer">
            <summary>
            Gets the renderer used for styling.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledButton.NormalTextColor">
            <summary>
            Gets or sets the text color to use when the button is in normal state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledButton.HoverTextColor">
            <summary>
            Gets or sets the text color to use when the button is in hovered state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledButton.PressedTextColor">
            <summary>
            Gets or sets the text color to use when the button is in pressed state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledButton.NormalInnerBorderWidth">
            <summary>
            Gets or sets the normal inner border width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledButton.FocusInnerBorderWidth">
            <summary>
            Gets or sets the focused inner border width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledButton.HasFocus">
            <summary>
            Gets whether the button has input focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledButton.Text">
            <summary>
            Gets or sets the text to show in the button label.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.#ctor">
            <summary>
            Initializes the styled button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.#ctor(System.String)">
            <summary>
            Initializes the styled button with the specified text.
            </summary>
            <param name="text">The text to initialize the button width.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the button background (unimplemented).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Fired when the mouse enters the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Fired when the mouse leaves the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when the mouse is pressed on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires when the mouse is released on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.OnGotFocus(System.EventArgs)">
            <summary>
            Fires when the button got input focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.OnLostFocus(System.EventArgs)">
            <summary>
            Fires when the button lost input focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.DrawOnCanvas(System.Drawing.Graphics)">
            <summary>
            Draws the button on the specified Graphics object.
            </summary>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the button.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StyledCheckBox">
            <summary>
            A customizable styled check box.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.StyledCheckBox.CheckStateChanged">
            <summary>
            Fired when the check state is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledCheckBox.Label">
            <summary>
            Gets the check box label text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledCheckBox.Renderer">
            <summary>
            Gets the renderer used for styling.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledCheckBox.NormalInnerBorderWidth">
            <summary>
            Gets or sets the normal inner border width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledCheckBox.FocusInnerBorderWidth">
            <summary>
            Gets or sets the focused inner border width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledCheckBox.HasFocus">
            <summary>
            Gets whether the check box has input focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledCheckBox.Text">
            <summary>
            Gets or sets the text to show in the check box label.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledCheckBox.State">
            <summary>
            Gets or sets the check-state of the check box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledCheckBox.Checked">
            <summary>
            Gets or sets whether the check box is checked or not.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.#ctor">
            <summary>
            Initializes the styled check box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.#ctor(System.String)">
            <summary>
            Initializes the styled check box using the specified text.
            </summary>
            <param name="text">The initial check box text.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnResize(System.EventArgs)">
            <summary>
            Fired when the control is resized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnFontChanged(System.EventArgs)">
            <summary>
            Called when the font is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnForeColorChanged(System.EventArgs)">
            <summary>
            Called when the forecolor is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnCheckStateChanged(System.Windows.Forms.CheckState)">
            <summary>
            Fired when the check state is changed.
            </summary>
            <param name="state">The new check-state.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnMouseEnter(System.EventArgs)">
            <summary>
            Fired when the mouse enters the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnMouseLeave(System.EventArgs)">
            <summary>
            Fired when the mouse leaves the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when the mouse is pressed on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when the mouse is released on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Fired when a key is released on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnGotFocus(System.EventArgs)">
            <summary>
            Fired when the check box gets input focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnLostFocus(System.EventArgs)">
            <summary>
            Fires when the check box loses input focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.DrawOnCanvas(System.Drawing.Graphics)">
            <summary>
            Draws the check box on the specified Graphics object.
            </summary>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledCheckBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the check box.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StyledContextMenu">
            <summary>
            A customizable styled context menu.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledContextMenu.Alignment">
            <summary>
            Gets or sets the alignment of each item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.#ctor">
            <summary>
            Initializes the styled context menu.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes the styled context menu.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnItemAdded(System.Windows.Forms.ToolStripItemEventArgs)">
            <summary>
            Fired when an item is added to the context menu.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnForeColorChanged(System.EventArgs)">
            <summary>
            Fired when the forecolor is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnFontChanged(System.EventArgs)">
            <summary>
            Fired when the font is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnMouseEnter(System.EventArgs)">
            <summary>
            Fired when the mouse enters the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnMouseLeave(System.EventArgs)">
            <summary>
            Fired when the mouse leaves the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnClick(System.EventArgs)">
            <summary>
            Fired when an item is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when the mouse is moved over the context menu.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when the mouse is pressed on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires when the mouse is released on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnVisibleChanged(System.EventArgs)">
            <summary>
            Fires when the context menu is shown or hidden.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.GetItemAt(System.Int32)">
            <summary>
            Gets the item at the specified y coordinate in the context menu.
            </summary>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledContextMenu.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the context menu and its items.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StyledMenuStrip">
            <summary>
            A customizable styled menu strip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyledMenuStrip.ItemRenderer">
            <summary>
            Gets or sets the renderer used for styling items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.#ctor">
            <summary>
            Initializes the styled menu strip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.UpdateItemRenderer">
            <summary>
            Updates the item renderer on each item to the value of ItemRenderer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.OnItemAdded(System.Windows.Forms.ToolStripItemEventArgs)">
            <summary>
            Fired when an item is added to the menu strip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the button background (unimplemented).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.OnMouseEnter(System.EventArgs)">
            <summary>
            Fired when the mouse enters the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.OnMouseLeave(System.EventArgs)">
            <summary>
            Fired when the mouse leaves the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.OnClick(System.EventArgs)">
            <summary>
            Fired when an item is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when the mouse is pressed on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when the mouse is moved over the context menu.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires when the mouse is released on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.GetItemAt(System.Int32)">
            <summary>
            Gets the item index located at the specified X-coordinate. Returns -1 if there are no items at X.
            </summary>
            <param name="x">The X-coordinate to get the item at.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.GetLocationOf(System.Int32)">
            <summary>
            Gets the X-coordinate of the item at the specified index. Returns -1 if the index is invalid.
            </summary>
            <param name="index">The index of the item to get the X-coordinate of.</param>
        </member>
        <member name="M:System.Windows.Forms.StyledMenuStrip.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the menu strip and its items.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StyledMessageBox">
            <summary>
            A robust customizable message box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyledMessageBox.Show(System.Object,System.String,System.Boolean,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Drawing.Font,System.Double,System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the specified message box.
            </summary>
            <param name="text">The text.</param>
            <param name="caption">The caption.</param>
            <param name="modal">True to use ShowDialog() to present the dialog modally, false to use Show().</param>
            <param name="buttons">The buttons.</param>
            <param name="icon">The icon.</param>
            <param name="defaultButton">The default button.</param>
            <param name="font">The font of the text.</param>
            <param name="timeout">The window timeout in milliseconds. 0 means no timeout.</param>
            <param name="owner">The owner (can be null).</param>
        </member>
        <member name="T:System.Windows.Forms.StyleRenderer">
            <summary>
            Renders buttons and menu strips using a professional customizable style.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StyleRenderer.ResultantState">
            <summary>
            The resultant state of an animation.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.ResultantState.ValueWasModifiedFromOutside">
            <summary>
            The value was modified from outside the animation.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.ResultantState.FieldOrPropertyGetOrSetError">
            <summary>
            An error happened when trying to read or mrite from field or property.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.ResultantState.ValueDidntChangeAfterUpdate">
            <summary>
            The value stayed the same after trying to modify.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.ResultantState.IncompatibleType">
            <summary>
            The value type is not supported by the animator.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.ResultantState.UpdateSuccess">
            <summary>
            The field was updated successfully to the next value (not used by the AnimationFinished event).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.ResultantState.Completed">
            <summary>
            The animation is completed successfully.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StyleRenderer.AnimationUpdatedHandler">
            <summary>
            Handles the AnimationUpdated event.
            </summary>
            <param name="state">The current state of the animation.</param>
            <param name="instance">The instance whose values to modify (type of class if static).</param>
            <param name="name">The name of the field or property to animate.</param>
            <param name="currentValue">The current value of the property. If the animation has completed successfully, the current value will be equal to the target value. If an error has happened, it may be null.</param>
            <param name="targetValue">The target resultant value of the field (must be of a supported type).
            Supported types: int, float, Color, Point, PointF, Size, SizeF, Rectangle, RectangleF.</param>
            <param name="gradient">The animation speed multiplier [0, 1] usually 0.4 (ie. the distance between the current value and the target value is multiplied by this value).</param>
            <param name="linearSpeed">The linear speed that is there to counteract the exponential infinity that one gets when dividing the distance between the current value and the target value with the animation speed.</param>
        </member>
        <member name="T:System.Windows.Forms.StyleRenderer.AnimationFinishedHandler">
            <summary>
            Handles the AnimationFinished event.
            </summary>
            <param name="completionReason">The completion reason of the animation.</param>
            <param name="instance">The instance whose values to modify (type of class if static).</param>
            <param name="name">The name of the field or property to animate.</param>
            <param name="currentValue">The current value of the property. If completed successfully, the current value will be equal to the target value. If an error has happened, it may be null.</param>
            <param name="targetValue">The target resultant value of the field (must be of a supported type).
            Supported types: Numeric values, Color, Point, PointF, Size, SizeF, Rectangle, RectangleF.</param>
            <param name="gradient">The animation speed multiplier [0, 1] usually 0.4 (ie. the distance between the current value and the target value is multiplied by this value).</param>
            <param name="linearSpeed">The linear speed that is there to counteract the exponential infinity that one gets when dividing the distance between the current value and the target value with the animation speed.</param>
        </member>
        <member name="E:System.Windows.Forms.StyleRenderer.AnimationUpdated">
            <summary>
            Fired when an animation is updated.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.StyleRenderer.AnimationFinished">
            <summary>
            Fired when an animation is finished.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.StyleRenderer.CheckColors">
            <summary>
            Fired when the colors are refreshed and animations are started if any relevant colors have changed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.DefaultFunctionToInvalidateControlOnRefresh">
            <summary>
            Longest field name I have ever wrote.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.Lookup">
            <summary>
            object instance, ((object info, AnimationParams animation), Func&lt;bool&gt; onUpdate, object info)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.AnimationRunning">
            <summary>
            Gets whether the animation timer is running.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.Invert">
            <summary>
            Gets or sets whether to invert the top and bottom colors.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.CheckmarkX">
            <summary>
            Gets or sets the checkmark X coordinate.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.CheckmarkY">
            <summary>
            Gets or sets the checkmark Y coordinate.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.CheckmarkWidth">
            <summary>
            Gets or sets the checkmark width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.CheckmarkHeight">
            <summary>
            Gets or sets the checkmark height.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.CheckmarkLocation">
            <summary>
            Gets or sets the checkmark location.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.CheckmarkSize">
            <summary>
            Gets or sets the checkmark size.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.CheckmarkRectangle">
            <summary>
            Gets or sets the checkmark rectangle bounds.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.AnimationSpeed">
            <summary>
            Gets or sets the animation speed multiplier [0, 1] (ie. the distance between the current value and the target value is multiplied by this value).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.LinearSpeed">
            <summary>
            Gets or sets the linear speed that is there to counteract the exponential infinity that one gets when dividing the distance between the current value and the target value with the animation speed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.BackgroundBlend">
            <summary>
            Gets or sets the blending style used to draw the background.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.CheckState">
            <summary>
            Gets or sets the checkmark state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.CheckmarkColor">
            <summary>
            Gets or sets the checkmark color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.NormalBackgroundTop">
            <summary>
            Gets or sets the normal background top gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.NormalBackgroundBottom">
            <summary>
            Gets or sets the normal background bottom gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.HoverBackgroundTop">
            <summary>
            Gets or sets the hover background top gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.HoverBackgroundBottom">
            <summary>
            Gets or sets the hover background bottom gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.PressedBackgroundTop">
            <summary>
            Gets or sets the pressed background top gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.PressedBackgroundBottom">
            <summary>
            Gets or sets the pressed background bottom gradient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.NormalInnerBorderColor">
            <summary>
            Gets or sets the normal inner border color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.HoverInnerBorderColor">
            <summary>
            Gets or sets the hover inner border color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.NormalInnerBorderWidth">
            <summary>
            Gets or sets the normal inner border width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.HoverInnerBorderWidth">
            <summary>
            Gets or sets the hover inner border width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.RoundCornerRadius">
            <summary>
            Gets or sets the radius of the rounded corners.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.Border">
            <summary>
            Gets or sets the border color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.MouseHovering">
            <summary>
            Gets or sets whether the mouse is hovering over the button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StyleRenderer.Pressed">
            <summary>
            Gets or sets whether the left mouse button is currently pressed over the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.#ctor">
            <summary>
            Initializes a new StyleRenderer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.#ctor(System.Func{System.Boolean})">
            <summary>
            Initializes a new StyleRenderer using the specified function as default to handle control invalidation.
            </summary>
            <param name="defaultFunctionToInvalidateControlOnRefresh">Longest parameter name I have ever written.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.#ctor(System.Windows.Forms.ProfessionalColorTable,System.Func{System.Boolean})">
            <summary>
            Initializes a new StyleRenderer with the specified color table.
            </summary>
            <param name="colorTable">The color table to use.</param>
            <param name="defaultFunctionToInvalidateControlOnRefresh">Longest parameter name I have ever written.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.#ctor(System.Windows.Forms.StyleRenderer)">
            <summary>
            Initializes a new StyleRenderer.
            </summary>
            <param name="renderer">The renderer to obtain the settings from (can be null).</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.CopyConfigFrom(System.Windows.Forms.StyleRenderer)">
            <summary>
            Copies the settings from the specified instance into this instance (if null then default settings are restored).
            </summary>
            <param name="renderer">The renderer to copy configuration from (if null default config is restored).</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.OnCheckColors">
            <summary>
            Checks whether the colors are at their proprietary target value, and if not starts an animation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.GetTargets(System.Collections.Generic.KeyValuePair{System.Object,System.String}[])">
            <summary>
            Gets the current target values for each of the specified properties on the specified instances that are or are not being animated (null if not being animated).
            </summary>
            <param name="pairs">A set of pairs where the keys are the instances whose values are being animated (type of class if static),
            and the corresponding values are the name of the fields or properties that are or are not being animated.</param>
            <returns>An array containing each of the corresponding values in order from the parameters specified in the pairs.</returns>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.GetFunctionToInvalidateControlOnRefresh(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Longest professional method name I have ever made.
            </summary>
            <param name="control">The control to invalidate on refresh.</param>
            <param name="redrawChildren">Whether to redraw the child controls on redraw.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.Animate(System.String,System.Object,System.Double,System.Double)">
            <summary>
            Starts the animation using the specified parameters on this instance (can modify only fields or properties of this class) using the default update handler.
            </summary>
            <param name="name">The name of the field or property to animate.</param>
            <param name="targetValue">The target resultant value of the field (must be of a supported type).
            Supported types: Numeric values, Color, Point, PointF, Size, SizeF, Rectangle, RectangleF.</param>
            <param name="gradient">The animation speed multiplier [0, 1] (ie. the distance between the current value and the target value is multiplied by this value).</param>
            <param name="linearSpeed">The linear speed that is there to counteract the exponential infinity that one gets when dividing the distance between the current value and the target value with the animation speed.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.Animate(System.Object,System.Windows.Forms.Control,System.String,System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Starts the animation using the specified parameters on the specified instance optionally refreshing the specified control using the default update handler.
            </summary>
            <param name="instance">The instance whose values to modify (type of class if static).</param>
            <param name="control">The control to refresh upon updating (can be null).</param>
            <param name="name">The name of the field or property to animate.</param>
            <param name="targetValue">The target resultant value of the field (must be of a supported type).
            Supported types: Numeric values, Color, Point, PointF, Size, SizeF, Rectangle, RectangleF.</param>
            <param name="gradient">The animation speed multiplier [0, 1] (ie. the distance between the current value and the target value is multiplied by this value).</param>
            <param name="linearSpeed">The linear speed that is there to counteract the exponential infinity that one gets when dividing the distance between the current value and the target value with the animation speed.</param>
            <param name="redrawChildren">Whether to invalidate children after refresh.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.Animate(System.Object,System.String,System.Object,System.Double,System.Double,System.Func{System.Boolean})">
            <summary>
            Starts the animation using the specified parameters on the specified instance optionally refreshing the specified control using the specified update handler.
            </summary>
            <param name="instance">The instance whose values to modify (type of class if static).</param>
            <param name="name">The name of the field or property to animate.</param>
            <param name="targetValue">The target resultant value of the field (must be of a supported type).
            Supported types: Nmeric values, Color, Point, PointF, Size, SizeF, Rectangle, RectangleF.</param>
            <param name="gradient">The animation speed multiplier [0, 1] usually 0.4 (ie. the distance between the current value and the target value is multiplied by this value).</param>
            <param name="linearSpeed">The linear speed that is there to counteract the exponential infinity that one gets when dividing the distance between the current value and the target value with the animation speed.</param>
            <param name="onUpdate">The method to call when the property/field is updated (can be null). If the function returns false, the animation will halt.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.Halt(System.Object,System.String)">
            <summary>
            Halts the animation on the specified field/property if it is running.
            </summary>
            <param name="instance">The instance on which the field/property is found.</param>
            <param name="name">The name of the field or property whose animation to halt.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.SetNextValue(System.Object,System.String,System.Object,System.Double,System.Double)">
            <summary>
            Sets the specified field/property on the specified instance to the next step approaching the target value using the given animation parameters. Returns false when either the setting failed or it when the target value has been reached, else true.
            </summary>
            <param name="instance">The instance whose values to modify (type of class if static).</param>
            <param name="name">The name of the field or property to animate.</param>
            <param name="targetValue">The target resultant value of the field (must be of a supported type).
            Supported types: Numeric values, Color, Point, PointF, Size, SizeF, Rectangle, RectangleF.</param>
            <param name="gradient">The animation speed multiplier [0, 1] usually 0.4 (ie. the distance between the current value and the target value is multiplied by this value).</param>
            <param name="linearSpeed">The linear speed that is there to counteract the exponential infinity that one gets when dividing the distance between the current value and the target value with the animation speed.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.OnRenderItemCheck(System.Windows.Forms.ToolStripItemImageRenderEventArgs)">
            <summary>
            Renders the checkbox and checkmark.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.OnRenderDropDownButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
            Renders the items of a drop-down list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.OnRenderMenuItemBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
            Renders the items of a menu strip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.OnRenderButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
            Renders the background of a button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.MarkMouseHasLeft">
            <summary>
            Marks that the mouse has left the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the styled control.
            </summary>
            <param name="g">The graphics canvas to render on.</param>
            <param name="bounds">The bounds of the control.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.RenderCheckBox(System.Drawing.Graphics)">
            <summary>
            Renders the styled checkbox.
            </summary>
            <param name="g">The graphics canvas to draw on.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.Clone">
            <summary>
            Returns a clone of the style renderer with copied parameters (except for the parent property).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.GetRoundedRectPath(System.Drawing.RectangleF,System.Single,System.Boolean)">
            <summary>
            Gets the path of a rounded with the specified parameters.
            </summary>
            <param name="rect">The boundaries of the rectangle.</param>
            <param name="radius">The radius of the rounded corners.</param>
            <param name="fill">Whether the rounded rectangle will be filled or not.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.GetFormat(System.Drawing.ContentAlignment,System.Windows.Forms.RightToLeft,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the most appropriate StringFormat using the specified parameters.
            </summary>
            <param name="alignment">The alignment style to use.</param>
            <param name="rightToLeft">Whether to align left or right.</param>
            <param name="vertical">Whether the text is vertical or horizontal.</param>
            <param name="ellipsis">Whether to use ellipsis (...) when the text does not properly fit in the bounds.</param>
            <param name="wrapping">Whether to wrap text the text in the bounds.</param>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.GetFormat(System.Drawing.ContentAlignment,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the most appropriate StringFormat using the specified parameters.
            </summary>
            <param name="alignment">The alignment style to use.</param>
            <param name="rightToLeft">Whether to align left or right.</param>
            <param name="vertical">Whether the text is vertical or horizontal.</param>
            <param name="ellipsis">Whether to use ellipsis (...) when the text does not properly fit in the bounds.</param>
            <param name="wrapping">Whether to wrap text the text in the bounds.</param>
        </member>
        <member name="T:System.Windows.Forms.StyleRenderer.AnimationParams">
            <summary>
            Holds the renderer animation parameters.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.AnimationParams.CachedValue">
            <summary>
            The cached value of the property.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.AnimationParams.TargetValue">
            <summary>
            The target value to approach with the animation.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.AnimationParams.Gradient">
            <summary>
            The animation speed multiplier [0, 1] (ie. the distance between the current value and the target value is multiplied by this value).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StyleRenderer.AnimationParams.LinearSpeed">
            <summary>
            The linear speed that is there to counteract the exponential infinity that one gets when dividing the distance between the current value and the target value with the animation speed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StyleRenderer.AnimationParams.#ctor(System.Object,System.Object,System.Double,System.Double)">
            <summary>
            Specifies the animation parameters.
            </summary>
            <param name="targetValue">The target value to approach with the animation.</param>
            <param name="cachedValue">The cached value of the property.</param>
            <param name="gradient">The animation speed multiplier [0, 1] (ie. the distance between the current value and the target value is multiplied by this value).</param>
            <param name="linearSpeed">The linear speed that is there to counteract the exponential infinity that one gets when dividing the distance between the current value and the target value with the animation speed.</param>
        </member>
        <member name="T:System.Windows.Forms.TextDialog">
            <summary>
            A simple prompt dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextDialog.Label">
            <summary>
            The prompt label.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextDialog.TextBox">
            <summary>
            The text box that contains the user input.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextDialog.Button">
            <summary>
            The OK button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextDialog.Input">
            <summary>
            The resultant user input.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextDialog.#ctor">
            <summary>
            Initializes a new prompt dialog with the default parameters.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextDialog.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new prompt dialog.
            </summary>
            <param name="text">The prompt text.</param>
            <param name="title">The title caption of the dialog.</param>
            <param name="button">The button text.</param>
        </member>
        <member name="M:System.Windows.Forms.TextDialog.OnResize(System.EventArgs)">
            <summary>
            Called when the dialog is resized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UserListBox">
            <summary>
            An interactive list box supporting "Add New...", and move up and move down arrow buttons.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UserListBox.ItemsChangedEventArgs">
            <summary>
            A delegate representing a method called when an item was added or removed.
            </summary>
            <param name="items">A new list of all iems in the list box.</param>
        </member>
        <member name="T:System.Windows.Forms.UserListBox.ItemOrderChangedEventArgs">
            <summary>
            A delegate representing a method called when an item has beem moved up or moved down.
            </summary>
            <param name="upperItem">The first (starting from top) item whose order was changed.</param>
            <param name="lowerItem">The botton (starting from top) item whose order was changed.</param>
            <param name="upperItemIndex">The index of upperItem (the index of lowerItem is upperItem + 1).</param>
        </member>
        <member name="E:System.Windows.Forms.UserListBox.ItemsChanged">
            <summary>
            Fired when an item was added or removed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.UserListBox.ItemAdded">
            <summary>
            Fired when an item was added.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.UserListBox.ItemRemoved">
            <summary>
            Fired when an item was removed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.UserListBox.ItemOrderChanged">
            <summary>
            Fired when an item has beem moved up or moved down.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.UserListBox.PromptText">
            <summary>
            The add item prompt text.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.UserListBox.PromptTitle">
            <summary>
            The add item prompt caption.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.UserListBox.PromptButton">
            <summary>
            The add item prompt button text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserListBox.Items">
            <summary>
            Gets a list of all items in the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserListBox.RemoveDuplicates">
            <summary>
            Whether to remove or keep duplicates in the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserListBox.MinButtonWidth">
            <summary>
            The minimum arrow button widths.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserListBox.ShowDirectionButtons">
            <summary>
            Whether to show the move up and down arrow buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserListBox.ListBox">
            <summary>
            The ListBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserListBox.UpButton">
            <summary>
            The up arrow button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserListBox.DownButton">
            <summary>
            The down arrow button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserListBox.TrimSpaces">
            <summary>
            Gets or sets whether to trim trailing spaces to user input.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserListBox.DefaultButtonWidth">
            <summary>
            Gets or sets the default button width, which is overriden when the splitter is resized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UserListBox.#ctor">
            <summary>
            Initializes an empty list box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UserListBox.#ctor(System.Boolean)">
            <summary>
            Initializes a list box, spcifying whether to show the move up and down arrow buttons.
            </summary>
            <param name="showButtons">Whether to show the move up and down arrow buttons.</param>
        </member>
        <member name="M:System.Windows.Forms.UserListBox.#ctor(System.String[])">
            <summary>
            Initializes a list box with the specified initial items.
            </summary>
            <param name="items">The items to add to the list box.</param>
        </member>
        <member name="M:System.Windows.Forms.UserListBox.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a list box with the specified initial items.
            </summary>
            <param name="showButtons">Whether to show the move up and down arrow buttons.</param>
            <param name="items">The items to add to the list box (can be null).</param>
        </member>
        <member name="M:System.Windows.Forms.UserListBox.OnResize(System.EventArgs)">
            <summary>
            Called when the list box is resized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UserListBox.AddItem(System.String)">
            <summary>
            Adds the specified item to list box.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:System.Windows.Forms.UserListBox.Contains``1(``0[],``0)">
            <summary>
            Gets whether the specified array contains the specified element.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The array to search for the item into.</param>
            <param name="element">The item to search for in the array.</param>
        </member>
    </members>
</doc>
