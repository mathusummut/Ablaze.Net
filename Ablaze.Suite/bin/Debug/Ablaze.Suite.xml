<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ablaze.Suite</name>
    </assembly>
    <members>
        <member name="T:System.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.Ablaze">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:System.Properties.Resources.ActiveBorder">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.InactiveBorder">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ComparisonComparer`1">
            <summary>
            Wraps a comparer, generally used for sorting.
            </summary>
            <typeparam name="T">The type of element this instance compares.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new comparison comparer wrapper.
            </summary>
            <param name="comparison">The delegate that performs the actual comparison.</param>
        </member>
        <member name="M:System.Collections.Generic.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Returns -1 if x is smaller than y, 0 if x equals y, or 1 if x is larger than y.
            </summary>
            <param name="x">The reference value.</param>
            <param name="y">The value to compare with the reference value.</param>
        </member>
        <member name="T:System.Collections.Generic.EqualityComparison`1">
            <summary>
            Returns whether the specified items are considered equal.
            </summary>
            <typeparam name="T">The type of element to compare.</typeparam>
            <param name="item1">The item to compare.</param>
            <param name="item2">The item to compare with.</param>
        </member>
        <member name="T:System.Collections.Generic.EqualityComparisonComparer`1">
            <summary>
            Wraps a comparer for equality testing.
            </summary>
            <typeparam name="T">The type of element this instance compares.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.EqualityComparisonComparer`1.#ctor(System.Collections.Generic.EqualityComparison{`0},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new EqualityComparisonComparer wrapper.
            </summary>
            <param name="comparison">The delegate that performs the actual equality comparison.</param>
            <param name="hashCode">The hash code generator to use. The rule is: equal items MUST have the save hash-code,
            and for the same item, the gerenated hash-code must always be the same.</param>
        </member>
        <member name="M:System.Collections.Generic.EqualityComparisonComparer`1.Equals(`0,`0)">
            <summary>
            Returns whether the specified items are considered equal.
            </summary>
            <param name="item1">The item to compare.</param>
            <param name="item2">The item to compare with.</param>
        </member>
        <member name="M:System.Collections.Generic.EqualityComparisonComparer`1.GetHashCode(`0)">
            <summary>
            Generates a hash-code for the specified item.
            </summary>
            <param name="item">The item whose hash-code to generate.</param>
        </member>
        <member name="T:System.Collections.Generic.FastEnumerator`1">
            <summary>
            Enumerates through all elements of a List.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.FastEnumerator`1.Index">
            <summary>
            The current position of the enumerator (can be -1 if uninitialized).
            </summary>
        </member>
        <member name="P:System.Collections.Generic.FastEnumerator`1.Current">
            <summary>
            Gets current element cached by the enumerator.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.FastEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.FastEnumerator`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a FastEnumarator to enumerate a List.
            </summary>
            <param name="list">The list to enumerate.</param>
        </member>
        <member name="M:System.Collections.Generic.FastEnumerator`1.RefreshCurrent">
            <summary>
            At the current index, updates Current accordingly.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.FastEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the list, and returns false if the entire list has been traversed, else false.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.FastEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.FastEnumerator`1.Dispose">
            <summary>
            Empty lol
            </summary>
        </member>
        <member name="T:System.Collections.Generic.LazyList`1">
            <summary>
            Allows manipulation of the underlying array, and if when accessing an index that is out of range, the list will be resized accordingly.
            If a LazyList instance is type casted to a List, it now behaves exactly as a regular List instance.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.LazyList`1.BaseType">
            <summary>
            Gets the type of List<typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.LazyList`1.UnderlyingArray">
            <summary>
            Gets or sets the underlying array directly without resizing.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.LazyList`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index. If the index is out of range, the list will be resized accordingly.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:System.Collections.Generic.LazyList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LazyList`1" /> class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LazyList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LazyList`1" /> class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity" /> is less than 0. </exception>
        </member>
        <member name="M:System.Collections.Generic.LazyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LazyList`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection" /> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.LazyList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a LazyList from the specified list. IMPORTANT: No copying will be made, the initialization is done by directly referencing the underlying array of the specified list.
            </summary>
            <param name="list">The list whose array to use.</param>
        </member>
        <member name="M:System.Collections.Generic.LazyList`1.#ctor(`0[])">
            <summary>
            Initializes a LazyList from the specified array. IMPORTANT: No copying will be made, the initialization is done by directly referencing the specified array.
            </summary>
            <param name="array">The array to intialize a LazyList from.</param>
            <remarks>This can be used to quickly create a List wrapper for an array.</remarks>
        </member>
        <member name="M:System.Collections.Generic.LazyList`1.GetUnderlyingArray(System.Collections.Generic.List{`0})">
            <summary>
            Gets the underlying array of the specified list.
            </summary>
            <param name="list">The list whose array to return.</param>
        </member>
        <member name="M:System.Collections.Generic.LazyList`1.SetUnderlyingArray(System.Collections.Generic.List{`0},`0[])">
            <summary>
            Sets the underlying array of the specified list.
            </summary>
            <param name="list">The list whose array to set the value of directly.</param>
            <param name="array">The array to wrap by the specified list.</param>
        </member>
        <member name="T:System.Collections.Generic.LinkedComparer`1">
            <summary>
            Comparer to daisy-chain two existing comparers and apply in sequence (i.e. sort by x then y)
            </summary>
            <typeparam name="T">The type of items to compare.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.LinkedComparer`1.Primary">
            <summary>
            Gets or sets the first comparer to apply (null is replaced by Comparer.Default).
            </summary>
        </member>
        <member name="P:System.Collections.Generic.LinkedComparer`1.Secondary">
            <summary>
            Gets or sets the secondary comparer to apply (null is replaced by Comparer.Default).
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedComparer`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a new LinkedComparer
            </summary>
            <param name="primary">The first comparison to use</param>
            <param name="secondary">The next level of comparison if the primary returns 0 (equivalent)</param>
        </member>
        <member name="M:System.Collections.Generic.LinkedComparer`1.Compare(`0,`0)">
            <summary>
            Compares the specified items using the specified chained comparers.
            </summary>
            <param name="x">The item to compare.</param>
            <param name="y">The item to compare with.</param>
        </member>
        <member name="T:System.Collections.Generic.ReverseComparer`1">
            <summary>
            Implementation of IComparer{T} based on another one;
            this simply reverses the original comparison.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:System.Collections.Generic.ReverseComparer`1.OriginalComparer">
            <summary>
            Gets the original comparer.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new reversing comparer.
            </summary>
            <param name="original">The original comparer to use for comparisons.</param>
        </member>
        <member name="M:System.Collections.Generic.ReverseComparer`1.Compare(`0,`0)">
            <summary>
            Returns the result of comparing the specified values using the original
            comparer, but reversing the order of comparison.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.SyncedPriorityQueue`1">
            <summary>
            Provides a thread-safe collection that represents a queue, but prioritized elements are dequeued (popped) first.
            Small values have greater priority than larger values.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.SyncedPriorityQueue`1.SyncRoot">
            <summary>
            The object used to synchronize the priority queue.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.SyncedPriorityQueue`1.Queue">
            <summary>
            The priority queue that holds the elements in this thread-safe collection.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedPriorityQueue`1.Items">
            <summary>
            Gets a list of the items in the array (not in order).
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedPriorityQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedPriorityQueue`1.First">
            <summary>
            Gets the first or topmost item in the priority queue, which is the item with the minimum value.
            If the queue is empty, an ArgumentOutOfRange exception is thrown.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.#ctor">
            <summary>
             Initializes a new priority queue using the default comparer.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.#ctor(System.Comparison{`0})">
            <summary>
             Initializes a new priority queue using the specified comparer.
            </summary>
            <param name="comparer">The comparer to use. Smaller values are moved to the beginning of the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.#ctor(System.Int32,System.Comparison{`0})">
            <summary>
            Initializes a new priority queue using the specified comparer.
            </summary>
            <param name="capacity">The initial capacity of the queue.</param>
            <param name="comparer">The comparer to use. Smaller values are moved to the beginning of the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
             Initializes a new priority queue using the specified comparer.
            </summary>
            <param name="comparer">The comparer to use. Smaller values are moved to the beginning of the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new priority queue using the specified comparer.
            </summary>
            <param name="capacity">The initial capacity of the queue.</param>
            <param name="comparer">The comparer to use. Smaller values are moved to the beginning of the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.#ctor(System.Collections.Generic.PriorityQueue{`0})">
            <summary>
            Initializes a SyncedPriorityQueue wrapper from the specified queue.
            </summary>
            <param name="queue">The queue to wrap.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.Contains(`0)">
            <summary>
            Returns whether the specified item is in the queue.
            </summary>
            <param name="item">The item to locate in the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds the specified item to the priority queue.
            </summary>
            <param name="item">The item to enqueue.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.Dequeue">
            <summary>
            Removes the first node (smallest) from the heap.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.ToArray">
            <summary>
            Returns the queue as a sorted array.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.GetItem(System.Int32)">
            <summary>
            Retrieves the nth queue item sorted by priority.
            </summary>
            <param name="index">The queue index of the item to find (0 is the lowest priority item, 1 is second lowest...etc).</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.RemoveAt(System.Int32)">
            <summary>
            Removes a specific item from the queue specified by its queue index (very slow).
            </summary>
            <param name="index">The queue index of the item to remove.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.Remove(`0)">
            <summary>
            Removes a specific item from the queue, and returns whether the item was found.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.Clear">
            <summary>
            Clears the priority queue.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.Copy">
            <summary>
            Creates a shallow copy of the queue.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedPriorityQueue`1.Clone">
            <summary>
            Creates a shallow copy of the queue.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.PriorityQueue`1">
            <summary>
            Represents a queue, but prioritized elements are dequeued (popped) first. Small values have greater priority than larger values.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`1.Items">
            <summary>
            Gets a list of the items in the array (not in order).
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`1.First">
            <summary>
            Gets the first or topmost item in the priority queue, which is the item with the minimum value.
            If the queue is empty, an ArgumentOutOfRange exception is thrown.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.#ctor">
            <summary>
             Initializes a new priority queue using the default comparer.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
             Initializes a new priority queue using the default comparer.
            </summary>
            <param name="capacity">The initial capacity of the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.#ctor(System.Comparison{`0})">
            <summary>
             Initializes a new priority queue using the specified comparer.
            </summary>
            <param name="comparer">The comparer to use. Smaller values are moved to the beginning of the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.#ctor(System.Int32,System.Comparison{`0})">
            <summary>
            Initializes a new priority queue using the specified comparer.
            </summary>
            <param name="capacity">The initial capacity of the queue.</param>
            <param name="comparer">The comparer to use. Smaller values are moved to the beginning of the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
             Initializes a new priority queue using the specified comparer.
            </summary>
            <param name="comparer">The comparer to use. Smaller values are moved to the beginning of the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new priority queue using the specified comparer.
            </summary>
            <param name="capacity">The initial capacity of the queue.</param>
            <param name="comparer">The comparer to use. Smaller values are moved to the beginning of the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Contains(`0)">
            <summary>
            Returns whether the specified item is in the queue.
            </summary>
            <param name="item">The item to locate in the queue.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds the specified item to the priority queue.
            </summary>
            <param name="item">The item to enqueue.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Dequeue">
            <summary>
            Removes the first node (smallest) from the heap.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.ToArray">
            <summary>
            Returns the queue as a sorted array.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.GetItem(System.Int32)">
            <summary>
            Retrieves the nth queue item sorted by priority.
            </summary>
            <param name="index">The queue index of the item to find (0 is the lowest priority item, 1 is second lowest...etc).</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.RemoveAt(System.Int32)">
            <summary>
            Removes a specific item from the queue specified by its queue index (very slow).
            </summary>
            <param name="index">The queue index of the item to remove.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Remove(`0)">
            <summary>
            Removes a specific item from the queue, and returns whether the item was found.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Clear">
            <summary>
            Clears the priority queue.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Copy">
            <summary>
            Creates a shallow copy of the queue.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Clone">
            <summary>
            Creates a shallow copy of the queue.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.SizeControlledStack`1">
            <summary>
            Stack with a specified maximum capacity, bottom items beyond the capacity are overrwritten when full.
            </summary>
            <typeparam name="T">The type of the elements in the stack.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.SizeControlledStack`1.Item(System.Int32)">
            <summary>
            Gets or sets the element specified by the index in the stack.
            </summary>
            <param name="index">The index of the element. 0 refers to the first element that was pushed in the stack but not overwritten, while Count - 1 refers to the last element that was pushed.</param>
        </member>
        <member name="P:System.Collections.Generic.SizeControlledStack`1.MaximumCapacity">
            <summary>
            Gets or sets the maximum capacity of the stack.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SizeControlledStack`1.IsEmpty">
            <summary>
            Gets if the stack is empty.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SizeControlledStack`1.IsFull">
            <summary>
            Gets if the stack is full (and remember, when the stack is full, the next pushed element will overwrite the oldest pushed element in the stack).
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SizeControlledStack`1.Count">
            <summary>
            Gets the number of items currently in the stack.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.#ctor(System.Int32)">
            <summary>
            Initializes a new stack with the specified maximum capacity.
            </summary>
            <param name="maximumCapacity">The maximum capacity of the stack.</param>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new stack with the specified maximum capacity.
            </summary>
            <param name="initialCapacity">The initial capacity of the stack.</param>
            <param name="maximumCapacity">The maximum capacity of the stack.</param>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Creates an enumerator for the stack.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an enumerator for the stack.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.Push(`0)">
            <summary>
            Inserts an item at the top of the stack.
            </summary>
            <param name="item">The item to push.</param>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.Peek">
            <summary>
            Returns the object at the top of the stack without removing it.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.Pop">
            <summary>
            Returns the object at the top of the stack and removes it.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.Replace(`0)">
            <summary>
            Replaces the object at the top of the stack with the specified value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.ReplaceBottom(`0)">
            <summary>
            Replaces the object at the bottom of the stack with the specified value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.Clone">
            <summary>
            Returns a shallow copy of the current instance of SizeControlledStack.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.Clone(System.Int32)">
            <summary>
            Returns a shallow copy of the current instance of SizeControlledStack with the specified maximum capacity.
            </summary>
            <param name="maxCapacity">The maximum capacity of the stack to return.</param>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.Clear">
            <summary>
            Removes all the objects from the stack.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SizeControlledStack`1.FastClear">
            <summary>
            Like Clear(), but does not take the time to delete all items from the stack, instead just sets count to 0.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.SyncedEnumerator`1">
            <summary>
            Enumerates through all elements of a SyncedList.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.SyncedEnumerator`1.Index">
            <summary>
            The current position of the enumerator (can be -1 if uninitialized).
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedEnumerator`1.Current">
            <summary>
            Gets current element cached by the enumerator.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedEnumerator`1.#ctor(System.Collections.Generic.SyncedList{`0})">
            <summary>
            Initializes a SyncedEnumarator to enumerate a SyncedList.
            </summary>
            <param name="list">The list to enumerate.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedEnumerator`1.RefreshCurrent">
            <summary>
            At the current index, updates Current accordingly.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the list, and returns false if the entire list has been traversed, else false.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedEnumerator`1.Dispose">
            <summary>
            Empty lol
            </summary>
        </member>
        <member name="T:System.Collections.Generic.SyncedList`1">
            <summary>
            Provides a thread-safe collection that contains objects of a type specified by the generic parameter as elements.
            Foreach can be used safely on the list and still be able to modify it.
            It also offers methods for filtering elements.
            </summary>
            <typeparam name="T">The type of object contained as items in the thread-safe collection.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.SyncedList`1.Items">
            <summary>
            The list of elements contained in the thread-safe collection.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.SyncedList`1.SyncRoot">
            <summary>
            The object used to synchronize access to the thread-safe collection.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.SyncedList`1.Filter">
            <summary>
            The filter that is called when an item in about to be added to the list. Return true if the value should be kept.
            DO NOT MODIFY THE LIST WITHIN THE METHOD!
            </summary>
        </member>
        <member name="F:System.Collections.Generic.SyncedList`1.ShouldRemove">
            <summary>
            The filter that is called when an item in about to be removed to the list. Return true if the value should be removed.
            DO NOT MODIFY THE LIST WITHIN THE METHOD!
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedList`1.Count">
            <summary>
            Gets the number of elements contained in the thread-safe collection.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedList`1.Item(System.Int32)">
            <summary>
            Gets an element from the thread-safe collection with a specified index.
            </summary>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
        </member>
        <member name="P:System.Collections.Generic.SyncedList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value (true) that indicates whether the collection is thread safe.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets the object used to synchronize access to the thread-safe collection.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value (false) that indicates whether the collection is fixed in size.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value (false) that indicates whether the collection is read only.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SyncedList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item at a specified zero-based index.
            </summary>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.#ctor">
            <summary>
            Initializes a new list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.#ctor(System.Object)">
            <summary>
            Initializes a new list.
            </summary>
            <param name="syncRoot">The object used to synchronize access the thread-safe collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a SyncedList wrapper from the specified list.
            </summary>
            <param name="list">The list of elements to wrap.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.#ctor(System.Object,System.Collections.Generic.List{`0})">
            <summary>
            Initializes a SyncedList wrapper from the specified list with the object used to synchronize access to the thread-safe collection.
            </summary>
            <param name="syncRoot">The object used to synchronize access to the thread-safe collection.</param>
            <param name="list">The list of elements to wrap.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new list from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe collection.
            </summary>
            <param name="syncRoot">The object used to synchronize access to the thread-safe collection.</param>
            <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of elements used to initialize the thread-safe collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.#ctor(System.Object,`0[])">
            <summary>
            Initializes a new list from a specified array of elements and with the object used to synchronize access to the thread-safe collection.
            </summary>
            <param name="syncRoot">The object used to synchronize access the thread-safe collection.</param>
            <param name="list">The <see cref="T:System.Array"/> of type T elements used to initialize the thread-safe collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new list from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe collection.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of elements used to initialize the thread-safe collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.#ctor(`0[])">
            <summary>
            Initializes a new list from a specified array of elements and with the object used to synchronize access to the thread-safe collection.
            </summary>
            <param name="list">The <see cref="T:System.Array"/> of type T elements used to initialize the thread-safe collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.AsReadOnly">
            <summary>
            Returns a read-only synced wrapper for the current collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.Add(`0)">
            <summary>
            Adds an item to the thread-safe collection.
            </summary>
            <param name="item">The element to be added to the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the thread-safe collection.
            </summary>
            <param name="items">The elements to be added to the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.AddRange(`0[])">
            <summary>
            Adds a range of items to the thread-safe collection.
            </summary>
            <param name="items">The elements to be added to the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.Contains(`0)">
            <summary>
            Determines whether the collection contains an element with a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.CopyTo(`0[])">
            <summary>
            Copies the elements of the collection to a specified array, starting at index 0.
            </summary>
            <param name="array">The destination <see cref="T:System.Array"/> for the elements of type T copied from the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to a specified array, starting at a particular index.
            </summary>
            <param name="array">The destination <see cref="T:System.Array"/> for the elements of type T copied from the collection.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies the elements of the collection to a specified array using the specified parameters.
            </summary>
            <param name="index">The zero-based index in the source list at which copying begins.</param>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.IndexOf(`0)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="item">The item to locate.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at a specified index.
            </summary>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
            <param name="item">The object to be inserted into the collection as an element.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts items into the collection at a specified index.
            </summary>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
            <param name="items">The objects to be inserted into the collection as an element.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specified item from the collection. Returns true if removal was successful, else false.
            </summary>
            <param name="item">The object to remove from the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items at a specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.Reverse">
            <summary>
            Reverses the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the specified elements in the list.
            </summary>
            <param name="index">The starting index.</param>
            <param name="count">The number of indices to reverse.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to a specified array, starting at a particular index.
            </summary>
            <param name="array">The destination array for the elements of type T copied from the collection.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the synchronized collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the synchronized collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an element to the collection and return the position into which the new element was inserted.
            </summary>
            <param name="value">The object to add to the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the collection contains an element with a specific value.
            </summary>
            <param name="value">The object to locate in the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the zero-based index of an element in the collection, or -1 if not found.
            </summary>
            <param name="value">The element in the collection whose index is being determined.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an object into the collection at a specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> is to be inserted.</param>
            <param name="value">The object to insert into the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specified object as an element from the collection.
            </summary>
            <param name="value">The object to be removed from the collection.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.op_Explicit(System.Collections.Generic.SyncedList{`0})~System.Collections.Generic.List{`0}">
            <summary>
            Gets the items from a SyncedList.
            </summary>
            <param name="list">The list whose items to get.</param>
        </member>
        <member name="M:System.Collections.Generic.SyncedList`1.op_Explicit(System.Collections.Generic.List{`0})~System.Collections.Generic.SyncedList{`0}">
            <summary>
            Initializes a SyncedList wrapper from a list.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="T:System.Collections.ObjectModel.ReadOnlySyncedList`1">
            <summary>
            Serves as a thread-safe read-only wrapper for a synced list.</summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.Count">
            <summary>
            Gets the number of elements contained in the wrapped list.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.Items">
            <summary>
            Returns the synced list that this wraps.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.SyncRoot">
            <summary>
            Gets the object that is used by the SyncedList to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value (true) that indicates whether the collection is read only.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value (true) that indicates whether the collection is fixed in size.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value (true) that indicates whether the collection is read only.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlySyncedList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value (true) that indicates whether the collection is thread safe.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.#ctor(System.Collections.Generic.SyncedList{`0})">
            <summary>
            Initializes a new read-only wrapper around the specified list.</summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.Contains(`0)">
            <summary>
            Determines whether the collection contains an element with a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.CopyTo(`0[])">
            <summary>
            Copies the elements of the collection to a specified array, starting at index 0.
            </summary>
            <param name="array">The destination array for the elements of type T copied from the collection.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to a specified array, starting at a particular index.
            </summary>
            <param name="array">The destination <see cref="T:System.Array"/> for the elements of type T copied from the collection.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies the elements of the collection to a specified array using the specified parameters.
            </summary>
            <param name="index">The zero-based index in the source list at which copying begins.</param>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to a specified array, starting at a particular index.
            </summary>
            <param name="array">The destination array for the elements of type T copied from the collection.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.IndexOf(`0)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="item">The item to locate.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlySyncedList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the zero-based index of an element in the collection, or -1 if not found.
            </summary>
            <param name="value">The element in the collection whose index is being determined.</param>
        </member>
        <member name="T:System.Collections.Specialized.BitVector64">
            <summary>
            Provides a simple structure that stores Boolean values and small integers in 64 bits of memory.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.BitVector64.Data">
            <summary>
            The actual numeric data representation of this BitVector.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.BitVector64.Item(System.Int32)">
            <summary>
            Gets or sets the specified bit.
            </summary>
            <param name="bitIndex">The bit index to get or set (0 to 63).</param>
        </member>
        <member name="P:System.Collections.Specialized.BitVector64.Item(System.Collections.Specialized.BitVector32.Section)">
            <summary>
            Gets or sets the value stored in the specified Section.
            </summary>
            <param name="section">The section whose value to get or set.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.#ctor(System.Collections.Specialized.BitVector32)">
            <summary>
            Initializes a new BitVector64 from the specified source.
            </summary>
            <param name="source">The data source.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.#ctor(System.UInt64)">
            <summary>
            Initializes a new BitVector64 from the specified source.
            </summary>
            <param name="source">The data source.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.#ctor(System.Int32)">
            <summary>
            Initializes a new BitVector64 from the specified source.
            </summary>
            <param name="source">The data source.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.AreSet(System.UInt64)">
            <summary>
            Gets whether the specified flags are set by applying the mask using an AND operation.
            </summary>
            <param name="mask">The mask to apply.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.SetFlags(System.UInt64,System.Boolean)">
            <summary>
            Sets the specified value to the flags specified by the mask.
            </summary>
            <param name="mask">The mask of the bits to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.CreateMask">
            <summary>
            Creates the first mask in a series of masks that can be used to retrieve individual bits in a BitVector64 that is set up as bit flags.
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.CreateMask(System.Int64)">
            <summary>
            Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a BitVector64 that is set up as bit flags.
            </summary>
            <param name="previous">The mask that indicates the previous bit flag.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.CreateSection(System.Int32)">
            <summary>
            Creates the first Section in a series of sections that contain small integers.
            </summary>
            <param name="maxValue">A 32-bit signed integer that specifies the maximum value for the new Section.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.CreateSection(System.Int32,System.Collections.Specialized.BitVector32.Section)">
            <summary>
            Creates a new Section following the specified Section in a series of sections that contain small integers.
            </summary>
            <param name="maxValue">A 32-bit signed integer that specifies the maximum value for the new Section.</param>
            <param name="previous">The previous section in the BitVector.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.op_Equality(System.Collections.Specialized.BitVector64,System.Collections.Specialized.BitVector64)">
            <summary>
            Gets whether the specified BitVector64 instances have the same bits set.
            </summary>
            <param name="left">The first set of flags to compare.</param>
            <param name="right">The second set of flags to compare.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.op_Inequality(System.Collections.Specialized.BitVector64,System.Collections.Specialized.BitVector64)">
            <summary>
            Gets whether the specified BitVector64 instances have different bits set.
            </summary>
            <param name="left">The first set of flags to compare.</param>
            <param name="right">The second set of flags to compare.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.Equals(System.Collections.Specialized.BitVector64)">
            <summary>
            Gets whether the specified BitVector64 is considered equal to this instance.
            </summary>
            <param name="bits">The BitVector64 to check for equality.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.Equals(System.Object)">
            <summary>
            Gets whether the specified object is considered equal to this instance.
            </summary>
            <param name="obj">The object to check for equality.</param>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.GetHashCode">
            <summary>
            Gets a hash code from this instance.
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.BitVector64.ToString">
            <summary>
            Gets a string that represents this instance.
            </summary>
        </member>
        <member name="T:System.ComponentModel.SortComparerEventArgs">
            <summary>
            Describes a sorting operation.
            </summary>
        </member>
        <member name="F:System.ComponentModel.SortComparerEventArgs.PropertySort">
            <summary>
            The property on which to sort the object in ascending order.
            </summary>
        </member>
        <member name="F:System.ComponentModel.SortComparerEventArgs.Item1">
            <summary>
            The first item to compare.
            </summary>
        </member>
        <member name="F:System.ComponentModel.SortComparerEventArgs.Item2">
            <summary>
            The second item to compare.
            </summary>
        </member>
        <member name="F:System.ComponentModel.SortComparerEventArgs.Cell1Value">
            <summary>
            The value of the sort property for Item1.
            </summary>
        </member>
        <member name="F:System.ComponentModel.SortComparerEventArgs.Cell2Value">
            <summary>
            The value of the sort property for Item2.
            </summary>
        </member>
        <member name="P:System.ComponentModel.SortComparerEventArgs.SortResult">
            <summary>
            Gets or sets a value indicating the order in which the compared cells will be sorted.
            </summary>
        </member>
        <member name="M:System.ComponentModel.SortComparerEventArgs.#ctor(System.ComponentModel.PropertyDescriptor,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Describes a sorting operation.
            </summary>
            <param name="propertySort">The property on which to sort the object in ascending order.</param>
            <param name="item1">The first item to compare.</param>
            <param name="item2">The second item to compare.</param>
            <param name="cell1Value">The value of the sort property for Item1.</param>
            <param name="cell2Value">The value of the sort property for Item2.</param>
        </member>
        <member name="T:System.ComponentModel.BindingListView`1">
            <summary>
            Provides a generic collection that supports data binding, sorting and filtering.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="T:System.ComponentModel.BindingListView`1.SortCompareHandler">
            <summary>
            Called when the items are about to be sorted. Allows overriding the default sort behavior.
            </summary>
            <param name="sender">The SortComparer that is currently handling the sorting.</param>
            <param name="comparer">The event handler. If Handled is left false, then the default sorting mechanism will be used.</param>
        </member>
        <member name="E:System.ComponentModel.BindingListView`1.SortCompare">
            <summary>
            Called when the items are about to be sorted. Allows overriding the default sort behavior.
            </summary>
        </member>
        <member name="P:System.ComponentModel.BindingListView`1.CurrentFilter">
            <summary>
            Gets the current item filter (or null if there is no filter currently applied).
            </summary>
        </member>
        <member name="P:System.ComponentModel.BindingListView`1.Filtered">
            <summary>
            Gets whether the list is currently filtered.
            </summary>
        </member>
        <member name="P:System.ComponentModel.BindingListView`1.UnfilteredElements">
            <summary>
            Gets a list of the full unfiltered elements. The Items property returns filtered elements (if a filter is applied).
            </summary>
        </member>
        <member name="P:System.ComponentModel.BindingListView`1.SupportsSortingCore">
            <summary>
            True
            </summary>
        </member>
        <member name="P:System.ComponentModel.BindingListView`1.IsSortedCore">
            <summary>
            Gets whether the list is currently sorted.
            </summary>
        </member>
        <member name="P:System.ComponentModel.BindingListView`1.SortDirectionCore">
            <summary>
            Gets the current sort direction.
            </summary>
        </member>
        <member name="P:System.ComponentModel.BindingListView`1.SortPropertyCore">
            <summary>
            Gets the property on which the list is sorted.
            </summary>
        </member>
        <member name="P:System.ComponentModel.BindingListView`1.Filter">
            <summary>
            Gets or sets the associated filter string (use ApplyFilter() instead).
            </summary>
        </member>
        <member name="P:System.ComponentModel.BindingListView`1.SupportsSearchingCore">
            <summary>
            True
            </summary>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.#ctor">
            <summary>
            Initializes a new empty bindable list.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new bindable list from the specified collection.
            </summary>
            <param name="list">The list to copy elements from.</param>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Searches for the specified element in the current (filtered) list.
            </summary>
            <param name="property">The property to search for.</param>
            <param name="key">The value of the property to search for.</param>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list using the specified property and direction.
            </summary>
            <param name="property">The property to sort from.</param>
            <param name="direction">The sorting direction.</param>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.RemoveSortCore">
            <summary>
            Marks the list as unsorted.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.GetUnfilteredIndex(System.Int32)">
            <summary>
            Gets the index in the unfiltered list that corresponds to the specified index of the same item in the Items list.
            </summary>
            <param name="index">The index of the item in the Items list.</param>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.ApplyFilter(System.Predicate{`0})">
            <summary>
            Applies a filter to the Items list. The specified filter will replace previous filters.
            You can use Extensions.And or Extensions.Or to concatenate predicates.
            </summary>
            <param name="predicate">The filter to apply. Returnin true for an item means it is allowed into the filtered list.</param>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.UpdateFilter">
            <summary>
            Called when the filter has changed. Use ApplyFilter() instead.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.RemoveFilter">
            <summary>
            Removes any filter that is applied to the list.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.RemoveFilter(System.Boolean)">
            <summary>
            Removes any filter that is applied to the list.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the specified item at the specified index.
            </summary>
            <param name="index">The index tha</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.SetItem(System.Int32,`0)">
            <summary>
            Sets the item at the specified index. 
            </summary>
            <param name="index">The index to set.</param>
            <param name="item">The index to set the item.</param>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Gets a list of the properties that the items in the list have.
            </summary>
            <param name="listAccessors">A list of the properties in the item.</param>
        </member>
        <member name="M:System.ComponentModel.BindingListView`1.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Gets the name of the view.
            </summary>
            <param name="listAccessors">Unused. Can be null.</param>
        </member>
        <member name="T:System.ComponentModel.SortComparer`1">
            <summary>
            Compares properties for sorting.
            </summary>
            <typeparam name="T">The type of items supported by the collection.</typeparam>
        </member>
        <member name="M:System.ComponentModel.SortComparer`1.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new sort comparer using the specified property and direction.
            </summary>
            <param name="propDesc">The property to sort.</param>
            <param name="direction">The direction to sort at.</param>
        </member>
        <member name="M:System.ComponentModel.SortComparer`1.#ctor(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Initializes a new sort comparer from the specified description collection.
            </summary>
            <param name="sortCollection"></param>
        </member>
        <member name="M:System.ComponentModel.SortComparer`1.Compare(`0,`0)">
            <summary>
            Compares the specified items and returns which is considered larger using the sorting configuration specified in the constructor.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The second value to compare.</param>
        </member>
        <member name="T:System.Diagnostics.AsyncResult">
            <summary>
            A configurable IAsyncResult implementation.
            </summary>
        </member>
        <member name="F:System.Diagnostics.AsyncResult.Handler">
            <summary>
            The AsyncResult instance to use instead of this one. This is useful for chaining asynchronous method calls.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncResult.CompletedSynchronously">
            <summary>
            Gets or setsa flag whether the task completed synchronously or asynchronously;
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets or sets the WaitHandle of the instance.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncResult.AsyncState">
            <summary>
            Gets or sets the state of the task.
            </summary>
        </member>
        <member name="P:System.Diagnostics.AsyncResult.IsCompleted">
            <summary>
            Gets or sets whether *this* task is completed (if Handler is not null, its IsCompleted value is returned for Get).
            </summary>
        </member>
        <member name="M:System.Diagnostics.AsyncResult.#ctor">
            <summary>
            Initializes a new IAsyncResult implementation.
            </summary>
        </member>
        <member name="M:System.Diagnostics.AsyncResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new IAsyncResult implementation.
            </summary>
            <param name="isCompleted">Whether the task is already completed.</param>
        </member>
        <member name="T:System.Diagnostics.IErrorLogger">
            <summary>
            Represents an error logger. To use your own, implement IErrorLogger and set System.Diagnostics.ErrorHandler.Logger to a new instance of your logger.
            </summary>
        </member>
        <member name="M:System.Diagnostics.IErrorLogger.LogException(System.Exception,System.String)">
            <summary>
            Handles an exception that was thrown.
            </summary>
            <param name="ex">The first exception that was thrown.</param>
            <param name="errorLog">A full description of the error that occurred (pre-formatted for logging).</param>
        </member>
        <member name="T:System.Diagnostics.ErrorLogger">
            <summary>
            The default error logger. To use your own, inherit this class or implement IErrorLogger and override LogException(),
            and set System.Diagnostics.ErrorHandler.Logger to a new instance of your logger.
            </summary>
        </member>
        <member name="P:System.Diagnostics.ErrorLogger.MaxLogSizeKiB">
            <summary>
            Gets or sets the maximum log file size in kibibytes.
            </summary>
        </member>
        <member name="M:System.Diagnostics.ErrorLogger.LogException(System.Exception,System.String)">
            <summary>
            Handles an exception that was thrown.
            </summary>
            <param name="ex">The first exception that was thrown.</param>
            <param name="errorLog">A full description of the error that occurred (pre-formatted for logging).</param>
        </member>
        <member name="T:System.Diagnostics.PreciseStopwatch">
            <summary>
            A flexible stopwatch for measuring elapsed time very precisely.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PreciseStopwatch.IsHighResolutionTimingSupported">
            <summary>
            Gets whether high resolution timing is supported on the current platform.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PreciseStopwatch.NanosecondsPerTick">
            <summary>
            Gets the amount of nanoseconds every platform-specific tick represents.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.SpeedMultiplier">
            <summary>
            Gets or sets the stopwatch speed multiplier (1 means time speed is normal).
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.Running">
            <summary>
            Gets or sets whether the stopwatch is started.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.Elapsed">
            <summary>
            Gets the elapsed time.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedTicks">
            <summary>
            Gets the elapsed time in platform-specific ticks.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedFortnights">
            <summary>
            Gets the elapsed time in fortnights.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedWeeks">
            <summary>
            Gets the elapsed time in weeks.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedDays">
            <summary>
            Gets the elapsed time in days.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedHours">
            <summary>
            Gets the elapsed time in hours.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedMinutes">
            <summary>
            Gets the elapsed time in minutes.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedSeconds">
            <summary>
            Gets the elapsed time in seconds.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed time in milliseconds.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedMicroseconds">
            <summary>
            Gets the elapsed time in microseconds.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.Elapsed100NanosecondTicks">
            <summary>
            Gets the elapsed time in standard ticks (not platform-specific).
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.ElapsedNanoseconds">
            <summary>
            Gets the elapsed time in nanoseconds.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PreciseStopwatch.TimeStamp">
            <summary>
            Gets the current time in platform-specific ticks.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.#ctor">
            <summary>
            Initializes a new high-resolution stopwatch.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.#ctor(System.Double)">
            <summary>
            Initializes a new high-resolution stopwatch with pre-elapsed ticks.
            </summary>
            <param name="preElapsedTicks">The starting elapsed ticks.</param>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.#ctor(System.Diagnostics.PreciseStopwatch)">
            <summary>
            Initializes a new high-resolution stopwatch with pre-elapsed ticks.
            </summary>
            <param name="stopwatch">The stopwatch to clone.</param>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.#ctor(System.Diagnostics.Stopwatch)">
            <summary>
            Initializes a new high-resolution stopwatch with pre-elapsed ticks.
            </summary>
            <param name="stopwatch">The stopwatch to clone.</param>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.Restart">
            <summary>
            Resets and starts stopwatch.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.RestartGet">
            <summary>
            Resets and starts stopwatch and returns the elapsed milliseconds before Restarting.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.Reset">
            <summary>
            Resets and stops the stopwatch.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.StartNew">
            <summary>
            Initializes a new stopwatch and starts it at one go.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.ConvertToTicks(System.Double)">
            <summary>
            Converts nanoseconds to platform-specific ticks.
            </summary>
            <param name="nanoseconds">The value of nanoseconds to convert to platform-specific ticks.</param>
            <returns>The equivalent of the nanoseconds in platform-specific ticks.</returns>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.ConvertToNanoseconds(System.Double)">
            <summary>
            Converts platform-specific ticks to nanoseconds.
            </summary>
            <param name="ticks">The value of platform-specific ticks to convert to nanoseconds.</param>
            <returns>The equivalent of the platform-specific ticks in nanoseconds.</returns>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.GetHashCode">
            <summary>
            Calculates the hash code for this PreciseStopwatch.
            </summary>
            <returns>A System.Int32 containing the hashcode of this PreciseStopwatch.</returns>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.ToString">
            <summary>
            Creates a System.String that describes this PreciseStopwatch.
            </summary>
            <returns>A System.String that describes this PreciseStopwatch.</returns>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.Equals(System.Object)">
            <summary>
            Compares whether this PreciseStopwatch is equal to the specified object.
            </summary>
            <param name="obj">An object to compare to.</param>
        </member>
        <member name="M:System.Diagnostics.PreciseStopwatch.Equals(System.Diagnostics.PreciseStopwatch)">
            <summary>
            Compares whether this PreciseStopwatch is equal to the specified object.
            </summary>
            <param name="other">The object to compare to.</param>
        </member>
        <member name="T:System.Diagnostics.ErrorDialogAction">
            <summary>
            Describes the error dialog behavior
            </summary>
        </member>
        <member name="F:System.Diagnostics.ErrorDialogAction.NormalUserChoice">
            <summary>
            The error dialog is shown and the user can choose an action to take
            </summary>
        </member>
        <member name="F:System.Diagnostics.ErrorDialogAction.ThrowRegardless">
            <summary>
            The error dialog is not shown and the exception is thrown instead
            </summary>
        </member>
        <member name="F:System.Diagnostics.ErrorDialogAction.SilentOperation">
            <summary>
            Writes the exception to console and attempts to ignore the exception
            </summary>
        </member>
        <member name="T:System.Diagnostics.ErrorDialogButton">
            <summary>
            An enumeration of all the buttons that can be shown in the error dialog.
            </summary>
        </member>
        <member name="F:System.Diagnostics.ErrorDialogButton.Ignore">
            <summary>
            Tries to ignore the error that happened.
            </summary>
        </member>
        <member name="F:System.Diagnostics.ErrorDialogButton.Throw">
            <summary>
            Throws the ecxeptions that happened.
            </summary>
        </member>
        <member name="F:System.Diagnostics.ErrorDialogButton.Quit">
            <summary>
            Kills the current process immediately.
            </summary>
        </member>
        <member name="T:System.Diagnostics.ErrorHandler">
            <summary>
            A verbose error message dialog, perfect for advanced flexible exception handling.
            </summary>
        </member>
        <member name="F:System.Diagnostics.ErrorHandler.Logger">
            <summary>
            The error logger to use.
            </summary>
        </member>
        <member name="F:System.Diagnostics.ErrorHandler.Behavior">
            <summary>
            The behavior of the error dialog
            </summary>
        </member>
        <member name="F:System.Diagnostics.ErrorHandler.DefaultButtons">
            <summary>
            A constant for showing the default buttons.
            </summary>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.Show(System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.ShowAsync(System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.Show(System.Diagnostics.ErrorDialogButton,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="buttons">The buttons to show.</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.ShowAsync(System.Diagnostics.ErrorDialogButton,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="buttons">The buttons to show.</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.Show(System.String,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="message">The error message to show on top.</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.ShowAsync(System.String,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="message">The error message to show on top.</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.Show(System.String,System.Diagnostics.ErrorDialogButton,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="message">The error message to show on top.</param>
            <param name="buttons">The buttons to show.</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.ShowAsync(System.String,System.Diagnostics.ErrorDialogButton,System.Exception[])">
            <summary>
            Shows an error dialog handling the specified exceptions.
            </summary>
            <param name="message">The error message to show on top.</param>
            <param name="buttons">The buttons to show.</param>
            <param name="ex">An error containing the exceptions whose info to display.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.ExceptionToDetailedString(System.String,System.Exception[])">
            <summary>
            Generates a helpful structured string that describes the specified exceptions.
            </summary>
            <param name="message">A custom message that is added to the full string (can be null).</param>
            <param name="ex">A list of the exceptions to show the details of.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.LogException(System.Exception)">
            <summary>
            Logs the specified exception
            </summary>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.LogException(System.Exception,System.String)">
            <summary>
            Raises the LogException event.
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="fullMessage">The full message string to log. Call ExceptionToDetailedString() to create a properly-formatted string.</param>
        </member>
        <member name="M:System.Diagnostics.ErrorHandler.ExtractFromException(System.Exception)">
            <summary>
            Extracts all inner exceptions from an exception.
            </summary>
            <param name="ex">The exception to extract inner exceptions from.</param>
        </member>
        <member name="T:System.Drawing.BgraColor">
            <summary>
            Represents a color with 4 byte components (B, G, R, A).
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.B">
            <summary>
            The blue component of this BgraColor structure.
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.G">
            <summary>
            The green component of this BgraColor structure.
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.R">
            <summary>
            The red component of this BgraColor structure.
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.A">
            <summary>
            The alpha component of this BgraColor structure.
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Empty">
            <summary>
            Empty transparent color (ARGB: 0, 0, 0, 0)
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Transparent">
            <summary>
            Transparent color (ARGB: 0, 255, 255, 255)
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.AliceBlue">
            <summary>
            RGB: 240, 248, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.AntiqueWhite">
            <summary>
            RGB: 250, 235, 215
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.AquaMarine">
            <summary>
            RGB: 127, 255, 212
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Azure">
            <summary>
            RGB: 240, 255, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Beige">
            <summary>
            RGB: 245, 245, 220
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Bisque">
            <summary>
            RGB: 255, 228, 196
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Black">
            <summary>
            RGB: 0, 0, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.BlanchedAlmond">
            <summary>
            RGB: 255, 235, 205
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Blue">
            <summary>
            RGB: 0, 0, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.BlueViolet">
            <summary>
            RGB: 138, 43, 226
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Brown">
            <summary>
            RGB: 165, 42, 42
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.BurlyWood">
            <summary>
            RGB: 222, 184, 135
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.CadetBlue">
            <summary>
            RGB: 95, 158, 160
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Chartreuse">
            <summary>
            RGB: 127, 255, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Chocolate">
            <summary>
            RGB: 210, 105, 30
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Coral">
            <summary>
            RGB: 255, 127, 80
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.CornFlowerBlue">
            <summary>
            RGB: 100, 149, 237
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Cornsilk">
            <summary>
            RGB: 255, 248, 220
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Crimson">
            <summary>
            RGB: 220, 20, 60
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Cyan">
            <summary>
            RGB: 0, 255, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkBlue">
            <summary>
            RGB: 0, 0, 139
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkCyan">
            <summary>
            RGB: 0, 139, 139
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkGoldenRod">
            <summary>
            RGB: 184, 134, 11
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkGray">
            <summary>
            RGB: 169, 169, 169
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkGreen">
            <summary>
            RGB: 0, 100, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkKhaki">
            <summary>
            RGB: 189, 183, 107
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkMagenta">
            <summary>
            RGB: 139, 0, 139
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkOliveGreen">
            <summary>
            RGB: 85, 107, 47
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkOrange">
            <summary>
            RGB: 255, 140, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkOrchid">
            <summary>
            RGB: 153, 50, 204
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkRed">
            <summary>
            RGB: 139, 0, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkSalmon">
            <summary>
            RGB: 233, 150, 122
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkSeaGreen">
            <summary>
            RGB: 143, 188, 139
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkSlateBlue">
            <summary>
            RGB: 72, 61, 139
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkSlateGray">
            <summary>
            RGB: 47, 79, 79
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkTurquoise">
            <summary>
            RGB: 0, 206, 209
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DarkViolet">
            <summary>
            RGB: 148, 0, 211
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DeepPink">
            <summary>
            RGB: 255, 20, 147
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DeepSkyBlue">
            <summary>
            RGB: 0, 191, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DimGray">
            <summary>
            RGB: 105, 105, 105
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.DodgerBlue">
            <summary>
            RGB: 30, 144, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.FireBrick">
            <summary>
            RGB: 178, 34, 34
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.FloralWhite">
            <summary>
            RGB: 255, 250, 240
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.ForestGreen">
            <summary>
            RGB: 34, 139, 34
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Fuchsia">
            <summary>
            RGB: 255, 0, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Gainsboro">
            <summary>
            RGB: 220, 220, 220
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.GhostWhite">
            <summary>
            RGB: 248, 248, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Gold">
            <summary>
            RGB: 255, 215, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.GoldenRod">
            <summary>
            RGB: 218, 165, 32
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Gray">
            <summary>
            RGB: 128, 128, 128
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Green">
            <summary>
            RGB: 0, 128, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.GreenYellow">
            <summary>
            RGB: 173, 255, 47
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.HoneyDew">
            <summary>
            RGB: 240, 255, 240
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.HotPink">
            <summary>
            RGB: 255, 105, 180
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.IndianRed">
            <summary>
            RGB: 205, 92, 92
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Indigo">
            <summary>
            RGB: 75, 0, 130
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Ivory">
            <summary>
            RGB: 255, 255, 240
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Khaki">
            <summary>
            RGB: 240, 230, 140
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Lavender">
            <summary>
            RGB: 230, 230, 250
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LavenderBlush">
            <summary>
            RGB: 255, 240, 245
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LawnGreen">
            <summary>
            RGB: 124, 252, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LemonChiffon">
            <summary>
            RGB: 255, 250, 205
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightBlue">
            <summary>
            RGB: 173, 216, 230
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightCoral">
            <summary>
            RGB: 240, 128, 128
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightCyan">
            <summary>
            RGB: 224, 255, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightGoldenRodYellow">
            <summary>
            RGB: 250, 250, 210
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightGray">
            <summary>
            RGB: 211, 211, 211
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightGreen">
            <summary>
            RGB: 144, 238, 144
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightPink">
            <summary>
            RGB: 255, 182, 193
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightSalmon">
            <summary>
            RGB: 255, 160, 122
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightSeaGreen">
            <summary>
            RGB: 32, 178, 170
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightSkyBlue">
            <summary>
            RGB: 135, 206, 250
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightSlateGray">
            <summary>
            RGB: 119, 136, 153
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightSteelBlue">
            <summary>
            RGB: 176, 196, 222
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LightYellow">
            <summary>
            RGB: 255, 255, 224
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Lime">
            <summary>
            RGB: 0, 255, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.LimeGreen">
            <summary>
            RGB: 50, 205, 50
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Linen">
            <summary>
            RGB: 250, 240, 230
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Magenta">
            <summary>
            RGB: 255, 0, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Maroon">
            <summary>
            RGB: 128, 0, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MediumAquaMarine">
            <summary>
            RGB: 102, 205, 170
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MediumBlue">
            <summary>
            RGB: 0, 0, 205
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MediumOrchid">
            <summary>
            RGB: 186, 85, 211
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MediumPurple">
            <summary>
            RGB: 147, 112, 219
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MediumSeaGreen">
            <summary>
            RGB: 60, 179, 113
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MediumSlateBlue">
            <summary>
            RGB: 123, 104, 238
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MediumSpringGreen">
            <summary>
            RGB: 0, 250, 154
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MediumTurquoise">
            <summary>
            RGB: 72, 209, 204
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MediumVioletRed">
            <summary>
            RGB: 199, 21, 133
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MidnightBlue">
            <summary>
            RGB: 25, 25, 112
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MintCream">
            <summary>
            RGB: 245, 255, 250
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.MistyRose">
            <summary>
            RGB: 255, 228, 225
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Moccasin">
            <summary>
            RGB: 255, 228, 181
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.NavajoWhite">
            <summary>
            RGB: 255, 222, 173
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.NavyBlue">
            <summary>
            RGB: 0, 0, 128
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.OldLace">
            <summary>
            RGB: 253, 245, 230
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Olive">
            <summary>
            RGB: 128, 128, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.OliveDrab">
            <summary>
            RGB: 107, 142, 35
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Orange">
            <summary>
            RGB: 255, 165, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.OrangeRed">
            <summary>
            RGB: 255, 69, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Orchid">
            <summary>
            RGB: 218, 112, 214
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.PaleGoldenRod">
            <summary>
            RGB: 250, 240, 230
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.PaleGreen">
            <summary>
            RGB: 152, 251, 152
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.PaleTurquoise">
            <summary>
            RGB: 175, 238, 238
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.PaleVioletRed">
            <summary>
            RGB: 219, 112, 147
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.PapayaWhip">
            <summary>
            RGB: 255, 239, 213
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.PeachPuff">
            <summary>
            RGB: 255, 218, 185
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Peru">
            <summary>
            RGB: 205, 133, 65
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Pink">
            <summary>
            RGB: 255, 192, 203
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Plum">
            <summary>
            RGB: 221, 160, 221
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.PowderBlue">
            <summary>
            RGB: 176, 224, 230
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Purple">
            <summary>
            RGB: 128, 0, 128
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Red">
            <summary>
            RGB: 255, 0, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.RosyBrown">
            <summary>
            RGB: 188, 143, 143
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.RoyalBlue">
            <summary>
            RGB: 65, 105, 225
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.SaddleBrown">
            <summary>
            RGB: 139, 69, 19
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Salmon">
            <summary>
            RGB: 250, 128, 114
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.SandyBrown">
            <summary>
            RGB: 244, 164, 96
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.SeaGreen">
            <summary>
            RGB: 46, 139, 87
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.SeaShell">
            <summary>
            RGB: 255, 245, 238
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Sienna">
            <summary>
            RGB: 160, 82, 45
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Silver">
            <summary>
            RGB: 192, 192, 192
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.SkyBlue">
            <summary>
            RGB: 135, 206, 235
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.SlateBlue">
            <summary>
            RGB: 106, 90, 205
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.SlateGray">
            <summary>
            RGB: 112, 128, 144
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Snow">
            <summary>
            RGB: 255, 250, 250
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.SpringGreen">
            <summary>
            RGB: 0, 255, 127
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.SteelBlue">
            <summary>
            RGB: 70, 130, 180
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Tan">
            <summary>
            RGB: 210, 180, 140
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Teal">
            <summary>
            RGB: 0, 128, 128
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Thistle">
            <summary>
            RGB: 216, 191, 216
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Tomato">
            <summary>
            RGB: 255, 99, 71
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Turquoise">
            <summary>
            RGB: 64, 224, 208
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Violet">
            <summary>
            RGB: 238, 130, 238
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Wheat">
            <summary>
            RGB: 245, 222, 179
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.White">
            <summary>
            RGB: 255, 255, 255
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.WhiteSmoke">
            <summary>
            RGB: 245, 245, 245
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.Yellow">
            <summary>
            RGB: 255, 255, 0
            </summary>
        </member>
        <member name="F:System.Drawing.BgraColor.YellowGreen">
            <summary>
            RGB: 154, 205, 50
            </summary>
        </member>
        <member name="P:System.Drawing.BgraColor.Item(System.Int32)">
            <summary>
            Gets the component specified by the index.
            </summary>
            <param name="index">0 for B, 1 for G, 2 for R, 3 for A.</param>
        </member>
        <member name="P:System.Drawing.BgraColor.Luminance">
            <summary>
            Gets the luminance of this color.
            </summary>
        </member>
        <member name="P:System.Drawing.BgraColor.ChrominanceU">
            <summary>
            Gets the Chrominance U.
            </summary>
        </member>
        <member name="P:System.Drawing.BgraColor.ChrominanceV">
            <summary>
            Gets the Chrominance V.
            </summary>
        </member>
        <member name="M:System.Drawing.BgraColor.#ctor(System.Byte)">
            <summary>
            Constructs a new BgraColor structure from the specified components.
            </summary>
            <param name="val">The value of R, G and B of the new BgraColor structure (A is 255).</param>
        </member>
        <member name="M:System.Drawing.BgraColor.#ctor(System.Byte,System.Byte)">
            <summary>
            Constructs a new BgraColor structure from the specified components.
            </summary>
            <param name="alpha">The new alpha component.</param>
            <param name="val">The value of R, G and B of the new BgraColor structure.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new BgraColor structure from the specified components.
            </summary>
            <param name="a">The alpha component of the new BgraColor structure.</param>
            <param name="r">The red component of the new BgraColor structure.</param>
            <param name="g">The green component of the new BgraColor structure.</param>
            <param name="b">The blue component of the new BgraColor structure.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new BgraColor structure from the specified components with alpha fully opaque.
            </summary>
            <param name="r">The red component of the new BgraColor structure.</param>
            <param name="g">The green component of the new BgraColor structure.</param>
            <param name="b">The blue component of the new BgraColor structure.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new BgraColor structure from the specified components.
            </summary>
            <param name="color">The values to copy into this new BgraColor structure.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.#ctor(System.Byte,System.Drawing.Color)">
            <summary>
            Constructs a new BgraColor structure from the specified components, replacing alpha with the given value.
            </summary>
            <param name="alpha">The new alpha component.</param>
            <param name="baseColor">The BGR values to copy into this new BgraColor structure.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.#ctor(System.Byte,System.Drawing.BgraColor)">
            <summary>
            Constructs a new BgraColor structure from the specified components, replacing alpha with the given value.
            </summary>
            <param name="alpha">The new alpha component.</param>
            <param name="baseColor">The BGR values to copy into this new BgraColor structure.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.#ctor(System.Int32)">
            <summary>
            Constructs a new BgraColor structure from the specified components.
            </summary>
            <param name="argb">The ARGB integer that represents the color.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.ToArgb">
            <summary>
            Converts this color to an ARGB integer representation with 8 bits per channel.
            </summary>
            <returns>A <see cref="T:System.Int32"/> that represents this instance.</returns>
        </member>
        <member name="M:System.Drawing.BgraColor.ToUInt">
            <summary>
            Converts this color to an ARGB unsigned integer representation with 8 bits per channel.
            </summary>
            <returns>A <see cref="T:System.UInt32"/> that represents this instance.</returns>
        </member>
        <member name="M:System.Drawing.BgraColor.FromPointer(System.Byte*,System.Int32)">
            <summary>
            Gets a BgraColor structure from the specified pointer to a Bgra color.
            </summary>
            <param name="ptr">The pointer to the structure.</param>
            <param name="componentCount">The number of colors represented.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.FromPointer(System.IntPtr,System.Int32)">
            <summary>
            Gets a BgraColor structure from the specified pointer to a Bgra color.
            </summary>
            <param name="pointer">The pointer to the structure.</param>
            <param name="componentCount">The number of colors represented.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.SetColor(System.IntPtr,System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the BgraColor structure pointed to by the pointer to the specified Bgra color.
            </summary>
            <param name="pointer">The pointer to the structure.</param>
            <param name="componentCount">The number of colors represented.</param>
            <param name="targetColor">The target color value to set it to.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.SetColor(System.IntPtr,System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the BgraColor structure pointed to by the pointer to the specified Bgra color.
            </summary>
            <param name="pointer">The pointer to the structure.</param>
            <param name="componentCount">The number of colors represented.</param>
            <param name="targetColor">The target color value to set it to.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.SetColor(System.Byte*,System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the BgraColor structure pointed to by the pointer to the specified Bgra color.
            </summary>
            <param name="pointer">The pointer to the structure.</param>
            <param name="componentCount">The number of colors represented.</param>
            <param name="targetColor">The target color value to set it to.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.SetColor(System.Byte*,System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the BgraColor structure pointed to by the pointer to the specified Bgra color.
            </summary>
            <param name="pointer">The pointer to the structure.</param>
            <param name="componentCount">The number of colors represented.</param>
            <param name="targetColor">The target color value to set it to.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.SetColor(System.Byte*,System.Int32,System.Byte*)">
            <summary>
            Sets the BgraColor structure pointed to by the pointer to the specified Bgra color.
            </summary>
            <param name="ptr">The pointer to the structure.</param>
            <param name="componentCount">The number of colors represented.</param>
            <param name="targetPtr">A pointer to the target color value to set it to.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.SetColor(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Sets the BgraColor structure pointed to by the pointer to the specified Bgra color.
            </summary>
            <param name="pointer">The pointer to the structure.</param>
            <param name="componentCount">The number of colors represented.</param>
            <param name="targetColor">A pointer to the target color value to set it to.</param>
        </member>
        <member name="M:System.Drawing.BgraColor.op_Equality(System.Drawing.BgraColor,System.Drawing.BgraColor)">
            <summary>
            Compares the specified BgraColor structures for equality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is equal to right; false otherwise.</returns>
        </member>
        <member name="M:System.Drawing.BgraColor.op_Inequality(System.Drawing.BgraColor,System.Drawing.BgraColor)">
            <summary>
            Compares the specified BgraColor structures for inequality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is not equal to right; false otherwise.</returns>
        </member>
        <member name="M:System.Drawing.BgraColor.op_Explicit(System.Drawing.Color)~System.Drawing.BgraColor">
            <summary>
            Converts the specified System.Drawing.Color to a BgraColor structure.
            </summary>
            <param name="color">The System.Drawing.Color to convert.</param>
            <returns>A new BgraColor structure containing the converted components.</returns>
        </member>
        <member name="M:System.Drawing.BgraColor.op_Explicit(System.Drawing.BgraColor)~System.Drawing.Color">
            <summary>
            Converts the specified BgraColor to a System.Drawing.Color structure.
            </summary>
            <param name="color">The BgraColor to convert.</param>
            <returns>A new System.Drawing.Color structure containing the converted components.</returns>
        </member>
        <member name="M:System.Drawing.BgraColor.Equals(System.Object)">
            <summary>
            Compares whether this BgraColor structure is equal to the specified object.
            </summary>
            <param name="obj">An object to compare to.</param>
            <returns>True obj is a BgraColor structure with the same components as this BgraColor; false otherwise.</returns>
        </member>
        <member name="M:System.Drawing.BgraColor.GetHashCode">
            <summary>
            Calculates the hash code for this BgraColor structure.
            </summary>
            <returns>A System.Int32 containing the hashcode of this BgraColor structure.</returns>
        </member>
        <member name="M:System.Drawing.BgraColor.ToString">
            <summary>
            Creates a System.String that describes this BgraColor structure.
            </summary>
            <returns>A System.String that describes this BgraColor structure.</returns>
        </member>
        <member name="M:System.Drawing.BgraColor.Equals(System.Drawing.BgraColor)">
            <summary>
            Compares whether this BgraColor structure is equal to the specified BgraColor.
            </summary>
            <param name="other">The BgraColor structure to compare to.</param>
            <returns>True if both BgraColor structures contain the same components; false otherwise.</returns>
        </member>
        <member name="T:System.Drawing.Color4">
            <summary>
            Represents a color with 4 floating-point components (R, G, B, A).
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Components">
            <summary>
            The RGBA components of the Color4 struct, use for vectorized calculations.
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Empty">
            <summary>
            Empty transparent color (ARGB: 0, 0, 0, 0)
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Transparent">
            <summary>
            Transparent color (ARGB: 0, 255, 255, 255)
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.AliceBlue">
            <summary>
            RGB: 240, 248, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.AntiqueWhite">
            <summary>
            RGB: 250, 235, 215
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.AquaMarine">
            <summary>
            RGB: 127, 255, 212
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Azure">
            <summary>
            RGB: 240, 255, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Beige">
            <summary>
            RGB: 245, 245, 220
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Bisque">
            <summary>
            RGB: 255, 228, 196
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Black">
            <summary>
            RGB: 0, 0, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.BlanchedAlmond">
            <summary>
            RGB: 255, 235, 205
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Blue">
            <summary>
            RGB: 0, 0, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.BlueViolet">
            <summary>
            RGB: 138, 43, 226
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Brown">
            <summary>
            RGB: 165, 42, 42
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.BurlyWood">
            <summary>
            RGB: 222, 184, 135
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.CadetBlue">
            <summary>
            RGB: 95, 158, 160
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Chartreuse">
            <summary>
            RGB: 127, 255, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Chocolate">
            <summary>
            RGB: 210, 105, 30
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Coral">
            <summary>
            RGB: 255, 127, 80
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.CornFlowerBlue">
            <summary>
            RGB: 100, 149, 237
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Cornsilk">
            <summary>
            RGB: 255, 248, 220
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Crimson">
            <summary>
            RGB: 220, 20, 60
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Cyan">
            <summary>
            RGB: 0, 255, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkBlue">
            <summary>
            RGB: 0, 0, 139
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkCyan">
            <summary>
            RGB: 0, 139, 139
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkGoldenRod">
            <summary>
            RGB: 184, 134, 11
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkGray">
            <summary>
            RGB: 169, 169, 169
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkGreen">
            <summary>
            RGB: 0, 100, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkKhaki">
            <summary>
            RGB: 189, 183, 107
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkMagenta">
            <summary>
            RGB: 139, 0, 139
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkOliveGreen">
            <summary>
            RGB: 85, 107, 47
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkOrange">
            <summary>
            RGB: 255, 140, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkOrchid">
            <summary>
            RGB: 153, 50, 204
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkRed">
            <summary>
            RGB: 139, 0, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkSalmon">
            <summary>
            RGB: 233, 150, 122
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkSeaGreen">
            <summary>
            RGB: 143, 188, 139
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkSlateBlue">
            <summary>
            RGB: 72, 61, 139
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkSlateGray">
            <summary>
            RGB: 47, 79, 79
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkTurquoise">
            <summary>
            RGB: 0, 206, 209
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DarkViolet">
            <summary>
            RGB: 148, 0, 211
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DeepPink">
            <summary>
            RGB: 255, 20, 147
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DeepSkyBlue">
            <summary>
            RGB: 0, 191, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DimGray">
            <summary>
            RGB: 105, 105, 105
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.DodgerBlue">
            <summary>
            RGB: 30, 144, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.FireBrick">
            <summary>
            RGB: 178, 34, 34
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.FloralWhite">
            <summary>
            RGB: 255, 250, 240
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.ForestGreen">
            <summary>
            RGB: 34, 139, 34
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Fuchsia">
            <summary>
            RGB: 255, 0, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Gainsboro">
            <summary>
            RGB: 220, 220, 220
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.GhostWhite">
            <summary>
            RGB: 248, 248, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Gold">
            <summary>
            RGB: 255, 215, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.GoldenRod">
            <summary>
            RGB: 218, 165, 32
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Gray">
            <summary>
            RGB: 128, 128, 128
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Green">
            <summary>
            RGB: 0, 128, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.GreenYellow">
            <summary>
            RGB: 173, 255, 47
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.HoneyDew">
            <summary>
            RGB: 240, 255, 240
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.HotPink">
            <summary>
            RGB: 255, 105, 180
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.IndianRed">
            <summary>
            RGB: 205, 92, 92
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Indigo">
            <summary>
            RGB: 75, 0, 130
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Ivory">
            <summary>
            RGB: 255, 255, 240
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Khaki">
            <summary>
            RGB: 240, 230, 140
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Lavender">
            <summary>
            RGB: 230, 230, 250
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LavenderBlush">
            <summary>
            RGB: 255, 240, 245
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LawnGreen">
            <summary>
            RGB: 124, 252, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LemonChiffon">
            <summary>
            RGB: 255, 250, 205
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightBlue">
            <summary>
            RGB: 173, 216, 230
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightCoral">
            <summary>
            RGB: 240, 128, 128
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightCyan">
            <summary>
            RGB: 224, 255, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightGoldenRodYellow">
            <summary>
            RGB: 250, 250, 210
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightGray">
            <summary>
            RGB: 211, 211, 211
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightGreen">
            <summary>
            RGB: 144, 238, 144
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightPink">
            <summary>
            RGB: 255, 182, 193
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightSalmon">
            <summary>
            RGB: 255, 160, 122
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightSeaGreen">
            <summary>
            RGB: 32, 178, 170
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightSkyBlue">
            <summary>
            RGB: 135, 206, 250
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightSlateGray">
            <summary>
            RGB: 119, 136, 153
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightSteelBlue">
            <summary>
            RGB: 176, 196, 222
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LightYellow">
            <summary>
            RGB: 255, 255, 224
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Lime">
            <summary>
            RGB: 0, 255, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.LimeGreen">
            <summary>
            RGB: 50, 205, 50
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Linen">
            <summary>
            RGB: 250, 240, 230
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Magenta">
            <summary>
            RGB: 255, 0, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Maroon">
            <summary>
            RGB: 128, 0, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MediumAquaMarine">
            <summary>
            RGB: 102, 205, 170
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MediumBlue">
            <summary>
            RGB: 0, 0, 205
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MediumOrchid">
            <summary>
            RGB: 186, 85, 211
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MediumPurple">
            <summary>
            RGB: 147, 112, 219
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MediumSeaGreen">
            <summary>
            RGB: 60, 179, 113
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MediumSlateBlue">
            <summary>
            RGB: 123, 104, 238
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MediumSpringGreen">
            <summary>
            RGB: 0, 250, 154
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MediumTurquoise">
            <summary>
            RGB: 72, 209, 204
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MediumVioletRed">
            <summary>
            RGB: 199, 21, 133
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MidnightBlue">
            <summary>
            RGB: 25, 25, 112
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MintCream">
            <summary>
            RGB: 245, 255, 250
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.MistyRose">
            <summary>
            RGB: 255, 228, 225
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Moccasin">
            <summary>
            RGB: 255, 228, 181
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.NavajoWhite">
            <summary>
            RGB: 255, 222, 173
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.NavyBlue">
            <summary>
            RGB: 0, 0, 128
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.OldLace">
            <summary>
            RGB: 253, 245, 230
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Olive">
            <summary>
            RGB: 128, 128, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.OliveDrab">
            <summary>
            RGB: 107, 142, 35
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Orange">
            <summary>
            RGB: 255, 165, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.OrangeRed">
            <summary>
            RGB: 255, 69, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Orchid">
            <summary>
            RGB: 218, 112, 214
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.PaleGoldenRod">
            <summary>
            RGB: 250, 240, 230
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.PaleGreen">
            <summary>
            RGB: 152, 251, 152
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.PaleTurquoise">
            <summary>
            RGB: 175, 238, 238
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.PaleVioletRed">
            <summary>
            RGB: 219, 112, 147
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.PapayaWhip">
            <summary>
            RGB: 255, 239, 213
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.PeachPuff">
            <summary>
            RGB: 255, 218, 185
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Peru">
            <summary>
            RGB: 205, 133, 65
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Pink">
            <summary>
            RGB: 255, 192, 203
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Plum">
            <summary>
            RGB: 221, 160, 221
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.PowderBlue">
            <summary>
            RGB: 176, 224, 230
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Purple">
            <summary>
            RGB: 128, 0, 128
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Red">
            <summary>
            RGB: 255, 0, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.RosyBrown">
            <summary>
            RGB: 188, 143, 143
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.RoyalBlue">
            <summary>
            RGB: 65, 105, 225
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.SaddleBrown">
            <summary>
            RGB: 139, 69, 19
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Salmon">
            <summary>
            RGB: 250, 128, 114
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.SandyBrown">
            <summary>
            RGB: 244, 164, 96
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.SeaGreen">
            <summary>
            RGB: 46, 139, 87
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.SeaShell">
            <summary>
            RGB: 255, 245, 238
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Sienna">
            <summary>
            RGB: 160, 82, 45
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Silver">
            <summary>
            RGB: 192, 192, 192
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.SkyBlue">
            <summary>
            RGB: 135, 206, 235
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.SlateBlue">
            <summary>
            RGB: 106, 90, 205
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.SlateGray">
            <summary>
            RGB: 112, 128, 144
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Snow">
            <summary>
            RGB: 255, 250, 250
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.SpringGreen">
            <summary>
            RGB: 0, 255, 127
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.SteelBlue">
            <summary>
            RGB: 70, 130, 180
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Tan">
            <summary>
            RGB: 210, 180, 140
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Teal">
            <summary>
            RGB: 0, 128, 128
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Thistle">
            <summary>
            RGB: 216, 191, 216
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Tomato">
            <summary>
            RGB: 255, 99, 71
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Turquoise">
            <summary>
            RGB: 64, 224, 208
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Violet">
            <summary>
            RGB: 238, 130, 238
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Wheat">
            <summary>
            RGB: 245, 222, 179
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.White">
            <summary>
            RGB: 255, 255, 255
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.WhiteSmoke">
            <summary>
            RGB: 245, 245, 245
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.Yellow">
            <summary>
            RGB: 255, 255, 0
            </summary>
        </member>
        <member name="F:System.Drawing.Color4.YellowGreen">
            <summary>
            RGB: 154, 205, 50
            </summary>
        </member>
        <member name="P:System.Drawing.Color4.Item(System.Int32)">
            <summary>
            Gets the component specified by the index.
            </summary>
            <param name="index">0 for R, 1 for G, 2 for B, 3 for A.</param>
        </member>
        <member name="P:System.Drawing.Color4.R">
            <summary>
            The red component of this Color4 structure (0 to 1).
            </summary>
        </member>
        <member name="P:System.Drawing.Color4.G">
            <summary>
            The green component of this Color4 structure (0 to 1).
            </summary>
        </member>
        <member name="P:System.Drawing.Color4.B">
            <summary>
            The blue component of this Color4 structure (0 to 1).
            </summary>
        </member>
        <member name="P:System.Drawing.Color4.A">
            <summary>
            The alpha component of this Color4 structure (0 to 1).
            </summary>
        </member>
        <member name="M:System.Drawing.Color4.#ctor(System.Numerics.Vector4)">
            <summary>
            Constructs a new Color4 structure directly from the specified RGBA components.
            </summary>
        </member>
        <member name="M:System.Drawing.Color4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color4 structure from the specified components.
            </summary>
            <param name="a">The alpha component of the new Color4 structure.</param>
            <param name="r">The red component of the new Color4 structure.</param>
            <param name="g">The green component of the new Color4 structure.</param>
            <param name="b">The blue component of the new Color4 structure.</param>
        </member>
        <member name="M:System.Drawing.Color4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new Color4 structure from the specified components.
            </summary>
            <param name="a">The alpha component of the new Color4 structure.</param>
            <param name="r">The red component of the new Color4 structure.</param>
            <param name="g">The green component of the new Color4 structure.</param>
            <param name="b">The blue component of the new Color4 structure.</param>
        </member>
        <member name="M:System.Drawing.Color4.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new Color4 structure from the specified components with alpha fully opaque.
            </summary>
            <param name="r">The red component of the new Color4 structure.</param>
            <param name="g">The green component of the new Color4 structure.</param>
            <param name="b">The blue component of the new Color4 structure.</param>
        </member>
        <member name="M:System.Drawing.Color4.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color4 structure from the specified components with alpha fully opaque.
            </summary>
            <param name="r">The red component of the new Color4 structure.</param>
            <param name="g">The green component of the new Color4 structure.</param>
            <param name="b">The blue component of the new Color4 structure.</param>
        </member>
        <member name="M:System.Drawing.Color4.#ctor(System.Single,System.Drawing.Color4)">
            <summary>
            Constructs a new Color4 structure from the specified components, replacing alpha with the given value.
            </summary>
            <param name="alpha">The new alpha component.</param>
            <param name="baseColor">The RGB values to copy into this new Color4 structure.</param>
        </member>
        <member name="M:System.Drawing.Color4.#ctor(System.Int32)">
            <summary>
            Constructs a new Color4 structure from the specified components.
            </summary>
            <param name="argb">The ARGB integer that represents the color.</param>
        </member>
        <member name="M:System.Drawing.Color4.ToArgb">
            <summary>
            Converts this color to an integer representation with 8 bits per channel.
            </summary>
            <returns>A <see cref="T:System.Int32"/> that represents this instance.</returns>
        </member>
        <member name="M:System.Drawing.Color4.op_Equality(System.Drawing.Color4,System.Drawing.Color4)">
            <summary>
            Compares the specified Color4 structures for equality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is equal to right; false otherwise.</returns>
        </member>
        <member name="M:System.Drawing.Color4.op_Inequality(System.Drawing.Color4,System.Drawing.Color4)">
            <summary>
            Compares the specified Color4 structures for inequality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is not equal to right; false otherwise.</returns>
        </member>
        <member name="M:System.Drawing.Color4.op_Explicit(System.Drawing.Color)~System.Drawing.Color4">
            <summary>
            Converts the specified System.Drawing.Color to a Color4 structure.
            </summary>
            <param name="color">The System.Drawing.Color to convert.</param>
            <returns>A new Color4 structure containing the converted components.</returns>
        </member>
        <member name="M:System.Drawing.Color4.op_Explicit(System.Drawing.Color4)~System.Drawing.Color">
            <summary>
            Converts the specified Color4 to a System.Drawing.Color structure.
            </summary>
            <param name="color">The Color4 to convert.</param>
            <returns>A new System.Drawing.Color structure containing the converted components.</returns>
        </member>
        <member name="M:System.Drawing.Color4.op_Implicit(System.Numerics.Vector4)~System.Drawing.Color4">
            <summary>
            Converts the specified Vector4 to a Color4 structure.
            </summary>
            <param name="components">The Vector4 to convert.</param>
        </member>
        <member name="M:System.Drawing.Color4.op_Implicit(System.Drawing.Color4)~System.Numerics.Vector4">
            <summary>
            Converts the specified Color4 to a Vector4 structure.
            </summary>
            <param name="color">The Color4 to convert.</param>
        </member>
        <member name="M:System.Drawing.Color4.op_Explicit(System.Drawing.BgraColor)~System.Drawing.Color4">
            <summary>
            Converts the specified BgraColor to a Color4 structure.
            </summary>
            <param name="color">The BgraColor to convert.</param>
            <returns>A new Color4 structure containing the converted components.</returns>
        </member>
        <member name="M:System.Drawing.Color4.op_Explicit(System.Drawing.Color4)~System.Drawing.BgraColor">
            <summary>
            Converts the specified Color4 to a BgraColor structure.
            </summary>
            <param name="color">The Color4 to convert.</param>
            <returns>A new BgraColor structure containing the converted components.</returns>
        </member>
        <member name="M:System.Drawing.Color4.Clamp(System.Single)">
            <summary>
            Clamps the value to the range [0, 1].
            </summary>
            <param name="value">The value to clamp.</param>
        </member>
        <member name="M:System.Drawing.Color4.Equals(System.Object)">
            <summary>
            Compares whether this Color4 structure is equal to the specified object.
            </summary>
            <param name="obj">An object to compare to.</param>
            <returns>True obj is a Color4 structure with the same components as this Color4; false otherwise.</returns>
        </member>
        <member name="M:System.Drawing.Color4.GetHashCode">
            <summary>
            Calculates the hash code for this Color4 structure.
            </summary>
            <returns>A System.Int32 containing the hashcode of this Color4 structure.</returns>
        </member>
        <member name="M:System.Drawing.Color4.ToString">
            <summary>
            Creates a System.String that describes this Color4 structure.
            </summary>
            <returns>A System.String that describes this Color4 structure.</returns>
        </member>
        <member name="M:System.Drawing.Color4.Equals(System.Drawing.Color4)">
            <summary>
            Compares whether this Color4 structure is equal to the specified Color4.
            </summary>
            <param name="other">The Color4 structure to compare to.</param>
            <returns>True if both Color4 structures contain the same components; false otherwise.</returns>
        </member>
        <member name="T:System.Drawing.FourierWorker">
            <summary>
            Represents the fourier transformation of an image.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.TargetWidth">
            <summary>
            The width of the image in pixels.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.TargetHeight">
            <summary>
            The height of the image in pixels.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.FourierWidth">
            <summary>
            The respective power-of-two width of this image.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.FourierHeight">
            <summary>
            The respective power-of-two height of this image.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.FourierPixelCount">
            <summary>
            The respective power-of-two size of this image.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.FourierPixelComponentCount">
            <summary>
            The respective power-of-two size of this image.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.ComponentCount">
            <summary>
            The number of components or channels per pixel (Depth / 8).
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.TargetPixelCount">
            <summary>
            The number of pixels in the image (Width * Height).
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.TargetPixelComponentCount">
            <summary>
            The total number of components or channels (PixelCount * ComponentCount).
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.OriginalMax">
            <summary>
            The maximum component value found in the original image.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.NormalizationCap">
            <summary>
            Gets or sets the normalization cap to use. By default, it is equal to OriginalMax.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.TargetSize">
            <summary>
            The size of the tagret bitmap.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.FourierSize">
            <summary>
            The respective power-of-two size of this image.
            </summary>
        </member>
        <member name="F:System.Drawing.FourierWorker.Tag">
            <summary>
            For recreational purposes.
            </summary>
        </member>
        <member name="P:System.Drawing.FourierWorker.Item(System.Int32,System.Int32)">
            <summary>
            Gets the specified value.
            </summary>
            <param name="component">The component index (BGRA).</param>
            <param name="index">The pixel index. Index = Y * FourierWidth + X.</param>
        </member>
        <member name="P:System.Drawing.FourierWorker.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the specified value.
            </summary>
            <param name="component">The component index (BGRA).</param>
            <param name="x">The X-coordinate of the value.</param>
            <param name="y">The Y-coordinate of the value.</param>
        </member>
        <member name="P:System.Drawing.FourierWorker.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:System.Drawing.FourierWorker.#ctor(System.Drawing.Bitmap,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Calculates the fast fourier transform of the image.
            </summary>
            <param name="image">The image to get calculate the FFT from.</param>
            <param name="shiftAxes">Whether to perform FFTShift on the Fourier image.</param>
            <param name="ignoreAlpha">Whether to ignore the alpha component of the image (if it is 32-bit).</param>
            <param name="disposeImage">Whether to dispose the image after use.</param>
            <param name="targetWidth">The height to resize the kernel to, or -1 to leave kernel same width. Can only be larger than the kernel width.</param>
            <param name="targetHeight">The height to resize the kernel to, or -1 to leave kernel same height. Can only be larger than the kernel height.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.#ctor(System.Drawing.PixelWorker,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Calculates the fast fourier transform of the image.
            </summary>
            <param name="image">The image to get calculate the FFT from.</param>
            <param name="shiftAxes">Whether to perform FFTShift on the Fourier image.</param>
            <param name="ignoreAlpha">Whether to ignore the alpha component of the image (if it is 32-bit).</param>
            <param name="disposeImage">Whether to dispose the image after use.</param>
            <param name="targetWidth">The height to resize the kernel to, or -1 to leave kernel same width. Can only be larger than the kernel width.</param>
            <param name="targetHeight">The height to resize the kernel to, or -1 to leave kernel same height. Can only be larger than the kernel height.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.#ctor(System.Single[][],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Calculates the FFT of a kernel. No normalization is performed on the kernel.
            </summary>
            <param name="kernel">The 2D kernel to calculate the FFT from. The first index is the X-coordinate, the second index is the Y-coordinate.
            All columns must be of equal length.</param>
            <param name="shiftAxes">Whether to perform FFTShift on the Fourier image.</param>
            <param name="targetWidth">The height to resize the kernel to, or -1 to leave kernel same width. Can only be larger than the kernel width.</param>
            <param name="targetHeight">The height to resize the kernel to, or -1 to leave kernel same height. Can only be larger than the kernel height.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.#ctor(System.Single[][][],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Calculates the FFT of a kernel. No normalization is performed on the kernel.
            </summary>
            <param name="kernel">An array of 2D kernels to calculate the FFT from.
            The first index is the component index, the second index is the X-coordinate, the third index is the Y-coordinate.
            All columns must be of equal length.</param>
            <param name="shiftAxes">Whether to perform FFTShift on the Fourier image.</param>
            <param name="targetWidth">The height to resize the kernel to, or -1 to leave kernel same width. If it's smaller than the kernel width, it is ignored.</param>
            <param name="targetHeight">The height to resize the kernel to, or -1 to leave kernel same height. If it's smaller than the kernel width, it is ignored.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.#ctor(System.Drawing.FourierWorker)">
            <summary>
            Copies the specified image into a new instance.
            </summary>
            <param name="image">The Fouurier image to copy.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.AddWith(System.Drawing.FourierWorker)">
            <summary>
            Transforms this image by adding it with the specified kernel.
            </summary>
            <param name="kernel">The image to add with. If the kernel has one channel, it will be added with all channels of this image, else the corresponding channels will be added.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.SubtractFrom(System.Drawing.FourierWorker)">
            <summary>
            Transforms this image by subtracting the specified filter from it.
            </summary>
            <param name="kernel">The filter to subtract from this image. If the filter has one channel, it will be subtracted from all channels of this image, else the corresponding channels will be subtracted.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.MultiplyWith(System.Drawing.FourierWorker)">
            <summary>
            Transforms this image by multiplying it element-wise with the specified kernel.
            </summary>
            <param name="kernel">The kernel to multiply with. If the kernel has one channel, it will be multiplied with all channels of this image, else the corresponding channels will be multiplied.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.DivideBy(System.Drawing.FourierWorker)">
            <summary>
            Transforms this image by dividing it element-wise with the specified kernel.
            </summary>
            <param name="kernel">The kernel to divide by. If the kernel has one channel, it will be divided from all channels of this image, else the corresponding channels will be divided.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.ApplyFunctionToAllValues(System.Func{System.Numerics.ComplexF,System.Numerics.ComplexF})">
            <summary>
            Applies the specified function to all the values in the image.
            </summary>
            <param name="function">The function to apply. The parameter is the value, and the return value is the new corresponding value.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.ApplyFunctionToAllValues(System.Func{System.Numerics.ComplexF,System.Drawing.Point,System.Numerics.ComplexF})">
            <summary>
            Applies the specified function to all the values in the image.
            </summary>
            <param name="function">The function to apply. The first parameter is the value, the second parameter is the coordinate of the point in the image, and the return value is the new corresponding value.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.ConvertToBitmapInPlace">
            <summary>
            Performs Fourier inverse on the image in place. If you need to retain the Fourier image, copy it first.
            </summary>
        </member>
        <member name="M:System.Drawing.FourierWorker.GenerateMagnitudePlot(System.Boolean)">
            <summary>
            Generates a plot of the magnitudes of the complex values of the Fourier image.
            </summary>
            <param name="ignoreAlpha">If true, the alpha channel is ignored. If false, the image might end up transparent.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.GeneratePhasePlot(System.Boolean)">
            <summary>
            Generates a plot of the phases of the complex values of the Fourier image.
            </summary>
            <param name="ignoreAlpha">If true, the alpha channel is ignored. If false, the image might end up transparent.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.Clone">
            <summary>
            Returns a deep-clone copy of this image.
            </summary>
        </member>
        <member name="M:System.Drawing.FourierWorker.FFT">
            <summary>
            Computes an in-place complex-to-complex 2D FFT.
            </summary>
        </member>
        <member name="M:System.Drawing.FourierWorker.InverseFFT">
            <summary>
            Computes an in-place complex-to-complex inverse 2D FFT.
            </summary>
        </member>
        <member name="M:System.Drawing.FourierWorker.FFT(System.Boolean)">
            <summary>
            Computes an in-place complex-to-complex 2D FFT.
            </summary>
            <param name="forward">Whether to transform forward or backward.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.FFTShift">
            <summary>
            Performs a fourier shift on the image. Two fourier shifts cancel each other out.
            </summary>
        </member>
        <member name="M:System.Drawing.FourierWorker.FFTShift(System.Numerics.ComplexF[],System.Boolean)">
            <summary>
            Performs a fourier shift on the specified values.
            </summary>
            <param name="values">The values to shift.</param>
            <param name="forward">True for fftshift, false for inverse fftshift.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.FFT(System.Numerics.ComplexF[],System.Boolean,System.Boolean)">
            <summary>
            Computes an in-place 1D fourier transform of the specified values.
            </summary>
            <param name="values">An array of the values to transform.</param>
            <param name="forward">True for FFT, false for inverse FFT.</param>
            <param name="truncatePadding">Whether to trim trailing 0s.</param>
        </member>
        <member name="M:System.Drawing.FourierWorker.FFT(System.Numerics.ComplexF[],System.Int64,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Computes an in-place complex-to-complex FFT.
            </summary>
        </member>
        <member name="M:System.Drawing.FourierWorker.Finalize">
            <summary>
            Disposes of the resources used by this image.
            </summary>
        </member>
        <member name="M:System.Drawing.FourierWorker.Dispose">
            <summary>
            Disposes of the resources used by this image.
            </summary>
        </member>
        <member name="T:System.Drawing.TGAFormat">
            <summary>
            The Targa format of the file.
            </summary>
        </member>
        <member name="F:System.Drawing.TGAFormat.UNKNOWN">
            <summary>
            Unknown Targa Image format.
            </summary>
        </member>
        <member name="F:System.Drawing.TGAFormat.ORIGINAL_TGA">
            <summary>
            Original Targa Image format.
            </summary>
            <remarks>Targa Image does not have a Signature of ""TRUEVISION-XFILE"".</remarks>
        </member>
        <member name="F:System.Drawing.TGAFormat.NEW_TGA">
            <summary>
            New Targa Image format
            </summary>
            <remarks>Targa Image has a TargaFooter with a Signature of ""TRUEVISION-XFILE"".</remarks>
        </member>
        <member name="T:System.Drawing.ColorMapType">
            <summary>
            Indicates the type of color map, if any, included with the image file. 
            </summary>
        </member>
        <member name="F:System.Drawing.ColorMapType.NO_COLOR_MAP">
            <summary>
            No color map was included in the file.
            </summary>
        </member>
        <member name="F:System.Drawing.ColorMapType.COLOR_MAP_INCLUDED">
            <summary>
            Color map was included in the file.
            </summary>
        </member>
        <member name="T:System.Drawing.ImageType">
            <summary>
            The type of image read from the file.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageType.NO_IMAGE_DATA">
            <summary>
            No image data was found in file.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageType.UNCOMPRESSED_COLOR_MAPPED">
            <summary>
            Image is an uncompressed, indexed color-mapped image.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageType.UNCOMPRESSED_TRUE_COLOR">
            <summary>
            Image is an uncompressed, RGB image.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageType.UNCOMPRESSED_BLACK_AND_WHITE">
            <summary>
            Image is an uncompressed, Greyscale image.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageType.RUN_LENGTH_ENCODED_COLOR_MAPPED">
            <summary>
            Image is a compressed, indexed color-mapped image.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageType.RUN_LENGTH_ENCODED_TRUE_COLOR">
            <summary>
            Image is a compressed, RGB image.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageType.RUN_LENGTH_ENCODED_BLACK_AND_WHITE">
            <summary>
            Image is a compressed, Greyscale image.
            </summary>
        </member>
        <member name="T:System.Drawing.VerticalTransferOrder">
            <summary>
            The top-to-bottom ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="F:System.Drawing.VerticalTransferOrder.UNKNOWN">
            <summary>
            Unknown transfer order.
            </summary>
        </member>
        <member name="F:System.Drawing.VerticalTransferOrder.BOTTOM">
            <summary>
            Transfer order of pixels is from the bottom to top.
            </summary>
        </member>
        <member name="F:System.Drawing.VerticalTransferOrder.TOP">
            <summary>
            Transfer order of pixels is from the top to bottom.
            </summary>
        </member>
        <member name="T:System.Drawing.HorizontalTransferOrder">
            <summary>
            The left-to-right ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="F:System.Drawing.HorizontalTransferOrder.UNKNOWN">
            <summary>
            Unknown transfer order.
            </summary>
        </member>
        <member name="F:System.Drawing.HorizontalTransferOrder.RIGHT">
            <summary>
            Transfer order of pixels is from the right to left.
            </summary>
        </member>
        <member name="F:System.Drawing.HorizontalTransferOrder.LEFT">
            <summary>
            Transfer order of pixels is from the left to right.
            </summary>
        </member>
        <member name="T:System.Drawing.FirstPixelDestination">
            <summary>
            Screen destination of first pixel based on the VerticalTransferOrder and HorizontalTransferOrder.
            </summary>
        </member>
        <member name="F:System.Drawing.FirstPixelDestination.UNKNOWN">
            <summary>
            Unknown first pixel destination.
            </summary>
        </member>
        <member name="F:System.Drawing.FirstPixelDestination.TOP_LEFT">
            <summary>
            First pixel destination is the top-left corner of the image.
            </summary>
        </member>
        <member name="F:System.Drawing.FirstPixelDestination.TOP_RIGHT">
            <summary>
            First pixel destination is the top-right corner of the image.
            </summary>
        </member>
        <member name="F:System.Drawing.FirstPixelDestination.BOTTOM_LEFT">
            <summary>
            First pixel destination is the bottom-left corner of the image.
            </summary>
        </member>
        <member name="F:System.Drawing.FirstPixelDestination.BOTTOM_RIGHT">
            <summary>
            First pixel destination is the bottom-right corner of the image.
            </summary>
        </member>
        <member name="T:System.Drawing.RLEPacketType">
            <summary>
            The RLE packet type used in a RLE compressed image.
            </summary>
        </member>
        <member name="F:System.Drawing.RLEPacketType.RAW">
            <summary>
            A raw RLE packet type.
            </summary>
        </member>
        <member name="F:System.Drawing.RLEPacketType.RUN_LENGTH">
            <summary>
            A run-length RLE packet type.
            </summary>
        </member>
        <member name="T:System.Drawing.TargaImage">
            <summary>
            Reads and loads a Truevision TGA Format image file.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaImage.Header">
            <summary>
            Gets a TargaHeader object that holds the Targa Header information of the loaded file.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaImage.ExtensionArea">
            <summary>
            Gets a TargaExtensionArea object that holds the Targa Extension Area information of the loaded file.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaImage.Footer">
            <summary>
            Gets a TargaExtensionArea object that holds the Targa Footer information of the loaded file.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaImage.Format">
            <summary>
            Gets the Targa format of the loaded file.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaImage.Image">
            <summary>
            Gets a Bitmap representation of the loaded file.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaImage.Thumbnail">
            <summary>
            Gets the thumbnail of the loaded file if there is one in the file.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaImage.Stride">
            <summary>
            Gets the byte offset between the beginning of one scan line and the next. Used when loading the image into the Image Bitmap.
            </summary>
            <remarks>
            The memory allocated for Microsoft Bitmaps must be aligned on a 32bit boundary.
            The stride refers to the number of bytes allocated for one scanline of the bitmap.
            </remarks>
        </member>
        <member name="P:System.Drawing.TargaImage.Padding">
            <summary>
            Gets the number of bytes used to pad each scan line to meet the Stride value. Used when loading the image into the Image Bitmap.
            </summary>
            <remarks>
            The memory allocated for Microsoft Bitmaps must be aligned on a 32bit boundary.
            The stride refers to the number of bytes allocated for one scanline of the bitmap.
            In your loop, you copy the pixels one scanline at a time and take into 
            consideration the amount of padding that occurs due to memory alignment.
            </remarks>
        </member>
        <member name="M:System.Drawing.TargaImage.#ctor">
            <summary>
            Creates a new instance of the TargaImage object.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaImage.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new instance of the TargaImage object with strFileName as the image loaded.
            </summary>
            <param name="targaStream">The stream to load the tga file from.</param>
            <param name="disposeAllButImage">Whether to only keep the image loaded after parsing.</param>
        </member>
        <member name="M:System.Drawing.TargaImage.Finalize">
            <summary>
            Disposes of the image.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaImage.Dispose">
            <summary>
            Disposes all resources used by this instance of the TargaImage class.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaImage.Dispose(System.Boolean)">
            <summary>
            Disposes of the targa components.
            </summary>
            <param name="disposeBitmap">Whether to also dispose the loaded bitmap along with the other resources.</param>
        </member>
        <member name="T:System.Drawing.TargaImage.Utilities">
            <summary>
            Utilities functions used by the TargaImage class.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaImage.Utilities.GetBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Gets an int value representing the subset of bits from a single Byte.
            </summary>
            <param name="b">The Byte used to get the subset of bits from.</param>
            <param name="offset">The offset of bits starting from the right.</param>
            <param name="count">The number of bits to read.</param>
            <returns>
            An int value representing the subset of bits.
            </returns>
            <remarks>
            Given -> b = 00110101 
            A call to GetBits(b, 2, 4)
            GetBits looks at the following bits in the byte -> 00{1101}00
            Returns 1101 as an int (13)
            </remarks>
        </member>
        <member name="M:System.Drawing.TargaImage.Utilities.GetColorFrom2Bytes(System.Byte,System.Byte)">
            <summary>
            Reads ARGB values from the 16 bits of two given Bytes in a 1555 format.
            </summary>
            <param name="one">The first Byte.</param>
            <param name="two">The Second Byte.</param>
            <returns>A System.Drawing.Color with a ARGB values read from the two given Bytes</returns>
            <remarks>
            Gets the ARGB values from the 16 bits in the two bytes based on the below diagram
            |   BYTE 1   |  BYTE 2   |
            | A RRRRR GG | GGG BBBBB |
            </remarks>
        </member>
        <member name="T:System.Drawing.TargaHeader">
            <summary>
            This class holds all of the header properties of a Targa image. 
            This includes the TGA File Header section the ImageID and the Color Map.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaHeader.ImageIDLength">
            <summary>
            Gets the number of bytes contained the ImageIDValue property. The maximum
            number of characters is 255. A value of zero indicates that no ImageIDValue is included with the
            image.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetImageIDLength(System.Byte)">
            <summary>
            Sets the ImageIDLength property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bImageIDLength">The Image ID Length value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.ColorMapType">
            <summary>
            Gets the type of color map (if any) included with the image. There are currently 2
            defined values for this field:
            NO_COLOR_MAP - indicates that no color-map data is included with this image.
            COLOR_MAP_INCLUDED - indicates that a color-map is included with this image.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetColorMapType(System.Drawing.ColorMapType)">
            <summary>
            Sets the ColorMapType property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eColorMapType">One of the ColorMapType enumeration values.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.ImageType">
            <summary>
            Gets one of the ImageType enumeration values indicating the type of Targa image read from the file.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetImageType(System.Drawing.ImageType)">
            <summary>
            Sets the ImageType property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eImageType">One of the ImageType enumeration values.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.ColorMapFirstEntryIndex">
            <summary>
            Gets the index of the first color map entry. ColorMapFirstEntryIndex refers to the starting entry in loading the color map.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetColorMapFirstEntryIndex(System.Int16)">
            <summary>
            Sets the ColorMapFirstEntryIndex property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sColorMapFirstEntryIndex">The First Entry Index value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.ColorMapLength">
            <summary>
            Gets total number of color map entries included.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetColorMapLength(System.Int16)">
            <summary>
            Sets the ColorMapLength property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sColorMapLength">The Color Map Length value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.ColorMapEntrySize">
            <summary>
            Gets the number of bits per entry in the Color Map. Typically 15, 16, 24 or 32-bit values are used.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetColorMapEntrySize(System.Byte)">
            <summary>
            Sets the ColorMapEntrySize property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bColorMapEntrySize">The Color Map Entry Size value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.XOrigin">
            <summary>
            Gets the absolute horizontal coordinate for the lower
            left corner of the image as it is positioned on a display device having
            an origin at the lower left of the screen (e.g., the TARGA series).
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetXOrigin(System.Int16)">
            <summary>
            Sets the XOrigin property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sXOrigin">The X Origin value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.YOrigin">
            <summary>
            These bytes specify the absolute vertical coordinate for the lower left
            corner of the image as it is positioned on a display device having an
            origin at the lower left of the screen (e.g., the TARGA series).
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetYOrigin(System.Int16)">
            <summary>
            Sets the YOrigin property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sYOrigin">The Y Origin value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetWidth(System.Int16)">
            <summary>
            Sets the Width property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sWidth">The Width value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetHeight(System.Int16)">
            <summary>
            Sets the Height property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sHeight">The Height value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.PixelDepth">
            <summary>
            Gets the number of bits per pixel. This number includes
            the Attribute or Alpha channel bits. Common values are 8, 16, 24 and 32.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetPixelDepth(System.Byte)">
            <summary>
            Sets the PixelDepth property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bPixelDepth">The Pixel Depth value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.ImageDescriptor">
            <summary>
            Gets or Sets the ImageDescriptor property. The ImageDescriptor is the byte that holds the 
            Image Origin and Attribute Bits values.
            Available only to objects in the same assembly as TargaHeader.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaHeader.FirstPixelDestination">
            <summary>
            Gets one of the FirstPixelDestination enumeration values specifying the screen destination of first pixel based on VerticalTransferOrder and HorizontalTransferOrder
            </summary>
        </member>
        <member name="P:System.Drawing.TargaHeader.VerticalTransferOrder">
            <summary>
            Gets one of the VerticalTransferOrder enumeration values specifying the top-to-bottom ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetVerticalTransferOrder(System.Drawing.VerticalTransferOrder)">
            <summary>
            Sets the VerticalTransferOrder property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eVerticalTransferOrder">One of the VerticalTransferOrder enumeration values.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.HorizontalTransferOrder">
            <summary>
            Gets one of the HorizontalTransferOrder enumeration values specifying the left-to-right ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetHorizontalTransferOrder(System.Drawing.HorizontalTransferOrder)">
            <summary>
            Sets the HorizontalTransferOrder property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eHorizontalTransferOrder">One of the HorizontalTransferOrder enumeration values.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.AttributeBits">
            <summary>
            Gets the number of attribute bits per pixel.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetAttributeBits(System.Byte)">
            <summary>
            Sets the AttributeBits property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bAttributeBits">The Attribute Bits value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.ImageIDValue">
            <summary>
            Gets identifying information about the image. 
            A value of zero in ImageIDLength indicates that no ImageIDValue is included with the image.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaHeader.SetImageIDValue(System.String)">
            <summary>
            Sets the ImageIDValue property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="strImageIDValue">The Image ID value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaHeader.ColorMap">
            <summary>
            Gets the Color Map of the image, if any. The Color Map is represented by a list of System.Drawing.Color objects.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaHeader.ImageDataOffset">
            <summary>
            Gets the offset from the beginning of the file to the Image Data.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaHeader.BytesPerPixel">
            <summary>
            Gets the number of bytes per pixel.
            </summary>
        </member>
        <member name="T:System.Drawing.TargaFooter">
            <summary>
            Holds Footer infomation read from the image file.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaFooter.ExtensionAreaOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Extension Area. 
            If the ExtensionAreaOffset is zero, no Extension Area exists in the file.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaFooter.SetExtensionAreaOffset(System.Int32)">
            <summary>
            Sets the ExtensionAreaOffset property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="intExtensionAreaOffset">The Extension Area Offset value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaFooter.DeveloperDirectoryOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Developer Area.
            If the DeveloperDirectoryOffset is zero, then the Developer Area does not exist
            </summary>
        </member>
        <member name="M:System.Drawing.TargaFooter.SetDeveloperDirectoryOffset(System.Int32)">
            <summary>
            Sets the DeveloperDirectoryOffset property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="intDeveloperDirectoryOffset">The Developer Directory Offset value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaFooter.Signature">
            <summary>
            This string is formatted exactly as "TRUEVISION-XFILE" (no quotes). If the
            signature is detected, the file is assumed to be a New TGA format and MAY,
            therefore, contain the Developer Area and/or the Extension Areas. If the
            signature is not found, then the file is assumed to be an Original TGA format.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaFooter.SetSignature(System.String)">
            <summary>
            Sets the Signature property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="strSignature">The Signature value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaFooter.ReservedCharacter">
            <summary>
            A New Targa format reserved character "." (period)
            </summary>
        </member>
        <member name="M:System.Drawing.TargaFooter.SetReservedCharacter(System.String)">
            <summary>
            Sets the ReservedCharacter property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="strReservedCharacter">The ReservedCharacter value read from the file.</param>
        </member>
        <member name="M:System.Drawing.TargaFooter.#ctor">
            <summary>
            Creates a new instance of the TargaFooter class.
            </summary>
        </member>
        <member name="T:System.Drawing.TargaExtensionArea">
            <summary>
            This class holds all of the Extension Area properties of the Targa image. If an Extension Area exists in the file.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.ExtensionSize">
            <summary>
            Gets the number of Bytes in the fixed-length portion of the ExtensionArea. 
            For Version 2.0 of the TGA File Format, this number should be set to 495
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetExtensionSize(System.Int32)">
            <summary>
            Sets the ExtensionSize property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intExtensionSize">The Extension Size value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.AuthorName">
            <summary>
            Gets the name of the person who created the image.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetAuthorName(System.String)">
            <summary>
            Sets the AuthorName property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strAuthorName">The Author Name value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.AuthorComments">
            <summary>
            Gets the comments from the author who created the image.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetAuthorComments(System.String)">
            <summary>
            Sets the AuthorComments property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strAuthorComments">The Author Comments value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.DateTimeStamp">
            <summary>
            Gets the date and time that the image was saved.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetDateTimeStamp(System.DateTime)">
            <summary>
            Sets the DateTimeStamp property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="dtDateTimeStamp">The Date Time Stamp value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.JobName">
            <summary>
            Gets the name or id tag which refers to the job with which the image was associated.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetJobName(System.String)">
            <summary>
            Sets the JobName property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strJobName">The Job Name value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.JobTime">
            <summary>
            Gets the job elapsed time when the image was saved.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetJobTime(System.TimeSpan)">
            <summary>
            Sets the JobTime property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="dtJobTime">The Job Time value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.SoftwareID">
            <summary>
            Gets the Software ID. Usually used to determine and record with what program a particular image was created.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetSoftwareID(System.String)">
            <summary>
            Sets the SoftwareID property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strSoftwareID">The Software ID value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.SoftwareVersion">
            <summary>
            Gets the version of software defined by the SoftwareID.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetSoftwareVersion(System.String)">
            <summary>
            Sets the SoftwareVersion property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strSoftwareVersion">The Software Version value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.KeyColor">
            <summary>
            Gets the key color in effect at the time the image is saved.
            The Key Color can be thought of as the "background color" or "transparent color".
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetKeyColor(System.Drawing.Color)">
            <summary>
            Sets the KeyColor property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="cKeyColor">The Key Color value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.PixelAspectRatioNumerator">
            <summary>
            Gets the Pixel Ratio Numerator.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetPixelAspectRatioNumerator(System.Int32)">
            <summary>
            Sets the PixelAspectRatioNumerator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intPixelAspectRatioNumerator">The Pixel Aspect Ratio Numerator value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.PixelAspectRatioDenominator">
            <summary>
            Gets the Pixel Ratio Denominator.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetPixelAspectRatioDenominator(System.Int32)">
            <summary>
            Sets the PixelAspectRatioDenominator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intPixelAspectRatioDenominator">The Pixel Aspect Ratio Denominator value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.PixelAspectRatio">
            <summary>
            Gets the Pixel Aspect Ratio.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.GammaNumerator">
            <summary>
            Gets the Gamma Numerator.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetGammaNumerator(System.Int32)">
            <summary>
            Sets the GammaNumerator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intGammaNumerator">The Gamma Numerator value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.GammaDenominator">
            <summary>
            Gets the Gamma Denominator.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetGammaDenominator(System.Int32)">
            <summary>
            Sets the GammaDenominator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intGammaDenominator">The Gamma Denominator value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.GammaRatio">
            <summary>
            Gets the Gamma Ratio.
            </summary>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.ColorCorrectionOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Color Correction table.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetColorCorrectionOffset(System.Int32)">
            <summary>
            Sets the ColorCorrectionOffset property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intColorCorrectionOffset">The Color Correction Offset value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.PostageStampOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Postage Stamp image data.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetPostageStampOffset(System.Int32)">
            <summary>
            Sets the PostageStampOffset property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intPostageStampOffset">The Postage Stamp Offset value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.ScanLineOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Scan Line table.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetScanLineOffset(System.Int32)">
            <summary>
            Sets the ScanLineOffset property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intScanLineOffset">The Scan Line Offset value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.AttributesType">
            <summary>
            Gets the type of Alpha channel data contained in the file.
            0: No Alpha data included.
            1: Undefined data in the Alpha field, can be ignored
            2: Undefined data in the Alpha field, but should be retained
            3: Useful Alpha channel data is present
            4: Pre-multiplied Alpha (see description below)
            5-127: RESERVED
            128-255: Un-assigned
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.SetAttributesType(System.Int32)">
            <summary>
            Sets the AttributesType property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intAttributesType">The Attributes Type value read from the file.</param>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.ScanLineTable">
            <summary>
            Gets a list of offsets from the beginning of the file that point to the start of the next scan line, 
            in the order that the image was saved 
            </summary>
        </member>
        <member name="P:System.Drawing.TargaExtensionArea.ColorCorrectionTable">
            <summary>
            Gets a list of Colors where each Color value is the desired Color correction for that entry.
            This allows the user to store a correction table for image remapping or LUT driving.
            </summary>
        </member>
        <member name="T:System.Drawing.TargaExtensionArea.Utilities">
            <summary>
            Utilities functions used by the TargaImage class.
            </summary>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.Utilities.GetBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Gets an int value representing the subset of bits from a single Byte.
            </summary>
            <param name="b">The Byte used to get the subset of bits from.</param>
            <param name="offset">The offset of bits starting from the right.</param>
            <param name="count">The number of bits to read.</param>
            <returns>
            An int value representing the subset of bits.
            </returns>
            <remarks>
            Given -> b = 00110101 
            A call to GetBits(b, 2, 4)
            GetBits looks at the following bits in the byte -> 00{1101}00
            Returns 1101 as an int (13)
            </remarks>
        </member>
        <member name="M:System.Drawing.TargaExtensionArea.Utilities.GetColorFrom2Bytes(System.Byte,System.Byte)">
            <summary>
            Reads ARGB values from the 16 bits of two given Bytes in a 1555 format.
            </summary>
            <param name="one">The first Byte.</param>
            <param name="two">The Second Byte.</param>
            <returns>A System.Drawing.Color with a ARGB values read from the two given Bytes</returns>
            <remarks>
            Gets the ARGB values from the 16 bits in the two bytes based on the below diagram
            |   BYTE 1   |  BYTE 2   |
            | A RRRRR GG | GGG BBBBB |
            </remarks>
        </member>
        <member name="T:System.Drawing.MirrorMode">
            <summary>
            Represents a mirror mode.
            </summary>
        </member>
        <member name="F:System.Drawing.MirrorMode.HorizontalMirrorLeft">
            <summary>
            Mirrors the left half of the image horizontally onto the right half of the image.
            </summary>
        </member>
        <member name="F:System.Drawing.MirrorMode.HorizontalMirrorRight">
            <summary>
            Mirrors the right half of the image horizontally onto the left half of the image.
            </summary>
        </member>
        <member name="F:System.Drawing.MirrorMode.VerticalMirrorTop">
            <summary>
            Mirrors the upper half of the image vertically onto the lower half of the image.
            </summary>
        </member>
        <member name="F:System.Drawing.MirrorMode.VerticalMirrorBottom">
            <summary>
            Mirrors the lower half of the image vertically onto the upper half of the image.
            </summary>
        </member>
        <member name="T:System.Drawing.Filter">
            <summary>
            Represents a type of convolution filter to use.
            </summary>
        </member>
        <member name="F:System.Drawing.Filter.GaussianBlur">
            <summary>
            A gaussian blur filter.
            </summary>
        </member>
        <member name="F:System.Drawing.Filter.UnsharpMask">
            <summary>
            An unsharp mask filter.
            </summary>
        </member>
        <member name="F:System.Drawing.Filter.Sharpen">
            <summary>
            A sharpening filter.
            </summary>
        </member>
        <member name="T:System.Drawing.Direction">
            <summary>
            Represents a direction.
            </summary>
        </member>
        <member name="F:System.Drawing.Direction.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:System.Drawing.Direction.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:System.Drawing.Direction.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:System.Drawing.Direction.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="T:System.Drawing.ImageLib">
            <summary>
            An image manipulation library written in C#. BgraColor is faster than Color because it directly maps with the underlying Bitmap representation.
            Only supports 32-bit BGRA, 24-bit BGR and 8-bit grayscale bitmaps.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageLib.TilingAttributes">
            <summary>
            Wraparound tiling attributes.
            </summary>
        </member>
        <member name="F:System.Drawing.ImageLib.ParallelCutoff">
            <summary>
            The loop parallelization cutoff.
            </summary>
        </member>
        <member name="M:System.Drawing.ImageLib.DrawTriangle(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Brush,System.Drawing.Direction)">
            <summary>
            Draws a triangle on the specified canvas.
            </summary>
            <param name="g">The canvas to draw on.</param>
            <param name="bounds">The bounds to draw the triangle inside.</param>
            <param name="brush">The brush to draw with.</param>
            <param name="direction">The direction the triangle is pointing towards.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetTrimBounds(System.Drawing.Bitmap)">
            <summary>
            Returns the size of the bitmap after trimming transparent pixels from each side.
            </summary>
            <param name="source">The bitmap to use as source.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetTrimBounds(System.Drawing.PixelWorker)">
            <summary>
            Returns the size of the bitmap after trimming transparent pixels from each side.
            </summary>
            <param name="source">The PixelWorker to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.LookEqual(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets whether the colors appear as equal (the same or alpha is 0 on both).
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.LookEqual(System.Drawing.BgraColor,System.Drawing.BgraColor)">
            <summary>
            Gets whether the colors appear as equal (the same or alpha is 0 on both).
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Trim(System.Drawing.Bitmap)">
            <summary>
            Trims transparent pixels from each side and returns the result.
            </summary>
            <param name="source">The bitmap to use as source.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Overlay(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Single,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be composited with each other.
            </summary>
            <param name="baseImage">The image to impose on and modify.</param>
            <param name="overlayImage">The image to use as overlay. If it is smaller than the base image, then an error will occur, if it is larger, graphics cropping will occur.</param>
            <param name="opacity">The opacity multiplier of the overlay.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Overlay(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Single,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be composited with each other.
            </summary>
            <param name="baseImage">The image to impose on and modify. WriteChanges() is not called, that's on you.</param>
            <param name="overlayImage">The image to use as overlay. If it is smaller than the base image, than an error will occur, if it is larger, graphics cropping will occur.</param>
            <param name="opacity">The opacity multiplier of the overlay.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Overlay(System.Drawing.PixelWorker,System.Drawing.PixelWorker,System.Single)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be composited with each other.
            </summary>
            <param name="baseImage">The image to impose on and modify. WriteChanges() is not called, that's on you.</param>
            <param name="overlayImage">The image to use as overlay. Its size must be equal to the size of the base image.</param>
            <param name="opacity">The opacity multiplier of the overlay.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Single,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be averaged out, shifted towards with each other depending on the opacity.
            </summary>
            <param name="baseImage">The image to impose on and modify.</param>
            <param name="overlayImage">The image to transition into.</param>
            <param name="opacity">The point in time during the transition.</param>
            <param name="layout">The layout to use if the overlay image is not the same size as the base image.</param>
            <param name="interpolation">The interpolation algorithm to use if the overlay is not the same size.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Single,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be averaged out, shifted towards with each other depending on the opacity.
            </summary>
            <param name="baseImage">The image to impose on and modify. WriteChanges() is not called, that's on you.</param>
            <param name="overlayImage">The image to transition into.</param>
            <param name="opacity">The point in time during the transition.</param>
            <param name="layout">The layout to use if the overlay image is not the same size as the base image.</param>
            <param name="interpolation">The interpolation algorithm to use if the overlay is not the same size.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Drawing.PixelWorker,System.Drawing.PixelWorker,System.Single)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be averaged out, shifted towards with each other depending on the opacity.
            </summary>
            <param name="baseImage">The image to impose on and modify. WriteChanges() is not called, that's on you.</param>
            <param name="overlayImage">The image to transition into. Must be the same size as the base image.</param>
            <param name="opacity">The point in time during the transition.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Single[][],System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be averaged out, shifted towards with each other depending on the opacity.
            </summary>
            <param name="baseImage">The image to impose on and modify.</param>
            <param name="overlayImage">The image to transition into.</param>
            <param name="kernel">A kernel [x][y] of opacities where 0 is 100% base pixel, and 1 is 100% overlay pixel.
            THE KERNEL MUST BE THE SAME SIZE AS THE BASE IMAGE.</param>
            <param name="layout">The layout to use if the overlay image is not the same size as the base image.</param>
            <param name="interpolation">The interpolation algorithm to use if the overlay is not the same size.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Single[][],System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be averaged out, shifted towards with each other depending on the opacity.
            </summary>
            <param name="baseImage">The image to impose on and modify. WriteChanges() is not called, that's on you.</param>
            <param name="overlayImage">The image to transition into.</param>
            <param name="kernel">A kernel [x][y] of opacities where 0 is 100% base pixel, and 1 is 100% overlay pixel.
            THE KERNEL MUST BE THE SAME SIZE AS THE BASE IMAGE.</param>
            <param name="layout">The layout to use if the overlay image is not the same size as the base image.</param>
            <param name="interpolation">The interpolation algorithm to use if the overlay is not the same size.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Drawing.PixelWorker,System.Drawing.PixelWorker,System.Single[][])">
            <summary>
            Blends two images, modifies the base image based on the mix level of the overlay image. The alpha components will be averaged out, shifted towards with each other depending on the opacity.
            </summary>
            <param name="baseImage">The image to impose on and modify. WriteChanges() is not called, that's on you.</param>
            <param name="overlayImage">The image to transition into. Must be the same size as the base image.</param>
            <param name="kernel">A kernel [x][y] of opacities where 0 is 100% base pixel, and 1 is 100% overlay pixel.
            THE KERNEL MUST BE THE SAME SIZE AS THE BASE IMAGE.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeContrast(System.Drawing.Bitmap,System.Single)">
            <summary>
            Adjusts the contrast of an image.
            </summary>
            <param name="image">The image whose contrast to adjust.</param>
            <param name="value">Sets the contrast from 0 (no contrast) upwards. 1 means the image will not be modified.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeContrast(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Adjusts the contrast of an image.
            </summary>
            <param name="source">The image whose contrast to adjust. WriteChanges() is not called, that's on you.</param>
            <param name="value">Sets the contrast from 0 (no contrast) upwards. 1 means the image will not be modified.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeBrightness(System.Drawing.Bitmap,System.Single)">
            <summary>
            Changes the brightness of the specified image.
            </summary>
            <param name="image">The image whose brightness to change.</param>
            <param name="multiplier">The brightness multiplier (0 means black, 1 means brightness is unchanged, larger numbers increase brightness).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeBrightness(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Changes the brightness of the specified image.
            </summary>
            <param name="source">The image whose brightness to change. WriteChanges() is not called, that's on you.</param>
            <param name="multiplier">The brightness multiplier (0 means black, 1 means brightness is unchanged, larger numbers increase brightness).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeBrightnessNormalize(System.Drawing.Bitmap,System.Single)">
            <summary>
            Changes the brightness of the specified image and normalizes before truncation.
            </summary>
            <param name="image">The image whose brightness to change.</param>
            <param name="multiplier">The brightness multiplier (0 means black, 1 means brightness is unchanged, larger numbers increase brightness).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeBrightnessNormalize(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Changes the brightness of the specified image and normalizes before truncation.
            </summary>
            <param name="source">The image whose brightness to change. WriteChanges() is not called, that's on you.</param>
            <param name="multiplier">The brightness multiplier (0 means black, 1 means brightness is unchanged, larger numbers increase brightness).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.RaiseBy(System.Drawing.Bitmap,System.Double)">
            <summary>
            Raises the values of the specified image with the specified exponent.
            </summary>
            <param name="image">The image whose values to raise.</param>
            <param name="exponent">The exponent to raise with.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.RaiseBy(System.Drawing.PixelWorker,System.Double)">
            <summary>
            Raises the values of the specified image with the specified exponent.
            </summary>
            <param name="source">The image whose values to raise. WriteChanges() is not called, that's on you.</param>
            <param name="exponent">The exponent to raise with.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Open(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Dilates then erodes the image at the specified radius.
            </summary>
            <param name="image">The image to open morphologically.</param>
            <param name="radius">The radius to open at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Open(System.Drawing.PixelWorker,System.Int32)">
            <summary>
            Dilates then erodes the image at the specified radius.
            </summary>
            <param name="source">The image to open morphologically. WriteChanges() is not called, that's on you.</param>
            <param name="radius">The radius to open at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Open(System.Drawing.Bitmap,System.Single)">
            <summary>
            Dilates then erodes the image at the specified radius.
            </summary>
            <param name="image">The image to open morphologically.</param>
            <param name="radius">The radius to open at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Open(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Dilates then erodes the image at the specified radius.
            </summary>
            <param name="source">The image to open morphologically. WriteChanges() is not called, that's on you.</param>
            <param name="radius">The radius to open at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Close(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Erodes then dilates the image at the specified radius.
            </summary>
            <param name="image">The image to close morphologically.</param>
            <param name="radius">The radius to close at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Close(System.Drawing.PixelWorker,System.Int32)">
            <summary>
            Erodes then dilates the image at the specified radius.
            </summary>
            <param name="source">The image to close morphologically. WriteChanges() is not called, that's on you.</param>
            <param name="radius">The radius to close at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Close(System.Drawing.Bitmap,System.Single)">
            <summary>
            Erodes then dilates the image at the specified radius.
            </summary>
            <param name="image">The image to close morphologically.</param>
            <param name="radius">The radius to close at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Close(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Erodes then dilates the image at the specified radius.
            </summary>
            <param name="source">The image to close morphologically. WriteChanges() is not called, that's on you.</param>
            <param name="radius">The radius to close at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SaltAndPepperNoise(System.Drawing.Bitmap,System.Double,System.Byte,System.Byte)">
            <summary>
            Adds salt and pepper noise to the specified image.
            </summary>
            <param name="image">The image whose values to add random noise to.</param>
            <param name="frequency">A value between 0 and 1, where 0 indicates no noise is to be added, and 1 indicates noise only is to remain.</param>
            <param name="pepper">The magnitude of the pepper.</param>
            <param name="salt">The magnitude of the salt.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SaltAndPepperNoise(System.Drawing.PixelWorker,System.Double,System.Byte,System.Byte)">
            <summary>
            Adds salt and pepper noise to the specified image.
            </summary>
            <param name="source">The image whose values to add random noise to. WriteChanges is not called, that's on you.</param>
            <param name="frequency">A value between 0 and 1, where 0 indicates no noise is to be added, and 1 indicates noise only is to remain.</param>
            <param name="pepper">The magnitude of the pepper.</param>
            <param name="salt">The magnitude of the salt.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Logarithm(System.Drawing.Bitmap)">
            <summary>
            Applies base e logarithm to the specified image.
            </summary>
            <param name="image">The image to log.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Logarithm(System.Drawing.PixelWorker)">
            <summary>
            Applies base e logarithm to the specified image.
            </summary>
            <param name="source">The image to log. WriteChanges() is not called, that's on you.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Logarithm(System.Drawing.BgraColor)">
            <summary>
            Applies base e logarithm to the specified color.
            </summary>
            <param name="color">The color to log.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Logarithm(System.Drawing.Color)">
            <summary>
            Applies base e logarithm to the specified color.
            </summary>
            <param name="color">The color to log.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AddWith(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Adds the specified image to the bitmap. If the images are not the same size, the second image is stretched to the size of the first one before addition.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="toAdd">The image to add to the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AddWith(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Adds the specified image to the bitmap.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="toAdd">The image to add to the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AddWith(System.Drawing.PixelWorker,System.Drawing.PixelWorker)">
            <summary>
            Adds the specified image to the bitmap.
            </summary>
            <param name="baseImage">The bitmap to overwrite. WriteChanges() is not called, that's on you.</param>
            <param name="toAdd">The image to add to the other one. Its size must be equal to the size of the base image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseAnd(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Boolean,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Applies a bitwise 'and' operation for the specified images.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="mask">The image to mask the other one.</param>
            <param name="ignoreAlpha">If true, alpha is not masked.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseAnd(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Boolean,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Applies a bitwise 'and' operation for the specified images.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="mask">The image to mask the other one.</param>
            <param name="ignoreAlpha">If true, alpha is not masked.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseAnd(System.Drawing.PixelWorker,System.Drawing.PixelWorker,System.Boolean)">
            <summary>
            Applies a bitwise 'and' operation for the specified images.
            </summary>
            <param name="baseImage">The bitmap to overwrite. WriteChanges() is not called, that's on you.</param>
            <param name="mask">The image to mask the other one. Its size must be equal to the size of the base image.</param>
            <param name="ignoreAlpha">If true, alpha is not masked.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseOr(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Applies a bitwise 'or' operation for the specified images.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="mask">The image to mask the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseOr(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Applies a bitwise 'or' operation for the specified images.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="mask">The image to mask the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseOr(System.Drawing.PixelWorker,System.Drawing.PixelWorker)">
            <summary>
            Applies a bitwise 'or' operation for the specified images.
            </summary>
            <param name="baseImage">The bitmap to overwrite. WriteChanges() is not called, that's on you.</param>
            <param name="mask">The image to mask the other one. Its size must be equal to the size of the base image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseXor(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Boolean,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Applies a bitwise 'xor' operation for the specified images.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="mask">The image to mask the other one.</param>
            <param name="ignoreAlpha">If true, alpha is not masked.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseXor(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Boolean,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Applies a bitwise 'xor' operation for the specified images.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="mask">The image to mask the other one.</param>
            <param name="ignoreAlpha">If true, alpha is not masked.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseXor(System.Drawing.PixelWorker,System.Drawing.PixelWorker,System.Boolean)">
            <summary>
            Applies a bitwise 'xor' operation for the specified images.
            </summary>
            <param name="baseImage">The bitmap to overwrite. WriteChanges() is not called, that's on you.</param>
            <param name="mask">The image to mask the other one. Its size must be equal to the size of the base image.</param>
            <param name="ignoreAlpha">If true, alpha is not masked.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AddAndNormalizeWith(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Adds the specified image to the bitmap and normalizes the output before clipping.
            If the images are not the same size, the second image is stretched to the size of the first one before addition.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="toAdd">The image to add to the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AddAndNormalizeWith(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Adds the specified image to the bitmap and normalizes the output before clipping.
            If the images are not the same size, the second image is stretched to the size of the first one before addition.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="toAdd">The image to add to the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AddAndNormalizeWith(System.Drawing.PixelWorker,System.Drawing.PixelWorker)">
            <summary>
            Adds the specified image to the bitmap and normalizes the output before clipping.
            If the images are not the same size, the second image is stretched to the size of the first one before addition.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="toAdd">The image to add to the other one.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MultiplyAndNormalizeWith(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Multiplies the specified image to the bitmap and normalizes the output before clipping.
            If the images are not the same size, the second image is stretched to the size of the first one before multiplication.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="toMult">The image to multiply with the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MultiplyAndNormalizeWith(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Multiplies the specified image to the bitmap and normalizes the output before clipping.
            If the images are not the same size, the second image is stretched to the size of the first one before multiplication.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="toMult">The image to multiply with the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MultiplyAndNormalizeWith(System.Drawing.PixelWorker,System.Drawing.PixelWorker)">
            <summary>
            Multiplies the specified image to the bitmap and normalizes the output before clipping.
            If the images are not the same size, the second image is stretched to the size of the first one before multiplication.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="toMult">The image to multiply with the other one.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Subtract(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Boolean,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Subtracts the specified image from the bitmap. If the images are not the same size, the second image is stretched to the size of the first one before subtraction.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="filter">The image to subtract from the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
            <param name="subtractAlpha">Whether to subtract any alpha components as well.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Subtract(System.Drawing.PixelWorker,System.Drawing.Bitmap,System.Boolean,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Subtracts the specified image from the bitmap.
            </summary>
            <param name="baseImage">The bitmap to overwrite.</param>
            <param name="filter">The image to subtract from the other one.</param>
            <param name="layout">The layout style to use.</param>
            <param name="interpolation">The interpolation mode to use.</param>
            <param name="subtractAlpha">Whether to subtract any alpha components as well.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Subtract(System.Drawing.PixelWorker,System.Drawing.PixelWorker,System.Boolean)">
            <summary>
            Subtracts the specified image from the bitmap.
            </summary>
            <param name="baseImage">The bitmap to overwrite. WriteChanges() is not called, that's on you.</param>
            <param name="filter">The image to subtract from the other one. Its size must be equal to the size of the base image.</param>
            <param name="subtractAlpha">Whether to subtract any alpha components as well.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeLightness(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Changes the lightness of the specified image.
            </summary>
            <param name="image">The image whose lightness to change.</param>
            <param name="offset">The color offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeLightness(System.Drawing.PixelWorker,System.Int32)">
            <summary>
            Changes the lightness of the specified image.
            </summary>
            <param name="source">The image whose lightness to change. WriteChanges() is not called, that's on you.</param>
            <param name="offset">The color offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseAnd(System.Drawing.Bitmap,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'and' to the colors of the image using the specified mask.
            </summary>
            <param name="image">The image to mask.</param>
            <param name="mask">The mask to bitwise 'and' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will be left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseAnd(System.Drawing.PixelWorker,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'and' to the colors of the image using the specified mask.
            </summary>
            <param name="source">The image to mask. WriteChanges() is not called, that's on you.</param>
            <param name="mask">The mask to bitwise 'and' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will be left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseOr(System.Drawing.Bitmap,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'or' to the colors of the image using the specified mask.
            </summary>
            <param name="image">The image to mask.</param>
            <param name="mask">The mask to bitwise 'or' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will be left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseOr(System.Drawing.PixelWorker,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'or' to the colors of the image using the specified mask.
            </summary>
            <param name="source">The image to mask. WriteChanges() is not called, that's on you.</param>
            <param name="mask">The mask to bitwise 'or' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will be left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseXor(System.Drawing.Bitmap,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'xor' to the colors of the image using the specified mask.
            </summary>
            <param name="image">The image to mask.</param>
            <param name="mask">The mask to bitwise 'xor' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will be left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseXor(System.Drawing.PixelWorker,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'xor' to the colors of the image using the specified mask.
            </summary>
            <param name="source">The image to mask. WriteChanges() is not called, that's on you.</param>
            <param name="mask">The mask to bitwise 'xor' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will be left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Stretch(System.Drawing.Image,System.Drawing.Size,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Stretches the image to the specified size using the specified interpolation method.
            </summary>
            <param name="image">The source image to stretch.</param>
            <param name="newSize">The desired size of the stretched image.</param>
            <param name="interpolation">The interpolation method to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.DrawStretched(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Draws the specified image stretced to the specified size on the specified graphics canvas at (0, 0).
            </summary>
            <param name="g">The graphics canvas to draw the stretched image on.</param>
            <param name="image">The source image to stretch.</param>
            <param name="size">The desired size of the stretched image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ResizeWithLayout(System.Drawing.Image,System.Drawing.Size,System.Windows.Forms.ImageLayout,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Resizes the image to the specified size using the specified interpolation method and layout.
            </summary>
            <param name="image">The source image to resize.</param>
            <param name="newSize">The desired size of the stretched image.</param>
            <param name="layout">The desired output image layout.</param>
            <param name="interpolation">The interpolation method to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.DrawImageWithLayout(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.RectangleF,System.Windows.Forms.ImageLayout)">
            <summary>
            Draws the specified image resized to the specified size on the given graphics canvas using the specified layout.
            </summary>
            <param name="g">The graphics canvas to draw the stretched image on.</param>
            <param name="image">The source image to resize.</param>
            <param name="area">The desired area to draw the stretched image.</param>
            <param name="layout">The desured layout of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.CenterOf(System.Drawing.Rectangle)">
            <summary>
            Returns the center of the specified rectangle.
            </summary>
            <param name="rect">The rectangle to get the center of.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AlignRectangle(System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.ContentAlignment)">
            <summary>
            Aligns the specified rectangle inside the given bounds and returns the new location of the rectangle after alignment.
            </summary>
            <param name="bounds">The boundaries to align the rectangle into.</param>
            <param name="size">The size of the rectangle to center.</param>
            <param name="alignment">The alignment of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AlignRectangle(System.Drawing.RectangleF,System.Drawing.SizeF,System.Drawing.ContentAlignment)">
            <summary>
            Aligns the specified rectangle inside the given bounds and returns the new location of the rectangle after alignment.
            </summary>
            <param name="bounds">The boundaries to align the rectangle into.</param>
            <param name="size">The size of the rectangle to center.</param>
            <param name="alignment">The alignment of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.CenterOf(System.Drawing.RectangleF)">
            <summary>
            Returns the center of the specified rectangle.
            </summary>
            <param name="rect">The rectangle to get the center of.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Center(System.Drawing.Size,System.Drawing.Point)">
            <summary>
            Centers the specified rectangle around the specified point by returning its new location.
            </summary>
            <param name="size">The size of the rectangle to center.</param>
            <param name="center">The point to center the rectangle around.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Center(System.Drawing.SizeF,System.Drawing.PointF)">
            <summary>
            Centers the specified rectangle around the specified point by returning its new location.
            </summary>
            <param name="size">The size of the rectangle to center.</param>
            <param name="center">The point to center the rectangle around.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SetBackColor(System.Drawing.Bitmap,System.Drawing.Color,System.Single)">
            <summary>
            Sets the backround color the image is overlaid upon (only has an effect if the specified image contains transparency).
            </summary>
            <param name="image">The image whose backcolor to change.</param>
            <param name="backColor">The color to use for the specified image to be overlaid upon.</param>
            <param name="opacity">The opacity to multiply the backcolor with.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SetBackColor(System.Drawing.Bitmap,System.Drawing.BgraColor,System.Single)">
            <summary>
            Sets the backround color the image is overlaid upon (only has an effect if the specified image contains transparency).
            </summary>
            <param name="image">The image whose backcolor to change.</param>
            <param name="backColor">The color to use for the specified image to be overlaid upon.</param>
            <param name="opacity">The opacity to multiply the backcolor with.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SetBackColor(System.Drawing.PixelWorker,System.Drawing.Color,System.Single)">
            <summary>
            Sets the backround color the image is overlaid upon (only has an effect if the specified image contains transparency).
            </summary>
            <param name="source">The image whose backcolor to change. WriteChanges() is not called, that's on you.</param>
            <param name="backColor">The color to use for the specified image to be overlaid upon.</param>
            <param name="opacity">The opacity to multiply the backcolor with.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SetBackColor(System.Drawing.PixelWorker,System.Drawing.BgraColor,System.Single)">
            <summary>
            Sets the backround color the image is overlaid upon (only has an effect if the specified image contains transparency).
            </summary>
            <param name="source">The image whose backcolor to change. WriteChanges() is not called, that's on you.</param>
            <param name="backColor">The color to use for the specified image to be overlaid upon.</param>
            <param name="opacity">The opacity to multiply the backcolor with.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SetImageOpacity(System.Drawing.Bitmap,System.Single)">
            <summary>
            Changes the image opacity by multiplying all colors with the specified component.
            </summary>
            <param name="image">The image whose global opacity to set.</param>
            <param name="opacity">The multiplier to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SetImageOpacity(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Changes the image opacity by multiplying all colors with the specified component.
            </summary>
            <param name="source">The image whose global opacity to set. WriteChanges() is not called, that's on you.</param>
            <param name="opacity">The multiplier to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Mirror(System.Drawing.Bitmap,System.Drawing.MirrorMode)">
            <summary>
            Mirrors half of the image onto the other half.
            </summary>
            <param name="image">The image to mirror.</param>
            <param name="mode">The mirror mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Mirror(System.Drawing.PixelWorker,System.Drawing.MirrorMode)">
            <summary>
            Mirrors half of the image onto the other half.
            </summary>
            <param name="source">The image to mirror. WriteChanges() is not called, that's on you.</param>
            <param name="mode">The mirror mode to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.DrawFaded(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.RectangleF,System.Single)">
            <summary>
            Draws the specified image on the given canvas using the specified opacity.
            </summary>
            <param name="g">The graphics canvas to draw the faded image on.</param>
            <param name="image">The image to draw.</param>
            <param name="dest">The destination rectangle.</param>
            <param name="opacity">The opacity to multiply the image with.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.FFTShift(System.Drawing.Bitmap)">
            <summary>
            Performs a fourier shift on the image. Two fourier shifts cancel each other out.
            </summary>
            <param name="image">The image to shift.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.FFTShift(System.Drawing.PixelWorker)">
            <summary>
            Performs a fourier shift on the image. Two fourier shifts cancel each other out.
            </summary>
            <param name="source">The image to shift. WriteChanges() is not called, that's on you.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.FastCopy(System.Drawing.Bitmap)">
            <summary>
            Copies the specified image.
            </summary>
            <param name="image">The image to copy.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ConvertPixelFormat(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts the bitmap pixel format or copies the bitmap if the format is the same.
            </summary>
            <param name="image">The image to use.</param>
            <param name="format">The destination pixel format of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ConvertPixelFormat(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts the bitmap pixel format and stretches it to the specified width and height.
            </summary>
            <param name="image">The image to use.</param>
            <param name="format">The destination pixel format of the image.</param>
            <param name="newWidth">The width of the resultant image.</param>
            <param name="newHeight">The height of the resultant image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetOpacityAttributes(System.Single)">
            <summary>
            Gets the ImageAttributes from the specified opacity.
            </summary>
            <param name="opacity">The opacity attribute.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToDestPoints(System.Drawing.Rectangle)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="rectangle">The rectangle to extract the destination points from.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToDestPoints(System.Drawing.RectangleF)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="rectangle">The rectangle to extract the destination points from.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToDestPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="x">The X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToDestPoints(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="x">The X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToDestPoints(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="location">The coordinates of the upper-left corner of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToDestPoints(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Gets the corresponding DestPoints from the given rectangle.
            </summary>
            <param name="location">The coordinates of the upper-left corner of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Compose(System.Drawing.Color,System.Drawing.Color,System.Byte)">
            <summary>
            Composes the given pixels by calculating the addition of their colors and returning the result with the specified alpha component.
            </summary>
            <param name="basePixel">The base pixel color.</param>
            <param name="overlayPixel">The pixel whose color is to be overlaid on the base pixel.</param>
            <param name="alpha">The alpha component of the resulting color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Compose(System.Drawing.BgraColor,System.Drawing.BgraColor,System.Byte)">
            <summary>
            Composes the given pixels by calculating the addition of their colors and returning the result with the specified alpha component.
            </summary>
            <param name="basePixel">The base pixel color.</param>
            <param name="overlayPixel">The pixel whose color is to be overlaid on the base pixel.</param>
            <param name="alpha">The alpha component of the resulting color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Overlay(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Overlays the specified pixel on top of the base pixel and returns the resultant color.
            </summary>
            <param name="basePixel">The base pixel color.</param>
            <param name="overlayPixel">The pixel whose color is to be overlaid on the base pixel.</param>
            <param name="opacity">The opacity multiplier of the overlay.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Overlay(System.Drawing.BgraColor,System.Drawing.BgraColor,System.Single)">
            <summary>
            Overlays the specified pixel on top of the base pixel and returns the resultant color.
            </summary>
            <param name="basePixel">The base pixel color.</param>
            <param name="overlayPixel">The pixel whose color is to be overlaid on the base pixel.</param>
            <param name="opacity">The opacity multiplier of the overlay.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Overlay(System.Int32,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Single)">
            <summary>
            Overlays the specified pixel on top of the base pixel and returns the resultant color.
            </summary>
        </member>
        <member name="M:System.Drawing.ImageLib.Overlay(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Overlays the specified pixel on top of the base pixel and returns the resultant color.
            </summary>
            <param name="basePixel">The base pixel color.</param>
            <param name="overlayPixel">The pixel whose color is to be overlaid on the base pixel.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Overlay(System.Drawing.BgraColor,System.Drawing.BgraColor)">
            <summary>
            Overlays the specified pixel on top of the base pixel and returns the resultant color.
            </summary>
            <param name="basePixel">The base pixel color.</param>
            <param name="overlayPixel">The pixel whose color is to be overlaid on the base pixel.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Computes the transition color at the state specified.
            </summary>
            <param name="basePixel">The original pixel color.</param>
            <param name="overlayPixel">The target pixel color.</param>
            <param name="opacity">The transition state (0 - original, 1 - target color).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Drawing.BgraColor,System.Drawing.BgraColor,System.Single)">
            <summary>
            Computes the transition color at the state specified.
            </summary>
            <param name="basePixel">The original pixel color.</param>
            <param name="overlayPixel">The target pixel color.</param>
            <param name="opacity">The transition state (0 - original, 1 - target color).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Int32,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Single)">
            <summary>
            Computes the transition color at the state specified.
            </summary>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Drawing.Color4,System.Drawing.Color4,System.Single,System.Single)">
            <summary>
            Computes the transition color at the state specified.
            </summary>
            <param name="basePixel">The original pixel color.</param>
            <param name="overlayPixel">The target pixel color.</param>
            <param name="gradient">The transition state (0 - original, 1 - target color).</param>
            <param name="offset">The transition linear offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes the transition value at the state specified.
            </summary>
            <param name="baseValue">The original value.</param>
            <param name="targetValue">The target value.</param>
            <param name="state">The transition state (0 - original value, 1 - target value).</param>
            <param name="offset">The transition linear offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the transition value at the state specified.
            </summary>
            <param name="baseValue">The original value.</param>
            <param name="targetValue">The target value.</param>
            <param name="state">The transition state (0 - original value, 1 - target value).</param>
            <param name="offset">The transition linear offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.TransitionClamp(System.Drawing.Color4,System.Drawing.Color4,System.Single,System.Single)">
            <summary>
            Computes the transition value at the state specified but clamps gradient to the range [0, 1].
            </summary>
            <param name="basePixel">The original pixel color.</param>
            <param name="overlayPixel">The target pixel color.</param>
            <param name="gradient">The transition state (0 - original, 1 - target color).</param>
            <param name="offset">The transition linear offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.TransitionClamp(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes the transition value at the state specified but clamps gradient to the range [0, 1].
            </summary>
            <param name="baseValue">The original value.</param>
            <param name="targetValue">The target value.</param>
            <param name="state">The transition state (0 - original value, 1 - target value).</param>
            <param name="offset">The transition linear offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.TransitionClamp(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the transition value at the state specified but clamps gradient to the range [0, 1].
            </summary>
            <param name="baseValue">The original value.</param>
            <param name="targetValue">The target value.</param>
            <param name="state">The transition state (0 - original value, 1 - target value).</param>
            <param name="offset">The transition linear offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Single,System.Single,System.Single)">
            <summary>
            Computes the transition value at the state specified.
            </summary>
            <param name="baseValue">The original value.</param>
            <param name="targetValue">The target value.</param>
            <param name="state">The transition state (0 - original value, 1 - target value).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Transition(System.Double,System.Double,System.Double)">
            <summary>
            Computes the transition value at the state specified.
            </summary>
            <param name="baseValue">The original value.</param>
            <param name="targetValue">The target value.</param>
            <param name="state">The transition state (0 - original value, 1 - target value).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.Bitmap,System.Drawing.Filter,System.Single,System.Single)">
            <summary>
            Applies the specifies filter to the given image.
            </summary>
            <param name="image">The image to apply the filter to.</param>
            <param name="type">The type of convolution filter to apply.</param>
            <param name="radius">The radius of the blur filter. Non-integer values are slower to process.</param>
            <param name="amount">The mix level of the filter.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.Bitmap,System.Drawing.Filter,System.Single,System.Single,System.Byte[]@)">
            <summary>
            Applies the specifies filter to the given image.
            </summary>
            <param name="image">The image to apply the filter to.</param>
            <param name="type">The type of convolution filter to apply.</param>
            <param name="radius">The radius of the blur filter. Non-integer values are slower to process.</param>
            <param name="amount">The mix level of the filter.</param>
            <param name="buffer">An optional buffer the size of PixelComponentCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.PixelWorker,System.Drawing.Filter,System.Single,System.Single)">
            <summary>
            Applies the specifies filter to the given image.
            </summary>
            <param name="source">The image to apply the filter to The image to apply the filter to. WriteChanges() is not called, that's on you.</param>
            <param name="type">The type of convolution filter to apply.</param>
            <param name="radius">The radius of the blur filter. Non-integer values are slower to process.</param>
            <param name="amount">The mix level of the filter.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.PixelWorker,System.Drawing.Filter,System.Single,System.Single,System.Byte[]@)">
            <summary>
            Applies the specifies filter to the given image.
            </summary>
            <param name="source">The image to apply the filter to The image to apply the filter to. WriteChanges() is not called, that's on you.</param>
            <param name="type">The type of convolution filter to apply.</param>
            <param name="radius">The radius of the blur filter. Non-integer values are slower to process.</param>
            <param name="amount">The mix level of the filter.</param>
            <param name="buffer">An optional buffer the size of PixelComponentCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.Bitmap,System.Drawing.Filter,System.Int32,System.Single)">
            <summary>
            Applies the specifies filter to the given image.
            </summary>
            <param name="image">The image to apply the filter to.</param>
            <param name="type">The type of convolution filter to apply.</param>
            <param name="radius">The radius of the blur filter.</param>
            <param name="amount">The mix level of the filter.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.Bitmap,System.Drawing.Filter,System.Int32,System.Single,System.Byte[]@)">
            <summary>
            Applies the specifies filter to the given image.
            </summary>
            <param name="image">The image to apply the filter to.</param>
            <param name="type">The type of convolution filter to apply.</param>
            <param name="radius">The radius of the blur filter.</param>
            <param name="amount">The mix level of the filter.</param>
            <param name="buffer">An optional buffer the size of PixelComponentCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.PixelWorker,System.Drawing.Filter,System.Int32,System.Single)">
            <summary>
            Applies the specifies filter to the given image.
            </summary>
            <param name="source">The image to apply the filter to. WriteChanges() is not called, that's on you.</param>
            <param name="type">The type of convolution filter to apply.</param>
            <param name="radius">The radius of the blur filter.</param>
            <param name="amount">The mix level of the filter.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.PixelWorker,System.Drawing.Filter,System.Int32,System.Single,System.Byte[]@)">
            <summary>
            Applies the specifies filter to the given image.
            </summary>
            <param name="source">The image to apply the filter to. WriteChanges() is not called, that's on you.</param>
            <param name="type">The type of convolution filter to apply.</param>
            <param name="radius">The radius of the blur filter.</param>
            <param name="amount">The mix level of the filter.</param>
            <param name="buffer">An optional buffer the size of PixelComponentCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.CalculateBlurKernel(System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="radius">The blur radius.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.Bitmap,System.Single[],System.Single[],System.Boolean)">
            <summary>
            Applies the specifies filter to the given image in the spacial domain. KERNEL LENGTH SHOULD BE ODD FOR SYMMETRY.
            </summary>
            <param name="image">The image to apply the filter to.</param>
            <param name="kernelHorizontal">The 1D kernel to convolve horizontally with (can be null).</param>
            <param name="kernelVertical">The 1D kernel to convolve vertically with (can be null).</param>
            <param name="skipAlpha">If true, the alpha channel will be untouched.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.PixelWorker,System.Single[],System.Single[],System.Boolean)">
            <summary>
            Convolves the specified kernel with the given image in the spacial domain. KERNEL LENGTH SHOULD BE ODD FOR SYMMETRY.
            </summary>
            <param name="source">The image to apply the filter to. WriteChanges() is not called, that's on you.</param>
            <param name="kernelHorizontal">The 1D kernel to convolve horizontally with (can be null).</param>
            <param name="kernelVertical">The 1D kernel to convolve vertically with (can be null).</param>
            <param name="skipAlpha">If true, the alpha channel will be untouched.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.Bitmap,System.Single[][],System.Boolean)">
            <summary>
            Convolves the specified kernel with the given image in the spacial domain. KERNEL LENGTHS SHOULD BE ODD FOR SYMMETRY.
            </summary>
            <param name="image">The image to apply the filter to.</param>
            <param name="kernel">The 2D [x][y] kernel to convolve with.</param>
            <param name="skipAlpha">If true, the alpha channel will be untouched.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Drawing.PixelWorker,System.Single[][],System.Boolean)">
            <summary>
            Convolves the specified kernel with the given image in the spacial domain. KERNEL LENGTH SHOULD BE ODD FOR SYMMETRY.
            </summary>
            <param name="source">The image to apply the filter to. WriteChanges() is not called, that's on you.</param>
            <param name="kernel">The 2D [x][y] kernel to convolve with.</param>
            <param name="skipAlpha">If true, the alpha channel will be untouched.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Single[],System.Int32,System.Int32,System.Single[][],System.Boolean)">
            <summary>
            Convolves the specified kernel with the given values in the spacial domain. KERNEL LENGTH SHOULD BE ODD FOR SYMMETRY.
            </summary>
            <param name="source">The image to apply the filter to. WriteChanges() is not called, that's on you.</param>
            <param name="width">The width of the image window represented by the source values.</param>
            <param name="height">The height of the image window represented by the source values.</param>
            <param name="kernel">The 2D [x][y] kernel to convolve with.</param>
            <param name="skipAlpha">If true, the alpha channel (assumes BGRA) will be untouched.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyFilter(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Boolean)">
            <summary>
            Convolves the specified kernel with the given image in the spacial domain. KERNEL LENGTH SHOULD BE ODD FOR SYMMETRY.
            </summary>
            <param name="source">The image to apply the filter to. WriteChanges() is not called, that's on you.</param>
            <param name="width">The width of the image window represented by the source values.</param>
            <param name="height">The height of the image window represented by the source values.</param>
            <param name="kernelHorizontal">The 1D kernel to convolve horizontally with (can be null).</param>
            <param name="kernelVertical">The 1D kernel to convolve vertically with (can be null).</param>
            <param name="skipAlpha">If true, the alpha channel (assumes BGRA) will be untouched.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SignedDistanceField(System.Drawing.Bitmap,System.Single,System.Byte)">
            <summary>
            Calculates a signed distance field for each color channel in the image.
            </summary>
            <param name="image">The image to calculate SDF for.</param>
            <param name="searchDistance">The search radius for each pixel.</param>
            <param name="threshold">The value to threshold each channel at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SignedDistanceField(System.Drawing.PixelWorker,System.Single,System.Byte)">
            <summary>
            Calculates a signed distance field for each color channel in the image.
            </summary>
            <param name="source">The image to calculate SDF for.</param>
            <param name="searchDistance">The search radius for each pixel.</param>
            <param name="threshold">The value to threshold each channel at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SignedDistanceField(System.Drawing.Bitmap,System.Int32,System.Byte)">
            <summary>
            Calculates a signed distance field for each color channel in the image.
            </summary>
            <param name="image">The image to calculate SDF for.</param>
            <param name="searchDistance">The search radius for each pixel.</param>
            <param name="threshold">The value to threshold each channel at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SignedDistanceField(System.Drawing.PixelWorker,System.Int32,System.Byte)">
            <summary>
            Calculates a signed distance field for each color channel in the image.
            </summary>
            <param name="source">The image to calculate SDF for.</param>
            <param name="searchDistance">The search radius for each pixel.</param>
            <param name="threshold">The value to threshold each channel at.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Erode(System.Drawing.Bitmap,System.Single)">
            <summary>
            Shrinks the brighter regions in the image.
            </summary>
            <param name="image">The image to erode.</param>
            <param name="radius">The radius to erode at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Erode(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Shrinks the brighter regions in the image.
            </summary>
            <param name="source">The image to erode.</param>
            <param name="radius">The radius to erode at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Erode(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Shrinks the brighter regions in the image.
            </summary>
            <param name="image">The image to erode.</param>
            <param name="radius">The radius to erode at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Erode(System.Drawing.PixelWorker,System.Int32)">
            <summary>
            Shrinks the brighter regions in the image.
            </summary>
            <param name="source">The image to erode.</param>
            <param name="radius">The radius to erode at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Dilate(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Enlarges the brighter regions in the image.
            </summary>
            <param name="image">The image to dilate.</param>
            <param name="radius">The radius to dilate at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Dilate(System.Drawing.PixelWorker,System.Int32)">
            <summary>
            Enlarges the brighter regions in the image.
            </summary>
            <param name="source">The image to dilate.</param>
            <param name="radius">The radius to dilate at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Dilate(System.Drawing.Bitmap,System.Single)">
            <summary>
            Enlarges the brighter regions in the image.
            </summary>
            <param name="image">The image to dilate.</param>
            <param name="radius">The radius to dilate at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Dilate(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Enlarges the brighter regions in the image.
            </summary>
            <param name="source">The image to dilate.</param>
            <param name="radius">The radius to dilate at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToWorker(System.Drawing.Bitmap,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a PixelWorker from the specified image.
            </summary>
            <param name="image">The image to get the required data from.</param>
            <param name="useBuffer">Whether changing pixel values are written to a buffer instead of directly to the image (false means faster).</param>
            <param name="writeOnDispose">Whether to write changes on dispose.</param>
            <param name="disposeImage">Whether to dispose the image as well on dispose.</param>
            <param name="doNotUseImageDirectly">If true, the image is copied into a buffer and the original is left untouched.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeGamma(System.Drawing.Bitmap,System.Single)">
            <summary>
            Changes the gamma of the specified image.
            </summary>
            <param name="image">The color whose gamma to change.</param>
            <param name="gamma">>The gamma multiplier (0 means black, 1 means gamma is unchanged, larger numbers increase gamma).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeGamma(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Changes the gamma of the specified image.
            </summary>
            <param name="source">The color whose gamma to change. WriteChanges() is not called, that's on you.</param>
            <param name="gamma">The gamma multiplier (0 means black, 1 means gamma is unchanged, larger numbers increase gamma).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeGamma(System.Drawing.Color,System.Single)">
            <summary>
            Changes the gamma of the specified color.
            </summary>
            <param name="color">The color whose gamma to change.</param>
            <param name="gamma">The gamma multiplier (0 means black, 1 means gamma is unchanged, larger numbers increase gamma).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeGamma(System.Drawing.BgraColor,System.Single)">
            <summary>
            Changes the gamma of the specified color.
            </summary>
            <param name="color">The color whose gamma to change.</param>
            <param name="gamma">The gamma multiplier (0 means black, 1 means gamma is unchanged, larger numbers increase gamma).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ResizeNearestNeighbor(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            Resizes the image using the nearest neighbor algorithm.
            </summary>
            <param name="image">The image to resize.</param>
            <param name="newSize">The new size of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ResizeNearestNeighbor(System.Drawing.PixelWorker,System.Drawing.Size)">
            <summary>
            Resizes the image using the nearest neighbor algorithm.
            </summary>
            <param name="source">The image to resize.</param>
            <param name="newSize">The new size of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ResizeBilinear(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            Resizes the image using linear interpolation.
            </summary>
            <param name="image">The image to resize.</param>
            <param name="newSize">The new size of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ResizeBilinear(System.Drawing.PixelWorker,System.Drawing.Size)">
            <summary>
            Resizes the image using linear interpolation.
            </summary>
            <param name="source">The image to resize.</param>
            <param name="newSize">The new size of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ResizeBicubic(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            Resizes the image using bicubic interpolation.
            </summary>
            <param name="image">The image to resize.</param>
            <param name="newSize">The new size of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ResizeBicubic(System.Drawing.PixelWorker,System.Drawing.Size)">
            <summary>
            Resizes the image using bicubic interpolation.
            </summary>
            <param name="source">The image to resize.</param>
            <param name="newSize">The new size of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ResizeLanczos(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            Resizes the image using Lanczos3 interpolation.
            </summary>
            <param name="image">The image to resize.</param>
            <param name="newSize">The new size of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ResizeLanczos(System.Drawing.PixelWorker,System.Drawing.Size)">
            <summary>
            Resizes the image using Lanczos3 interpolation.
            </summary>
            <param name="source">The image to resize.</param>
            <param name="newSize">The new size of the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateLanczos(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Double,System.Double)">
            <summary>
            Interpolates the specified values using Lanczos (3x3) sampling.
            </summary>
            <param name="x1y1">The top-left pixel at (-2, -2).</param>
            <param name="x2y1">x2y1</param>
            <param name="x3y1">x3y1</param>
            <param name="x4y1">x4y1</param>
            <param name="x5y1">x5y1</param>
            <param name="x6y1">x6y1</param>
            <param name="x1y2">x1y2</param>
            <param name="x2y2">x2y2</param>
            <param name="x3y2">x3y2</param>
            <param name="x4y2">x4y2</param>
            <param name="x5y2">x5y2</param>
            <param name="x6y2">x6y2</param>
            <param name="x1y3">x1y3</param>
            <param name="x2y3">x2y3</param>
            <param name="x3y3">x3y3</param>
            <param name="x4y3">x4y3</param>
            <param name="x5y3">x5y3</param>
            <param name="x6y3">x6y3</param>
            <param name="x1y4">x1y4</param>
            <param name="x2y4">x2y4</param>
            <param name="x3y4">x3y4</param>
            <param name="x4y4">x4y4</param>
            <param name="x5y4">x5y4</param>
            <param name="x6y4">x6y4</param>
            <param name="x1y5">x1y5</param>
            <param name="x2y5">x2y5</param>
            <param name="x3y5">x3y5</param>
            <param name="x4y5">x4y5</param>
            <param name="x5y5">x5y5</param>
            <param name="x6y5">x6y5</param>
            <param name="x1y6">x1y6</param>
            <param name="x2y6">x2y6</param>
            <param name="x3y6">x3y6</param>
            <param name="x4y6">x4y6</param>
            <param name="x5y6">x5y6</param>
            <param name="x6y6">The bottom-right pixel at (3, 3).</param>
            <param name="x">A value from 0 to 1 that reflects the X-coordinate of the output pixel relative to the middle pixels.</param>
            <param name="y">A value from 0 to 1 that reflects the Y-coordinate of the output pixel relative to the middle pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateLanczos(System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Double,System.Double)">
            <summary>
            Interpolates the specified values using Lanczos (3x3) sampling.
            </summary>
            <param name="x1y1">The top-left pixel at (-2, -2).</param>
            <param name="x2y1">x2y1</param>
            <param name="x3y1">x3y1</param>
            <param name="x4y1">x4y1</param>
            <param name="x5y1">x5y1</param>
            <param name="x6y1">x6y1</param>
            <param name="x1y2">x1y2</param>
            <param name="x2y2">x2y2</param>
            <param name="x3y2">x3y2</param>
            <param name="x4y2">x4y2</param>
            <param name="x5y2">x5y2</param>
            <param name="x6y2">x6y2</param>
            <param name="x1y3">x1y3</param>
            <param name="x2y3">x2y3</param>
            <param name="x3y3">x3y3</param>
            <param name="x4y3">x4y3</param>
            <param name="x5y3">x5y3</param>
            <param name="x6y3">x6y3</param>
            <param name="x1y4">x1y4</param>
            <param name="x2y4">x2y4</param>
            <param name="x3y4">x3y4</param>
            <param name="x4y4">x4y4</param>
            <param name="x5y4">x5y4</param>
            <param name="x6y4">x6y4</param>
            <param name="x1y5">x1y5</param>
            <param name="x2y5">x2y5</param>
            <param name="x3y5">x3y5</param>
            <param name="x4y5">x4y5</param>
            <param name="x5y5">x5y5</param>
            <param name="x6y5">x6y5</param>
            <param name="x1y6">x1y6</param>
            <param name="x2y6">x2y6</param>
            <param name="x3y6">x3y6</param>
            <param name="x4y6">x4y6</param>
            <param name="x5y6">x5y6</param>
            <param name="x6y6">The bottom-right pixel at (3, 3).</param>
            <param name="x">A value from 0 to 1 that reflects the X-coordinate of the output pixel relative to the middle pixels.</param>
            <param name="y">A value from 0 to 1 that reflects the Y-coordinate of the output pixel relative to the middle pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Add(System.Int32,System.Drawing.BgraColor,System.Drawing.BgraColor)">
            <summary>
            Adds the respective components of the colors.
            </summary>
        </member>
        <member name="M:System.Drawing.ImageLib.Add(System.Drawing.BgraColor,System.Drawing.BgraColor)">
            <summary>
            Adds the respective components of the colors.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Subtract(System.Drawing.BgraColor,System.Drawing.BgraColor,System.Boolean)">
            <summary>
            Subtracts the specified color from the given color.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The color to subtract from the first.</param>
            <param name="subtractAlpha">Whether to subtract the alpha component as well.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Add(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds the respective components of the colors.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Subtract(System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Subtracts the specified color from the given color.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The color to subtract from the first.</param>
            <param name="subtractAlpha">Whether to subtract the alpha component as well.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscale(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts the specified image to a grayscale.
            </summary>
            <param name="image">The image whose colors to convert to grayscale.</param>
            <param name="premultiplyAlpha">If true, the alpha channel is premultiplied to the color channels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.To24Bit(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts the specified image to a 24-bit BGR.
            </summary>
            <param name="image">The image whose colors to convert to 24-bit.</param>
            <param name="premultiplyAlpha">If true, the alpha channel is premultiplied to the color channels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.To32Bit(System.Drawing.Bitmap)">
            <summary>
            Converts the specified image to a 32-bit BGRA.
            </summary>
            <param name="image">The image whose colors to convert to 32-bit.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Invert(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Inverts the colors of the specified image.
            </summary>
            <param name="image">The image whose colors to invert.</param>
            <param name="ignoreAlpha">If true, alpha is left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Invert(System.Drawing.PixelWorker,System.Boolean)">
            <summary>
            Inverts the colors of the specified image.
            </summary>
            <param name="source">The image whose colors to invert.</param>
            <param name="ignoreAlpha">If true, alpha is left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToRGB(System.Byte)">
            <summary>
            Converts the specified grayscale color to RGB.
            </summary>
            <param name="grayscale">The grayscale color to convert.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToBGR(System.Byte)">
            <summary>
            Converts the specified grayscale color to BGR.
            </summary>
            <param name="grayscale">The grayscale color to convert.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToARGB(System.Byte,System.Byte)">
            <summary>
            Converts the specified grayscale color to ARGB.
            </summary>
            <param name="grayscale">The grayscale color to convert.</param>
            <param name="alpha">The alpha component of the output.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToBGRA(System.Byte,System.Byte)">
            <summary>
            Converts the specified grayscale color to BGRA.
            </summary>
            <param name="grayscale">The grayscale color to convert.</param>
            <param name="alpha">The alpha component of the output.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscale(System.Drawing.Color)">
            <summary>
            Converts the specified color to a grayscale in the range [0, 256).
            </summary>
            <param name="color">The color to convert to grayscale.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscale(System.Drawing.BgraColor)">
            <summary>
            Converts the specified color to a grayscale in the range [0, 256).
            </summary>
            <param name="color">The color to convert to grayscale.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscale(System.Drawing.Color,System.Byte)">
            <summary>
            Converts the specified color to a grayscale in the range [0, 256).
            </summary>
            <param name="color">The color to convert to grayscale.</param>
            <param name="alpha">The alpha value to use instead of the color's.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscale(System.Drawing.BgraColor,System.Byte)">
            <summary>
            Converts the specified color to a grayscale in the range [0, 255].
            </summary>
            <param name="color">The color to convert to grayscale.</param>
            <param name="alpha">The alpha value to use instead of the color's.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscaleColor(System.Drawing.Color)">
            <summary>
            Converts the specified color to a grayscale color.
            </summary>
            <param name="color">The color to convert to grayscale.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscaleColor(System.Drawing.BgraColor)">
            <summary>
            Converts the specified color to a grayscale color.
            </summary>
            <param name="color">The color to convert to grayscale.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscale(System.Drawing.Color,System.Single)">
            <summary>
            Converts the specified color to a grayscale in the range [0, 256).
            </summary>
            <param name="color">The color to convert to grayscale.</param>
            <param name="opacity">The opacity to multiply to the color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscale(System.Drawing.BgraColor,System.Single)">
            <summary>
            Converts the specified color to a grayscale in the range [0, 256).
            </summary>
            <param name="color">The color to convert to grayscale.</param>
            <param name="opacity">The opacity to multiply to the color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscale(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts the specified color to a grayscale in the range [0, 256).
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToGrayscale(System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts the specified color to a grayscale in the range [0, 256).
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.PremultiplyAlpha(System.Drawing.Bitmap)">
            <summary>
            Premultiplies the alpha components of the image.
            </summary>
            <param name="image">The image whose color values to premultply.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ExtractChannel(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Isolates and extracts the specified color channel from the image.
            </summary>
            <param name="image">The image whose color channel to extract.</param>
            <param name="channel">0 for Blue, 1 for Green, 2 for Red, 3 for Alpha.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MedianEnhance(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Applies a median sharpen filter to the specified image and returns the result.
            </summary>
            <param name="image">The image to use for processing (will not be written to).</param>
            <param name="radius">The median sharpen filter radius.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MedianEnhance(System.Drawing.PixelWorker,System.Int32)">
            <summary>
            Applies a median sharpen filter to the specified image and returns the result.
            </summary>
            <param name="source">The image to use for processing (will not be written to).</param>
            <param name="radius">The median sharpen filter radius.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MedianEnhance(System.Drawing.Bitmap,System.Single)">
            <summary>
            Applies a median sharpen filter to the specified image and returns the result.
            </summary>
            <param name="image">The image to use for processing (will not be written to).</param>
            <param name="radius">The median sharpen filter radius.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MedianEnhance(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Applies a median sharpen filter to the specified image and returns the result.
            </summary>
            <param name="source">The image to use for processing (will not be written to).</param>
            <param name="radius">The median sharpen filter radius.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MedianFilter(System.Drawing.Bitmap,System.Single)">
            <summary>
            Applies a median filter to the specified image and returns the result.
            </summary>
            <param name="image">The image to use for processing (will not be written to).</param>
            <param name="radius">The median filter radius. Integer values are faster to process.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MedianFilter(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Applies a median filter to the specified image and returns a result.
            </summary>
            <param name="source">The image to use for processing (will not be written to).</param>
            <param name="radius">The median filter radius. Integer values are faster to process.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MedianFilter(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Applies a median filter to the specified image and returns a result.
            </summary>
            <param name="image">The image to use for processing (will not be written to).</param>
            <param name="radius">The median filter radius.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MedianFilter(System.Drawing.PixelWorker,System.Int32)">
            <summary>
            Applies a median filter to the specified image and returns a result.
            </summary>
            <param name="source">The image to use for processing (will not be written to).</param>
            <param name="radius">The median filter radius.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlur(System.Drawing.Bitmap,System.Single,System.Int32)">
            <summary>
            Blurs the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlur(System.Drawing.Bitmap,System.Single,System.Int32,System.Byte[]@)">
            <summary>
            Blurs the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="buffer">An optional buffer the size of PixelComponentCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlur(System.Drawing.PixelWorker,System.Single,System.Int32)">
            <summary>
            Blurs the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="source">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlur(System.Drawing.PixelWorker,System.Single,System.Int32,System.Byte[]@)">
            <summary>
            Blurs the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="source">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="buffer">An optional buffer the size of PixelComponentCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlur(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Blurs the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlur(System.Drawing.Bitmap,System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Blurs the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="buffer">An optional buffer the size of PixelComponentCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlur(System.Drawing.PixelWorker,System.Int32,System.Int32)">
            <summary>
            Blurs the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="source">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlur(System.Drawing.PixelWorker,System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Blurs the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="source">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="buffer">An optional buffer the size of PixelComponentCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlurAlpha(System.Drawing.Bitmap,System.Single,System.Int32,System.Single,System.Byte)">
            <summary>
            Blurs the alpha channel of specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="multiplier">The multiplier to multiply the alpha channel with.</param>
            <param name="maxAlpha">The maximum alpha cap.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlurAlpha(System.Drawing.Bitmap,System.Single,System.Int32,System.Single,System.Byte,System.Byte[]@)">
            <summary>
            Blurs the alpha channel of specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="multiplier">The multiplier to multiply the alpha channel with.</param>
            <param name="maxAlpha">The maximum alpha cap.</param>
            <param name="buffer">An optional buffer the size of PixelCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlurAlpha(System.Drawing.PixelWorker,System.Single,System.Int32,System.Single,System.Byte)">
            <summary>
            Blurs the alpha channel of specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="source">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="multiplier">The multiplier to multiply the alpha channel with.</param>
            <param name="maxAlpha">The maximum alpha cap.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlurAlpha(System.Drawing.PixelWorker,System.Single,System.Int32,System.Single,System.Byte,System.Byte[]@)">
            <summary>
            Blurs the alpha channel of specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="source">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="multiplier">The multiplier to multiply the alpha channel with.</param>
            <param name="maxAlpha">The maximum alpha cap.</param>
            <param name="buffer">An optional buffer the size of PixelCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlurAlpha(System.Drawing.Bitmap,System.Int32,System.Int32,System.Single,System.Byte)">
            <summary>
            Blurs the alpha channel of specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="multiplier">The multiplier to multiply the alpha channel with.</param>
            <param name="maxAlpha">The maximum alpha cap.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlurAlpha(System.Drawing.Bitmap,System.Int32,System.Int32,System.Single,System.Byte,System.Byte[]@)">
            <summary>
            Blurs the alpha channel of specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="multiplier">The multiplier to multiply the alpha channel with.</param>
            <param name="maxAlpha">The maximum alpha cap.</param>
            <param name="buffer">An optional buffer the size of PixelCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlurAlpha(System.Drawing.PixelWorker,System.Int32,System.Int32,System.Single,System.Byte)">
            <summary>
            Blurs the alpha channel of the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="source">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="multiplier">The multiplier to multiply the alpha channel with.</param>
            <param name="maxAlpha">The maximum alpha cap.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlurAlpha(System.Drawing.PixelWorker,System.Int32,System.Int32,System.Single,System.Byte,System.Byte[]@)">
            <summary>
            Blurs the alpha channel of the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="source">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="multiplier">The multiplier to multiply the alpha channel with.</param>
            <param name="maxAlpha">The maximum alpha cap.</param>
            <param name="buffer">An optional buffer the size of PixelCount of the image (or more) to use as working memory.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxBlurAlpha(System.Drawing.PixelWorker,System.Int32,System.Int32,System.Single,System.Byte,System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            For internal use only. Blurs the alpha channel of the specified image using a blazing fast in-place box blur approximation.
            </summary>
            <param name="source">The image to blur.</param>
            <param name="radius">The blur radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
            <param name="multiplier">The multiplier to multiply the alpha channel with.</param>
            <param name="maxAlpha">The maximum alpha cap.</param>
            <param name="buffer">An optional buffer the size of PixelCount of the image (or more) to use as working memory.</param>
            <param name="blurWidth">The width of the image.</param>
            <param name="blurHeight">The height of image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxSharpen(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Sharpens the specified image using a fast unsharp mask approximation.
            </summary>
            <param name="image">The image to sharpen.</param>
            <param name="radius">The sharpen radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxSharpen(System.Drawing.PixelWorker,System.Int32,System.Int32)">
            <summary>
            Sharpens the specified image using a fast unsharp mask approximation.
            </summary>
            <param name="source">The image to sharpen.</param>
            <param name="radius">The sharpen radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxSharpen(System.Drawing.Bitmap,System.Single,System.Int32)">
            <summary>
            Sharpens the specified image using a fast unsharp mask approximation.
            </summary>
            <param name="image">The image to sharpen.</param>
            <param name="radius">The sharpen radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BoxSharpen(System.Drawing.PixelWorker,System.Single,System.Int32)">
            <summary>
            Sharpens the specified image using a fast unsharp mask approximation.
            </summary>
            <param name="source">The image to sharpen.</param>
            <param name="radius">The sharpen radius.</param>
            <param name="passes">The number of passes to apply. At least 2 are recommended for quality.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.PrewittEdgeFilter(System.Drawing.Bitmap)">
            <summary>
            Applies a discrete Prewitt edge detection filter to the specified image.
            </summary>
            <param name="image">The image to overlay edges onto.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.PrewittEdgeFilter(System.Drawing.PixelWorker)">
            <summary>
            Applies a discrete Prewitt edge detection filter to the specified image.
            </summary>
            <param name="source">The image to overlay edges onto.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SobelEdgeFilter(System.Drawing.Bitmap)">
            <summary>
            Applies a discrete Sobel edge detection filter to the specified image.
            </summary>
            <param name="image">The image to overlay edges onto.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SobelEdgeFilter(System.Drawing.PixelWorker)">
            <summary>
            Applies a discrete Sobel edge detection filter to the specified image.
            </summary>
            <param name="source">The image to overlay edges onto. WriteChanges() is not called, that's on you.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SobelEdgeFilter(System.Drawing.Bitmap,System.Single)">
            <summary>
            Applies a discrete Sobel edge detection filter to the specified image and returns a boolean matrix [x][y]
            with 'true' for edges and 'false' for non-edges.
            </summary>
            <param name="image">The image to use for processing (will not be written to).</param>
            <param name="threshold">The edge cutoff threshold (greater than 0).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SobelEdgeFilter(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Applies a discrete Sobel edge detection filter to the specified image and returns a boolean matrix [x][y]
            with 'true' for edges and 'false' for non-edges.
            </summary>
            <param name="source">The image to use for processing (will not be written to).</param>
            <param name="threshold">The edge cutoff threshold (greater than 0).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Erode(System.Boolean[][],System.Int32)">
            <summary>
            Shrinks the "true" (1) regions of in the array.
            </summary>
            <param name="source">The thresholded values to use, where the array format is [x][y].</param>
            <param name="radius">The radius to erode at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Dilate(System.Boolean[][],System.Int32)">
            <summary>
            Expands the "true" (1) regions of in the array.
            </summary>
            <param name="source">The thresholded values to use, where the array format is [x][y].</param>
            <param name="radius">The radius to dilate at in pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ConvolveFFT(System.Drawing.Bitmap,System.Single[][],System.Boolean)">
            <summary>
            Applies the specified filter using Fourier transform.
            </summary>
            <param name="image">The image to transform.</param>
            <param name="kernel">The filter to convolve with [x][y].</param>
            <param name="ignoreAlpha">False to also apply to alpha components, true to leave alpha intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GaussianBlurFFT(System.Drawing.Bitmap,System.Double,System.Boolean)">
            <summary>
            Performs Gaussian Blur using Fourier transform. Use when the blur radius you need is very large.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="sigma">The blur radius.</param>
            <param name="ignoreAlpha">False to also blur alpha components, true to leave alpha intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GaussianBlurFFT(System.Drawing.PixelWorker,System.Double,System.Boolean)">
            <summary>
            Performs Gaussian Blur using Fourier transform. Use when the blur radius you need is very large.
            </summary>
            <param name="image">The image to blur.</param>
            <param name="sigma">The blur radius.</param>
            <param name="ignoreAlpha">False to also blur alpha components, true to leave alpha intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MultiplyWith(System.Drawing.Bitmap,System.Single[][])">
            <summary>
            Multiplies element-wise the values of the image by the values of the specified kernel [x][y].
            </summary>
            <param name="image">The image whose values to multiply.</param>
            <param name="multiplier">The kernel to multiply with.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MultiplyWith(System.Drawing.PixelWorker,System.Single[][])">
            <summary>
            Multiplies element-wise the values of the image by the values of the specified kernel [x][y].
            </summary>
            <param name="image">The image whose values to multiply. WriteChanges() is not called, that's on you.</param>
            <param name="multiplier">The kernel to multiply with.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MultiplyWith(System.Drawing.Bitmap,System.Single[][][])">
            <summary>
            Multiplies element-wise the values of the image by the values of the specified kernel [channel][x][y].
            </summary>
            <param name="image">The image whose values to multiply.</param>
            <param name="multiplier">The kernel to multiply with. If the kernel has one channel, it will be multiplied with all channels of this image, else the corresponding channels will be multiplied.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.MultiplyWith(System.Drawing.PixelWorker,System.Single[][][])">
            <summary>
            Multiplies element-wise the values of the image by the values of the specified kernel [channel][x][y].
            </summary>
            <param name="image">The image whose values to multiply. WriteChanges() is not called, that's on you.</param>
            <param name="multiplier">The kernel to multiply with. If the kernel has one channel, it will be multiplied with all channels of this image, else the corresponding channels will be multiplied.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.DivideBy(System.Drawing.Bitmap,System.Single[][])">
            <summary>
            Divides element-wise the values of the image by the values of the specified kernel [x][y].
            </summary>
            <param name="image">The image whose values to divide.</param>
            <param name="divisor">The kernel to divide by.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.DivideBy(System.Drawing.PixelWorker,System.Single[][])">
            <summary>
            Divides element-wise the values of the image by the values of the specified kernel [x][y].
            </summary>
            <param name="image">The image whose values to divide. WriteChanges() is not called, that's on you.</param>
            <param name="divisor">The kernel to divide by.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.DivideBy(System.Drawing.Bitmap,System.Single[][][])">
            <summary>
            Divides element-wise the values of the image by the values of the specified kernel [x][y].
            </summary>
            <param name="image">The image whose values to divide. WriteChanges() is not called, that's on you.</param>
            <param name="divisor">The kernel to divide by. If the kernel has one channel, all channels of this image will be divided by it, else the corresponding channels will be divided.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.DivideBy(System.Drawing.PixelWorker,System.Single[][][])">
            <summary>
            Divides element-wise the values of the image by the values of the specified kernel [x][y].
            </summary>
            <param name="image">The image whose values to divide. WriteChanges() is not called, that's on you.</param>
            <param name="divisor">The kernel to divide by. If the kernel has one channel, all channels of this image will be divided by it, else the corresponding channels will be divided.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToBitmap(System.Boolean[][])">
            <summary>
            Gets a bitmap representation from the specified boolean values [x][y].
            </summary>
            <param name="values">The values to represent. All columns must be of the same height.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToBitmap(System.Boolean[][],System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Gets a bitmap representation from the specified boolean values [x][y].
            </summary>
            <param name="values">The values to represent. All columns must be of the same height.</param>
            <param name="forTrue">The color to use for true values.</param>
            <param name="forFalse">The color to use for false values.</param>
            <param name="bitDepth">The bit-depth of the final image (can be 1, 3 or 4). 1 is grayscale, 3 is RGB and 4 is ARGB.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToBitmap(System.Boolean[][],System.Drawing.BgraColor,System.Drawing.BgraColor,System.Int32)">
            <summary>
            Gets a bitmap representation from the specified boolean values [x][y].
            </summary>
            <param name="values">The values to represent. All columns must be of the same height.</param>
            <param name="forTrue">The color to use for true values.</param>
            <param name="forFalse">The color to use for false values.</param>
            <param name="bitDepth">The bit-depth of the final image (can be 1, 3 or 4). 1 is grayscale, 3 is RGB and 4 is ARGB.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToBitmap(System.Boolean[][],System.Drawing.Bitmap,System.Drawing.BgraColor)">
            <summary>
            Gets a bitmap representation from the specified boolean values [x][y].
            </summary>
            <param name="values">The values to represent. All columns must be of the same height.</param>
            <param name="image">The image whose pixels to sample for 'true' values.</param>
            <param name="forFalse">The color to use for 'false' values.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ToBitmap(System.Boolean[][],System.Drawing.PixelWorker,System.Drawing.BgraColor)">
            <summary>
            Gets a bitmap representation from the specified boolean values [x][y].
            </summary>
            <param name="values">The values to represent. All columns must be of the same height.</param>
            <param name="image">The image whose pixels to sample for 'true' values.</param>
            <param name="forFalse">The color to use for 'false' values.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetMedianElement(System.Byte[])">
            <summary>
            Gets the median of the specified bytes.
            </summary>
            <param name="values">The array of values whose median to find.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AntiAlias(System.Drawing.Bitmap,System.Single)">
            <summary>
            Applies pixel offset anti-aliasing to the specified image.
            </summary>
            <param name="image">The image to apply anti-aliasing to.</param>
            <param name="weight">The weight to use for anti-aliasing from 0 to 1 (0 means no anti-aliasing).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.AntiAlias(System.Drawing.PixelWorker,System.Single)">
            <summary>
            Applies pixel offset anti-aliasing to the specified image.
            </summary>
            <param name="source">The image to apply anti-aliasing to. WriteChanges() is not called, that's on you.</param>
            <param name="weight">The weight to use for anti-aliasing from 0 to 1 (0 means no anti-aliasing).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Threshold(System.Drawing.Bitmap,System.Byte,System.Boolean)">
            <summary>
            Performs per-channel thresholding. If needed, convert to grayscale before thresholding.
            </summary>
            <param name="image">The image to clamp.</param>
            <param name="cutoff">The threshold to use.</param>
            <param name="ignoreAlpha">If true, the alpha channel is not clamped.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Threshold(System.Drawing.PixelWorker,System.Byte,System.Boolean)">
            <summary>
            Performs per-channel thresholding. If needed, convert to grayscale before thresholding.
            </summary>
            <param name="source">The image to clamp.</param>
            <param name="cutoff">The threshold to use (inclusive).</param>
            <param name="ignoreAlpha">If true, the alpha channel is not clamped.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ThresholdDither(System.Drawing.Bitmap,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Performs per-channel thresholding and dithering. If needed, convert to grayscale before thresholding.
            </summary>
            <param name="image">The image to clamp.</param>
            <param name="cutoff">The threshold to use.</param>
            <param name="noiser">True to decrease dithering patterns (slower of course).</param>
            <param name="ignoreAlpha">If true, the alpha channel is not clamped.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ThresholdDither(System.Drawing.PixelWorker,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Performs per-channel thresholding and dithering. If needed, convert to grayscale before thresholding. (Slow)
            </summary>
            <param name="source">The image to clamp.</param>
            <param name="cutoff">The threshold to use (inclusive).</param>
            <param name="noiser">True to decrease dithering patterns (slower of course).</param>
            <param name="ignoreAlpha">If true, the alpha channel is not clamped.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Threshold(System.Drawing.Color,System.Byte,System.Boolean)">
            <summary>
            Performs per-channel thresholding.
            </summary>
            <param name="color">The color to clamp.</param>
            <param name="cutoff">The threshold to use.</param>
            <param name="ignoreAlpha">If true, the alpha channel is not clamped.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetThreshold(System.Drawing.Color,System.Byte)">
            <summary>
            Performs grayscale thresholding.
            </summary>
            <param name="color">The color to clamp.</param>
            <param name="cutoff">The threshold to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Threshold(System.Drawing.BgraColor,System.Byte,System.Boolean)">
            <summary>
            Performs per-channel thresholding.
            </summary>
            <param name="color">The color to clamp.</param>
            <param name="cutoff">The threshold to use.</param>
            <param name="ignoreAlpha">If true, the alpha channel is not clamped.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetThreshold(System.Drawing.BgraColor,System.Byte)">
            <summary>
            Performs grayscale thresholding.
            </summary>
            <param name="color">The color to clamp.</param>
            <param name="cutoff">The threshold to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetThreshold(System.Drawing.Bitmap,System.Byte)">
            <summary>
            Performs grayscale thresholding and returns a boolean array [x][y].
            </summary>
            <param name="image">The image to clamp.</param>
            <param name="cutoff">The threshold to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetThreshold(System.Drawing.PixelWorker,System.Byte)">
            <summary>
            Performs grayscale thresholding and returns a boolean array [x][y].
            </summary>
            <param name="source">The image to clamp.</param>
            <param name="cutoff">The threshold to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetNearestColor(System.Drawing.Color,System.Drawing.Color[])">
            <summary>
            Gets the color that is nearest to the specified color.
            </summary>
            <param name="color">The color to find the closest to.</param>
            <param name="palette">The palette of colors to choose from.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetNearestColor(System.Drawing.BgraColor,System.Drawing.BgraColor[])">
            <summary>
            Gets the color that is nearest to the specified color.
            </summary>
            <param name="color">The color to find the closest to.</param>
            <param name="palette">The palette of colors to choose from.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetAllPixels(System.Drawing.Bitmap)">
            <summary>
            Gets all the colors of pixels (slow).
            </summary>
            <param name="image">The image whose pixels to load.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetAllPixelsBgra(System.Drawing.Bitmap)">
            <summary>
            Gets all the colors of pixels.
            </summary>
            <param name="image">The image whose pixels to load.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SetAllPixels(System.Drawing.Bitmap,System.Drawing.Color[])">
            <summary>
            Sets all the pixels to the specified colors (slow).
            </summary>
            <param name="image">The image whose colors to set.</param>
            <param name="colors">The array of colors to set the pixels to. Must be the same size as the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SetAllPixels(System.Drawing.Bitmap,System.Drawing.BgraColor[])">
            <summary>
            Sets all the pixels to the specified colors (fast).
            </summary>
            <param name="image">The image whose colors to set.</param>
            <param name="colors">The array of colors to set the pixels to. Must be the same size as the image.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Quantize(System.Drawing.Bitmap,System.Drawing.BgraColor[])">
            <summary>
            Performs quantization on the specified palette.
            </summary>
            <param name="source">The image to quantize.</param>
            <param name="palette">The palette of colors to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Quantize(System.Drawing.Bitmap,System.Drawing.Color[])">
            <summary>
            Performs quantization on the specified palette.
            </summary>
            <param name="source">The image to quantize.</param>
            <param name="palette">The palette of colors to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Quantize(System.Drawing.PixelWorker,System.Drawing.BgraColor[])">
            <summary>
            Performs quantization on the specified palette.
            </summary>
            <param name="source">The image to quantize.</param>
            <param name="palette">The palette of colors to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Quantize(System.Drawing.PixelWorker,System.Drawing.Color[])">
            <summary>
            Performs quantization on the specified palette.
            </summary>
            <param name="source">The image to quantize.</param>
            <param name="palette">The palette of colors to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.QuantizeDither(System.Drawing.Bitmap,System.Boolean,System.Drawing.BgraColor[])">
            <summary>
            Performs dithered quantization on the specified palette.
            </summary>
            <param name="source">The image to quantize.</param>
            <param name="noiser">True to decrease dithering patterns (slower of course).</param>
            <param name="palette">The palette of colors to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.QuantizeDither(System.Drawing.Bitmap,System.Boolean,System.Drawing.Color[])">
            <summary>
            Performs dithered quantization on the specified palette.
            </summary>
            <param name="source">The image to quantize.</param>
            <param name="noiser">True to decrease dithering patterns (slower of course).</param>
            <param name="palette">The palette of colors to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.QuantizeDither(System.Drawing.PixelWorker,System.Boolean,System.Drawing.BgraColor[])">
            <summary>
            Performs dithered quantization on the specified palette. (Slow)
            </summary>
            <param name="source">The image to quantize.</param>
            <param name="noiser">True to decrease dithering patterns (slower of course).</param>
            <param name="palette">The palette of colors to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.QuantizeDither(System.Drawing.PixelWorker,System.Boolean,System.Drawing.Color[])">
            <summary>
            Performs dithered quantization on the specified palette. (Slow)
            </summary>
            <param name="source">The image to quantize.</param>
            <param name="noiser">True to decrease dithering patterns (slower of course).</param>
            <param name="palette">The palette of colors to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateLinear(System.Byte,System.Byte,System.Byte,System.Byte,System.Single,System.Single)">
            <summary>
            Interpolates the specified values linearly.
            </summary>
            <param name="x1y1">The top-left pixel.</param>
            <param name="x2y1">The top-right pixel.</param>
            <param name="x1y2">The bottom-left pixel.</param>
            <param name="x2y2">The bottom-right pixel.</param>
            <param name="x">A value between 0 and 1 that reflects the X-coordinate of the output pixel relative to x1y1 which is (0, 0).</param>
            <param name="y">A value between 0 and 1 that reflects the Y-coordinate of the output pixel relative to x1y1 which is (0, 0).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateLinear(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Interpolates the specified colors linearly.
            </summary>
            <param name="x1y1">The top-left pixel.</param>
            <param name="x2y1">The top-right pixel.</param>
            <param name="x1y2">The bottom-left pixel.</param>
            <param name="x2y2">The bottom-right pixel.</param>
            <param name="x">A value between 0 and 1 that reflects the X-coordinate of the output pixel relative to x1y1 which is (0, 0).</param>
            <param name="y">A value between 0 and 1 that reflects the Y-coordinate of the output pixel relative to x1y1 which is (0, 0).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateLinear(System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Single,System.Single)">
            <summary>
            Interpolates the specified colors linearly.
            </summary>
            <param name="x1y1">The top-left pixel.</param>
            <param name="x2y1">The top-right pixel.</param>
            <param name="x1y2">The bottom-left pixel.</param>
            <param name="x2y2">The bottom-right pixel.</param>
            <param name="x">A value between 0 and 1 that reflects the X-coordinate of the output pixel relative to x1y1 which is (0, 0).</param>
            <param name="y">A value between 0 and 1 that reflects the Y-coordinate of the output pixel relative to x1y1 which is (0, 0).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateCubic(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Double,System.Double)">
            <summary>
            Interpolates the specified values cubically.
            </summary>
            <param name="x1y1">The top-left pixel at (-1, -1).</param>
            <param name="x2y1">x2y1</param>
            <param name="x3y1">x3y1</param>
            <param name="x4y1">x4y1</param>
            <param name="x1y2">x1y2</param>
            <param name="x2y2">x2y2</param>
            <param name="x3y2">x3y2</param>
            <param name="x4y2">x4y2</param>
            <param name="x1y3">x1y3</param>
            <param name="x2y3">x2y3</param>
            <param name="x3y3">x3y3</param>
            <param name="x4y3">x4y3</param>
            <param name="x1y4">x1y4</param>
            <param name="x2y4">x2y4</param>
            <param name="x3y4">x3y4</param>
            <param name="x4y4">The bottom-right pixel at (2, 2).</param>
            <param name="x">A value from -1 to 2 that reflects the X-coordinate of the output pixel relative to x1y1 which is (-1, -1).
            0 to 1 refer to the middle pixels.</param>
            <param name="y">A value from -1 to 2 that reflects the Y-coordinate of the output pixel relative to x1y1 which is (-1, -1).
            0 to 1 refer to the middle pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateCubic(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolates the specified values cubically.
            </summary>
            <param name="x1y1">The top-left pixel at (-1, -1).</param>
            <param name="x2y1">x2y1</param>
            <param name="x3y1">x3y1</param>
            <param name="x4y1">x4y1</param>
            <param name="x1y2">x1y2</param>
            <param name="x2y2">x2y2</param>
            <param name="x3y2">x3y2</param>
            <param name="x4y2">x4y2</param>
            <param name="x1y3">x1y3</param>
            <param name="x2y3">x2y3</param>
            <param name="x3y3">x3y3</param>
            <param name="x4y3">x4y3</param>
            <param name="x1y4">x1y4</param>
            <param name="x2y4">x2y4</param>
            <param name="x3y4">x3y4</param>
            <param name="x4y4">The bottom-right pixel at (2, 2).</param>
            <param name="x">A value from -1 to 2 that reflects the X-coordinate of the output pixel relative to x1y1 which is (-1, -1).
            0 to 1 refer to the middle pixels.</param>
            <param name="y">A value from -1 to 2 that reflects the Y-coordinate of the output pixel relative to x1y1 which is (-1, -1).
            0 to 1 refer to the middle pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateCubic(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolates the specified values cubically.
            </summary>
            <param name="p0">[sample: -1] The left neighboring value.</param>
            <param name="p1">[sample: 0] The value on the left to interpolate</param>
            <param name="p2">[sample: 1] The value on the right to interpolate</param>
            <param name="p3">[sample: 2] The right neighboring value.</param>
            <param name="sample">A value from -1 to 2 that reflects the coordinate of the output pixel relative to p1.
            0 to 1 refer to the middle pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateCubic(System.Numerics.ComplexF,System.Numerics.ComplexF,System.Numerics.ComplexF,System.Numerics.ComplexF,System.Single)">
            <summary>
            Interpolates the specified values cubically.
            </summary>
            <param name="p0">[sample: -1] The left neighboring value.</param>
            <param name="p1">[sample: 0] The value on the left to interpolate</param>
            <param name="p2">[sample: 1] The value on the right to interpolate</param>
            <param name="p3">[sample: 2] The right neighboring value.</param>
            <param name="sample">A value from -1 to 2 that reflects the coordinate of the output pixel relative to p1.
            0 to 1 refer to the middle pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateCubic(System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Double,System.Double)">
            <summary>
            Interpolates the specified pixels cubically.
            </summary>
            <param name="x1y1">The top-left pixel at (-1, -1).</param>
            <param name="x2y1">x2y1</param>
            <param name="x3y1">x3y1</param>
            <param name="x4y1">x4y1</param>
            <param name="x1y2">x1y2</param>
            <param name="x2y2">x2y2</param>
            <param name="x3y2">x3y2</param>
            <param name="x4y2">x4y2</param>
            <param name="x1y3">x1y3</param>
            <param name="x2y3">x2y3</param>
            <param name="x3y3">x3y3</param>
            <param name="x4y3">x4y3</param>
            <param name="x1y4">x1y4</param>
            <param name="x2y4">x2y4</param>
            <param name="x3y4">x3y4</param>
            <param name="x4y4">The bottom-right pixel at (2, 2).</param>
            <param name="x">A value from -1 to 2 that reflects the X-coordinate of the output pixel relative to x1y1 which is (-1, -1).
            0 to 1 refer to the middle pixels.</param>
            <param name="y">A value from -1 to 2 that reflects the Y-coordinate of the output pixel relative to x1y1 which is (-1, -1).
            0 to 1 refer to the middle pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.InterpolateCubic(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Interpolates the specified pixels cubically.
            </summary>
            <param name="x1y1">The top-left pixel at (-1, -1).</param>
            <param name="x2y1">x2y1</param>
            <param name="x3y1">x3y1</param>
            <param name="x4y1">x4y1</param>
            <param name="x1y2">x1y2</param>
            <param name="x2y2">x2y2</param>
            <param name="x3y2">x3y2</param>
            <param name="x4y2">x4y2</param>
            <param name="x1y3">x1y3</param>
            <param name="x2y3">x2y3</param>
            <param name="x3y3">x3y3</param>
            <param name="x4y3">x4y3</param>
            <param name="x1y4">x1y4</param>
            <param name="x2y4">x2y4</param>
            <param name="x3y4">x3y4</param>
            <param name="x4y4">The bottom-right pixel at (2, 2).</param>
            <param name="x">A value from -1 to 2 that reflects the X-coordinate of the output pixel relative to x1y1 which is (-1, -1).
            0 to 1 refer to the middle pixels.</param>
            <param name="y">A value from -1 to 2 that reflects the Y-coordinate of the output pixel relative to x1y1 which is (-1, -1).
            0 to 1 refer to the middle pixels.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Crop(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Crops the given image to the specified rectangle.
            </summary>
            <param name="source">The source image to crop.</param>
            <param name="section">The section to keep.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeBrightness(System.Drawing.Color,System.Single)">
            <summary>
            Changes the brightness of the specified color.
            </summary>
            <param name="color">The color whose brightness to change.</param>
            <param name="multiplier">The brightness multiplier (0 means black, 1 means brightness is unchanged, larger numbers increase brightness).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeBrightness(System.Drawing.BgraColor,System.Single)">
            <summary>
            Changes the brightness of the specified color.
            </summary>
            <param name="color">The color whose brightness to change.</param>
            <param name="multiplier">The brightness multiplier (0 means black, 1 means brightness is unchanged, larger numbers increase brightness).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Multiply(System.Drawing.Color,System.Single)">
            <summary>
            Multiplies the specified color with the specified weight including alpha components.
            If you don't want to add alpha components, use ChangeBrightness instead.
            </summary>
            <param name="color">The color to multiply.</param>
            <param name="multiplier">The weight to multiply by.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Multiply(System.Drawing.BgraColor,System.Single)">
            <summary>
            Multiplies the specified color with the specified weight including alpha components.
            If you don't want to add alpha components, use ChangeBrightness instead.
            </summary>
            <param name="color">The color to multiply.</param>
            <param name="multiplier">The weight to multiply by.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeLightness(System.Drawing.Color,System.Int32)">
            <summary>
            Changes the lightness of the specified color.
            </summary>
            <param name="color">The color whose lightness to change.</param>
            <param name="offset">The color offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ChangeLightness(System.Drawing.BgraColor,System.Int32)">
            <summary>
            Changes the lightness of the specified color.
            </summary>
            <param name="color">The color whose lightness to change.</param>
            <param name="offset">The color offset.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.PremultiplyAlpha(System.Drawing.Color)">
            <summary>
            Pre-multiplies alpha with the color values.
            </summary>
            <param name="color">The color whose alpha to premultiply.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.PremultiplyAlpha(System.Drawing.BgraColor)">
            <summary>
            Pre-multiplies alpha with the color values.
            </summary>
            <param name="color">The color whose alpha to premultiply.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Invert(System.Drawing.Color,System.Boolean)">
            <summary>
            Inverts the specified color.
            </summary>
            <param name="color">The color to invert.</param>
            <param name="ignoreAlpha">If true, alpha is left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Invert(System.Drawing.BgraColor,System.Boolean)">
            <summary>
            Inverts the specified color.
            </summary>
            <param name="color">The color to invert.</param>
            <param name="ignoreAlpha">If true, alpha is left intact.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseAnd(System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Applies bitwise 'and' to the colors.
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
            <param name="ignoreAlpha">If true, the alpha of color2 will be ignored.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseAnd(System.Drawing.BgraColor,System.Drawing.BgraColor,System.Boolean)">
            <summary>
            Applies bitwise 'and' to the colors.
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
            <param name="ignoreAlpha">If true, the alpha of color2 will be ignored.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseAnd(System.Drawing.Color,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'and' mask to the color.
            </summary>
            <param name="color">The color.</param>
            <param name="mask">The mask to 'and' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will not be masked.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseAnd(System.Drawing.BgraColor,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'and' mask to the color.
            </summary>
            <param name="color">The color.</param>
            <param name="mask">The mask to 'and' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will not be masked.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseOr(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Applies bitwise 'or' to the colors.
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseOr(System.Drawing.BgraColor,System.Drawing.BgraColor)">
            <summary>
            Applies bitwise 'or' to the colors.
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseOr(System.Drawing.Color,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'or' mask to the color.
            </summary>
            <param name="color">The color.</param>
            <param name="mask">The mask to 'or' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will not be masked.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseOr(System.Drawing.BgraColor,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'or' mask to the color.
            </summary>
            <param name="color">The color.</param>
            <param name="mask">The mask to 'or' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will not be masked.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseXor(System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Applies bitwise 'xor' to the colors.
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
            <param name="ignoreAlpha">If true, the alpha of color2 will be ignored.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseXor(System.Drawing.BgraColor,System.Drawing.BgraColor,System.Boolean)">
            <summary>
            Applies bitwise 'xor' to the colors.
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
            <param name="ignoreAlpha">If true, the alpha of color2 will be ignored.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseXor(System.Drawing.Color,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'xor' mask to the color.
            </summary>
            <param name="color">The color.</param>
            <param name="mask">The mask to 'xor' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will not be masked.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.BitwiseXor(System.Drawing.BgraColor,System.Byte,System.Boolean)">
            <summary>
            Applies a bitwise 'xor' mask to the color.
            </summary>
            <param name="color">The color.</param>
            <param name="mask">The mask to 'xor' with.</param>
            <param name="ignoreAlpha">If true, the alpha channel will not be masked.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Clamp(System.Single)">
            <summary>
            Clamps the value to byte range.
            </summary>
            <param name="value">The value to clamp.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Clamp(System.Double)">
            <summary>
            Clamps the value to byte range.
            </summary>
            <param name="value">The value to clamp.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ClampDouble(System.Double)">
            <summary>
            Clamps the value to byte range.
            </summary>
            <param name="value">The value to clamp.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Clamp(System.Int32)">
            <summary>
            Clamps the value to byte range.
            </summary>
            <param name="value">The value to clamp.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GetPowerOfTwoSize(System.Drawing.Size,System.Boolean)">
            <summary>
            Gets the corresponding power-of-2 size for the specified image size.
            </summary>
            <param name="size">The bitmap size.</param>
            <param name="roundUp">Whether to round up (upscale) or down (downscale).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.FromAhsb(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Color from alpha, hue, saturation and brightness.
            </summary>
            <param name="alpha">The alpha channel value (0 to 255).</param>
            <param name="hue">The hue value (0 to 360).</param>
            <param name="saturation">The saturation value (0 to 1).</param>
            <param name="brightness">The brightness value (0 to 1).</param>
        </member>
        <member name="M:System.Drawing.ImageLib.GaussianKernel(System.Int32,System.Int32,System.Double)">
            <summary>
            Gets a 2D Gaussian kernel of the specified size.
            </summary>
            <param name="width">The width of the kernel.</param>
            <param name="height">The height of the kernel.</param>
            <param name="sigma">The weight to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.SharpenKernel(System.Int32,System.Int32,System.Double)">
            <summary>
            Gets a 2D Gaussian sharpen kernel of the specified size.
            </summary>
            <param name="width">The width of the kernel.</param>
            <param name="height">The height of the kernel.</param>
            <param name="sigma">The weight to use.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Normalize(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Normalizes the colors of an image.
            </summary>
            <param name="image">The image whose colors to normalize.</param>
            <param name="normalizeAlpha">Whether to include alpha in the normalization process.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.Normalize(System.Drawing.PixelWorker,System.Boolean)">
            <summary>
            Normalizes the colors of an image.
            </summary>
            <param name="source">The image whose colors to normalize. WriteChanges() is not called, that's on you.</param>
            <param name="normalizeAlpha">Whether to include alpha in the normalization process.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyXbr2(System.Drawing.Bitmap)">
            <summary>
            Scales the specified image to double its size using an XBR filter.
            </summary>
            <param name="image">The image to scale.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyXbr2(System.Drawing.PixelWorker)">
            <summary>
            Scales the specified image to double its size using an XBR filter.
            </summary>
            <param name="source">The image to scale.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyXbr3(System.Drawing.Bitmap)">
            <summary>
            Scales the specified image to triple its size using an XBR filter.
            </summary>
            <param name="image">The image to scale.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyXbr3(System.Drawing.PixelWorker)">
            <summary>
            Scales the specified image to triple its size using an XBR filter.
            </summary>
            <param name="source">The image to scale.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyXbr4(System.Drawing.Bitmap)">
            <summary>
            Scales the specified image to quadruple its size using an XBR filter.
            </summary>
            <param name="image">The image to scale.</param>
        </member>
        <member name="M:System.Drawing.ImageLib.ApplyXbr4(System.Drawing.PixelWorker)">
            <summary>
            Scales the specified image to quadruple its size using an XBR filter.
            </summary>
            <param name="source">The image to scale.</param>
        </member>
        <member name="T:System.Drawing.PixelWorker">
            <summary>
            Wraps a bitmap image to optimize for fast lock-free thread-safe pixel processing.
            Only supports 32-bit BGRA, 24-bit BGR and 8-bit grayscale bitmaps.
            You can use foreach to iterate through all bytes/pixels of the enumerator with maximum speed.
            Enumeration type can be configured in ThreadLocal variables that are present as fields of the instance.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.format">
            <summary>
            The pixel format of the image.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.size">
            <summary>
            The size of the bitmap.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.bounds">
            <summary>
            The image rectangle.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.DisposeImage">
            <summary>
            Whether to dispose the image as well on dispose.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.Buffer">
            <summary>
            The pixel components available in the buffer. If no buffering is used, this will be null.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.scan0">
            <summary>
            Points to the start of the native image (if any).
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.SkipAlphaInIterator">
            <summary>
            Whether to skip alpha components during iteration. This is stored locally per thread.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.IterationStep">
            <summary>
            The enumarator step in bytes (components). The default byte increment is 1.
            If you set it to ComponentCount, the iteration will be for all pixels instead, and you can use a BgraColor to get the current pixel.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.Tag">
            <summary>
            For recreational purposes.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.LockSync">
            <summary>
            The lock used to synchronize bitmap locking and unlocking.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.Size">
            <summary>
            Gets the size of the bitmap.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.Bounds">
            <summary>
            Gets the image rectangle.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.PixelCount">
            <summary>
            Gets the number of pixels in the image (precalculated Width * Height).
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.Format">
            <summary>
            Gets the pixel format of the image.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.PixelFormat">
            <summary>
            Gets the pixel format of the image (same as Format, for easier portability form Bitmap).
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.ComponentCount">
            <summary>
            Gets the number of components or channels per pixel.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.PixelComponentCount">
            <summary>
            Gets the total number of components or channels (precalculated PixelCount * ComponentCount).
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.WidthComponentCount">
            <summary>
            Precalculated Width * ComponentCount.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.HeightComponentCount">
            <summary>
            Precalculated Height * ComponentCount.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.Scan0">
            <summary>
            Points to the start of the native image (null if buffer is used).
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.Stride">
            <summary>
            Gets the pixel stride length.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.Item(System.Int32)">
            <summary>
            Gets or sets the value of the specified pixel component.
            </summary>
            <param name="index">The byte index of the value to get/set.</param>
        </member>
        <member name="P:System.Drawing.PixelWorker.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the color of the specified pixel.
            </summary>
            <param name="x">The x-coordinate of the pixel to get/set.</param>
            <param name="y">The y-coordinate of the pixel to get/set.</param>
        </member>
        <member name="P:System.Drawing.PixelWorker.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of the specified pixel component.
            </summary>
            <param name="x">The x-coordinate of the pixel.</param>
            <param name="y">The y-coordinate of the pixel.</param>
            <param name="c">The component index.</param>
        </member>
        <member name="P:System.Drawing.PixelWorker.Item(System.Int64)">
            <summary>
            Gets or sets the value of the specified pixel component.
            </summary>
            <param name="index">The byte index of the value to get/set.</param>
        </member>
        <member name="P:System.Drawing.PixelWorker.Item(System.Int64,System.Int64,System.Int64)">
            <summary>
            Gets or sets the value of the specified pixel component.
            </summary>
            <param name="x">The x-coordinate of the pixel.</param>
            <param name="y">The y-coordinate of the pixel.</param>
            <param name="c">The component index.</param>
        </member>
        <member name="P:System.Drawing.PixelWorker.UsingBuffer">
            <summary>
            Gets whether changing pixel values are written to a buffer instead of directly to the image.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.IsLocked">
            <summary>
            Gets whether the image is currently locked.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.IsDisposed">
            <summary>
            Gets whether the image is disposed.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new PixelProcessingwrapper at the specified size.
            </summary>
            <param name="size">The size of the image.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new BGRA PixelProcessingwrapper at the specified size.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Drawing.Size,System.Int32)">
            <summary>
            Initializes a new PixelProcessingwrapper at the specified size.
            </summary>
            <param name="size">The size of the image.</param>
            <param name="pixelChannels">The number of channels per pixel (must be 1 (grayscale), 3 (BGR) or 4 (BGRA)).</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new PixelProcessingwrapper at the specified size.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="pixelChannels">The number of channels per pixel (must be 1 (grayscale), 3 (BGR) or 4 (BGRA)).</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Drawing.Size,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Initializes a new PixelProcessingwrapper at the specified size.
            </summary>
            <param name="size">The size of the image.</param>
            <param name="pixelChannels">The number of channels per pixel (must be 8bpp, 24bpp or 32bpp).</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Initializes a new PixelProcessingwrapper at the specified size.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="pixelChannels">The number of channels per pixel (must be 8bpp, 24bpp or 32bpp).</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Drawing.PixelWorker)">
            <summary>
            Creates a new PixelWorker instance that is a copy of the specified instance.
            </summary>
            <param name="toCopy">The instance to copy.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new PixelWorker from the specified image path.
            </summary>
            <param name="imagePath">The path to the image to load from.</param>
            <param name="useBuffer">Whether changing pixel values are written to a buffer instead of directly to an image (false usually means faster).</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new PixelWorker from the specified image path.
            </summary>
            <param name="stream">The stream to load the image from.</param>
            <param name="useBuffer">Whether changing pixel values are written to a buffer instead of directly to an image (false usually means faster).</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Single[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new PixelProcessingwrapper from the specified pixel values.
            </summary>
            <param name="pixels">The pixel channels array of the image.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="normalize">Whether to normalize the values to 255 before use.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new PixelProcessingwrapper from the pixel values.
            </summary>
            <param name="pixels">The pixel channels array of the image.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="copyPixelArray">Whether to copy the pixel array or just reference it.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.#ctor(System.Drawing.Imaging.BitmapData,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new PixelProcessingwrapper from the given locked bitmap data.
            </summary>
            <param name="bitmapData">The pixel channels array of the image.</param>
            <param name="useBuffer">Whether changing pixel values are written to a buffer instead of directly to the image (false usually means faster).</param>
            <param name="writeOnDispose">Whether to save changes on dispose.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.FromImage(System.Drawing.Bitmap,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a PixelWorker from the specified image.
            </summary>
            <param name="image">The image to get the required data from.</param>
            <param name="useBuffer">Whether changing pixel values are written to a buffer instead of directly to the image (false means faster).</param>
            <param name="writeOnDispose">Whether to write changes on dispose.</param>
            <param name="disposeImage">Whether to dispose the image as well on dispose.</param>
            <param name="doNotUseImageDirectly">If true, the image is copied into a buffer and the original is left untouched.</param>
            <param name="lockBitmap">For internal use only.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.FromImage(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a PixelWorker from the specified image. If the bit depth is not supported (not 8, 24 or 32), then null is returned.
            </summary>
            <param name="image">The image to get the required data from.</param>
            <param name="rect">The region to extract from the image for the pixel worker.</param>
            <param name="useBuffer">Whether changing pixel values are written to a buffer instead of directly to the image (false means faster).</param>
            <param name="writeOnDispose">Whether to write changes on dispose.</param>
            <param name="disposeImage">Whether to dispose the image as well on dispose.</param>
            <param name="doNotUseImageDirectly">If true, the image is copied into a buffer and the original is left untouched.</param>
            <param name="lockBitmap">For internal use only.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ToBitmap">
            <summary>
            Gets a copy of the image represented by this instance.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.op_Explicit(System.Drawing.Bitmap)~System.Drawing.PixelWorker">
            <summary>
            Initializes a PixelWorker from the Bitmap using default values.
            </summary>
            <param name="image">The image to initialize from.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.op_Explicit(System.Drawing.PixelWorker)~System.Drawing.Bitmap">
            <summary>
            Gets the underlying bitmap of the PixelWorker instance.
            WARNING: IMAGE MAY BE LOCKED.
            </summary>
            <param name="worker">The worker whose image to obtain.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.LoadBuffer">
            <summary>
            DO NOT USE UNLESS NECESSARY. Refills the buffer from the bitmap memory.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.ToByteArray(System.Boolean)">
            <summary>
            Gets the pixels as a byte array.
            </summary>
            <param name="copyIfBuffer">If true and UsingBuffer is true, then the buffer is copied.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.CopyFrom(System.Drawing.Bitmap)">
            <summary>
            Copies the pixel values from the specified bitmap into the buffer of this instance.
            </summary>
            <param name="image">The worker whose values to copy. DIMENSIONS MUST BE THE SAME AS THIS ONE.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.CopyFrom(System.Drawing.PixelWorker)">
            <summary>
            Copies the pixel values from the specified worker into the buffer of this instance.
            </summary>
            <param name="pixels">The worker whose values to copy. DIMENSIONS MUST BE THE SAME AS THIS ONE.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.CopyFrom(System.Single[],System.Boolean)">
            <summary>
            Copies the specified pixel values into the buffer of this instance.
            </summary>
            <param name="values">The values to copy. Negative values will not render correctly. DIMENSIONS MUST BE THE SAME AS THIS ONE.</param>
            <param name="normalize">Whether to normalize the values to 255 before use.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.CopyFrom(System.Byte[],System.Boolean)">
            <summary>
            Copies the specified pixel values into the buffer of this instance.
            </summary>
            <param name="pixels">The values to copy. DIMENSIONS MUST BE THE SAME AS THIS ONE.</param>
            <param name="copyPixelArray">If true, the buffer will be copied instead of simply referenced.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelIndex(System.Int32,System.Int32)">
            <summary>
            Gets the pixel index referred to by the specified coordinates.
            </summary>
            <param name="x">The X-coordinate of the pixel.</param>
            <param name="y">The Y-coordinate of the pixel.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelPointUsingPixelCount(System.Int32)">
            <summary>
            Gets the pixel point referred to by the specified pixel.
            </summary>
            <param name="index">The pixel number (horizontal scan).</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelPoint(System.Int32)">
            <summary>
            Gets the pixel point referred to by the specified pixel.
            </summary>
            <param name="index">The pixel address (horizontal scan).</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixel(System.Drawing.Point)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelBgra(System.Drawing.Point)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelBgra(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelClamped(System.Drawing.Point)">
            <summary>
            Gets the color of specified pixel. If the pixel is out of range, the color of the closest pixel is returned.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelClampedBgra(System.Drawing.Point)">
            <summary>
            Gets the color of specified pixel. If the pixel is out of range, the color of the closest pixel is returned.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelClamped(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel. If the pixel is out of range, the color of the closest pixel is returned.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelClampedBgra(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel. If the pixel is out of range, the color of the closest pixel is returned.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixel(System.Int32)">
            <summary>
            Gets the color of specified pixel address.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelBgra(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelUsingPixelCount(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetPixelUsingPixelCountBgra(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get32BitPixelUsingPixelCount(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get32BitPixelUsingPixelCountBgra(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get24BitPixelUsingPixelCount(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get24BitPixelUsingPixelCountBgra(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get8BitPixelUsingPixelCount(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get8BitPixelUsingPixelCountBgra(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get32BitPixel(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get32BitPixelBgra(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get24BitPixel(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get24BitPixelBgra(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.IsAlpha(System.Int32)">
            <summary>
            Gets whether the specified component is an alpha component.
            </summary>
            <param name="componentIndex">The index of the component.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get8BitPixel(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get8BitPixelBgra(System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get32BitPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get32BitPixelBgra(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get24BitPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get24BitPixelBgra(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetAllPixels">
            <summary>
            Gets all the colors of pixels (slow).
            </summary>
            <returns>The array of pixel colors.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetAllPixelsBgra">
            <summary>
            Gets all the colors of pixels.
            </summary>
            <returns>The array of pixel colors.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.Clear(System.Byte)">
            <summary>
            Clears all pixels and set all components to the specified value.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.Clear">
            <summary>
            Clears all pixels.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.Clear(System.Drawing.Color)">
            <summary>
            Clears all pixels with the specified color.
            </summary>
            <param name="color">The color to set all pixels to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Clear(System.Drawing.BgraColor)">
            <summary>
            Clears all pixels with the specified color.
            </summary>
            <param name="color">The color to set all pixels to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Get8BitPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <returns>The Color of the specified pixel in the image.</returns>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Drawing.Point,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Drawing.Point,System.Drawing.BgraColor)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Drawing.Point,System.Drawing.BgraColor@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="pixel">The location of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Int32,System.Int32,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Int32,System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Int32,System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Int32,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixel(System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixelUsingPixelCount(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixelUsingPixelCount(System.Int32,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixelUsingPixelCount(System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetPixelUsingPixelCount(System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixelUsingPixelCount(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixelUsingPixelCount(System.Int32,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixelUsingPixelCount(System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixelUsingPixelCount(System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixelUsingPixelCount(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixelUsingPixelCount(System.Int32,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set8BitPixelUsingPixelCount(System.Int32,System.Byte)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index from 0 to (pixelCount-1) of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixel(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixel(System.Int32,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixel(System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixel(System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixel(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixel(System.Int32,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixel(System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixel(System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set8BitPixel(System.Int32,System.Byte)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="index">The index of the pixel to address.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixel(System.Int32,System.Int32,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixel(System.Int32,System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set32BitPixel(System.Int32,System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixel(System.Int32,System.Int32,System.Drawing.Color@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixel(System.Int32,System.Int32,System.Drawing.BgraColor)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set24BitPixel(System.Int32,System.Int32,System.Drawing.BgraColor@)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Set8BitPixel(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the color of the specified pixel.
            </summary>
            <param name="x">The X-coordinate of the pixel in the image.</param>
            <param name="y">The Y-coordinate of the pixel in the image.</param>
            <param name="color">The color to set the specified pixel's color to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetAllPixels(System.Drawing.Color[])">
            <summary>
            Sets all the pixels to the specified colors (slow).
            </summary>
            <param name="colors">The array of colors to set the pixels to.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SetAllPixels(System.Drawing.BgraColor[])">
            <summary>
            Sets all the pixels to the specified colors (fast).
            </summary>
            <param name="colors">The array of colors to set the pixels to. Must be the same number of pixels.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ToFloatArray">
            <summary>
            Gets a float array that holds a copy of the values contained in this instance.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.ToFloatArray(System.Single)">
            <summary>
            Gets a float array that holds a copy of the values contained in this instance.
            </summary>
            <param name="multiplier"></param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels(System.Func{System.Int32,System.Drawing.Color,System.Drawing.Color})">
            <summary>
            Applies a transformation function to every pixel in an image (slow).
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and color as an input and returns the new Color.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels(System.Func{System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color},System.Drawing.PixelWorker)">
            <summary>
            Applies a transformation function to every pixel in an image (slow).
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and the corresponding pixel from the given image as an input and returns the new Color.</param>
            <param name="paramImage">The image whose corresponding pixels to pass as parameters.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``1(System.Func{System.Int32,System.Drawing.Color,``0,System.Drawing.Color},``0)">
            <summary>
            Applies a transformation function to every pixel in an image (slow).
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and some parameters as an input and returns the new Color.</param>
            <param name="param2">Param2</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``1(System.Func{System.Int32,System.Drawing.Color,System.Drawing.Color,``0,System.Drawing.Color},System.Drawing.PixelWorker,``0)">
            <summary>
            Applies a transformation function to every pixel in an image (slow).
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and the corresponding pixel from the given image and some parameters as an input and returns the new Color.</param>
            <param name="paramImage">The image whose corresponding pixels to pass as parameters.</param>
            <param name="param3">Param3</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``2(System.Func{System.Int32,System.Drawing.Color,``0,``1,System.Drawing.Color},``0,``1)">
            <summary>
            Applies a transformation function to every pixel in an image (slow).
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and some parameters as an input and returns the new Color.</param>
            <param name="param2">Param2</param>
            <param name="param3">Param3</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``2(System.Func{System.Int32,System.Drawing.Color,System.Drawing.Color,``0,``1,System.Drawing.Color},System.Drawing.PixelWorker,``0,``1)">
            <summary>
            Applies a transformation function to every pixel in an image (slow).
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and the corresponding pixel from the given image and some parameters as an input and returns the new Color.</param>
            <param name="paramImage">The image whose corresponding pixels to pass as parameters.</param>
            <param name="param3">Param3</param>
            <param name="param4">Param4</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``3(System.Func{System.Int32,System.Drawing.Color,``0,``1,``2,System.Drawing.Color},``0,``1,``2)">
            <summary>
            Applies a transformation function to every pixel in an image (slow).
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and some parameters as an input and returns the new Color.</param>
            <param name="param2">Param2</param>
            <param name="param3">Param3</param>
            <param name="param4">Param4</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``3(System.Func{System.Int32,System.Drawing.Color,System.Drawing.Color,``0,``1,``2,System.Drawing.Color},System.Drawing.PixelWorker,``0,``1,``2)">
            <summary>
            Applies a transformation function to every pixel in an image (slow).
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and the corresponding pixel from the given image and some parameters as an input and returns the new Color.</param>
            <param name="paramImage">The image whose corresponding pixels to pass as parameters.</param>
            <param name="param3">Param3</param>
            <param name="param4">Param4</param>
            <param name="param5">Param5</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``4(System.Func{System.Int32,System.Drawing.Color,``0,``1,``2,``3,System.Drawing.Color},``0,``1,``2,``3)">
            <summary>
            Applies a transformation function to every pixel in an image (slow).
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and some parameters as an input and returns the new Color.</param>
            <param name="param2">Param2</param>
            <param name="param3">Param3</param>
            <param name="param4">Param4</param>
            <param name="param5">Param5</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels(System.Func{System.Int32,System.Drawing.BgraColor,System.Drawing.BgraColor})">
            <summary>
            Applies a transformation function to every pixel in an image.
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and BgraColor as an input and returns the new BgraColor.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``1(System.Func{System.Int32,System.Drawing.BgraColor,``0,System.Drawing.BgraColor},``0)">
            <summary>
            Applies a transformation function to every pixel in an image.
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and BgraColor and some parameters as an input and returns the new BgraColor.</param>
            <param name="param2">Param2</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``2(System.Func{System.Int32,System.Drawing.BgraColor,``0,``1,System.Drawing.BgraColor},``0,``1)">
            <summary>
            Applies a transformation function to every pixel in an image.
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and BgraColor and some parameters as an input and returns the new BgraColor.</param>
            <param name="param2">Param2</param>
            <param name="param3">Param3</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``3(System.Func{System.Int32,System.Drawing.BgraColor,``0,``1,``2,System.Drawing.BgraColor},``0,``1,``2)">
            <summary>
            Applies a transformation function to every pixel in an image.
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and BgraColor and some parameters as an input and returns the new BgraColor.</param>
            <param name="param2">Param2</param>
            <param name="param3">Param3</param>
            <param name="param4">Param4</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``4(System.Func{System.Int32,System.Drawing.BgraColor,``0,``1,``2,``3,System.Drawing.BgraColor},``0,``1,``2,``3)">
            <summary>
            Applies a transformation function to every pixel in an image.
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and BgraColor and some parameters as an input and returns the new BgraColor.</param>
            <param name="param2">Param2</param>
            <param name="param3">Param3</param>
            <param name="param4">Param4</param>
            <param name="param5">Param5</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels(System.Func{System.Int32,System.Drawing.BgraColor,System.Drawing.BgraColor,System.Drawing.BgraColor},System.Drawing.PixelWorker)">
            <summary>
            Applies a transformation function to every pixel in an image.
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and some parameters as an input and returns the new Color.</param>
            <param name="paramImage">The image whose corresponding pixels to pass as parameters.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``1(System.Func{System.Int32,System.Drawing.BgraColor,System.Drawing.BgraColor,``0,System.Drawing.BgraColor},System.Drawing.PixelWorker,``0)">
            <summary>
            Applies a transformation function to every pixel in an image.
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and some parameters as an input and returns the new Color.</param>
            <param name="paramImage">The image whose corresponding pixels to pass as parameters.</param>
            <param name="param3">Param3</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``2(System.Func{System.Int32,System.Drawing.BgraColor,System.Drawing.BgraColor,``0,``1,System.Drawing.BgraColor},System.Drawing.PixelWorker,``0,``1)">
            <summary>
            Applies a transformation function to every pixel in an image.
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index and Color and some parameters as an input and returns the new Color.</param>
            <param name="paramImage">The image whose corresponding pixels to pass as parameters.</param>
            <param name="param3">Param3</param>
            <param name="param4">Param4</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ApplyFunctionToAllPixels``3(System.Func{System.Int32,System.Drawing.BgraColor,System.Drawing.BgraColor,``0,``1,``2,System.Drawing.BgraColor},System.Drawing.PixelWorker,``0,``1,``2)">
            <summary>
            Applies a transformation function to every pixel in an image.
            </summary>
            <param name="transformationFunction">The transformation function that takes a pixel index Color and some parameters as an input and returns the new Color.</param>
            <param name="paramImage">The image whose corresponding pixels to pass as parameters.</param>
            <param name="param3">Param3</param>
            <param name="param4">Param4</param>
            <param name="param5">Param5</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps the specified components by index (between and including 0 and PixelComponentCount - 1).
            </summary>
            <param name="c1">The first component index.</param>
            <param name="c2">The second component index.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Swap(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Swaps the specified pixels by location.
            </summary>
            <param name="p1">The first pixel.</param>
            <param name="p2">The second pixel.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Swap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Swaps the specified pixels by location.
            </summary>
            <param name="x1">The X-coordinate of the first pixel.</param>
            <param name="y1">The Y-coordinate of the first pixel.</param>
            <param name="x2">The X-coordinate of the second pixel.</param>
            <param name="y2">The Y-coordinate of the second pixel.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.SwapPixel(System.Int32,System.Int32)">
            <summary>
            Swaps the specified pixels by index  (between and including 0 and pixelCount - 1).
            </summary>
            <param name="p1">The index of the first pixel.</param>
            <param name="p2">The index of the second pixel.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ExtractChannel(System.Int32)">
            <summary>
            Isolates and extracts the specified color channel from the image.
            </summary>
            <param name="channel">0 for Blue, 1 for Green, 2 for Red, 3 for Alpha.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.PremultiplyAlpha">
            <summary>
            Premultiplies the alpha components of the image.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.SwapChannels(System.Int32,System.Int32)">
            <summary>
            Swaps the specified channels (0 => B, 1 => G, 2 => R, 3 => A).
            </summary>
            <param name="channel1">The channel to swap.</param>
            <param name="channel2">The channel to swap with.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.RotateFlip(System.Drawing.RotateFlipType)">
            <summary>
            Rotates, flips, or rotates and flips the image.
            </summary>
            <param name="mode">The transformation to apply.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Rotate90(System.Boolean)">
            <summary>
            Rotates the image 90 degrees.
            </summary>
            <param name="clockwise">If true the image will be rotated 90 degrees clockwise, otherwise it will be rotated 90 degrees anticlockwise.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.MarkBufferResize(System.Int32,System.Int32)">
            <summary>
            FOR INTERNAL USE ONLY: Marks that the buffer size has been changed.
            </summary>
            <param name="newWidth">The new image width.</param>
            <param name="newHeight">The new image height.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.Rotate180">
            <summary>
            Rotates the image 180 degrees.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.Flip(System.Boolean,System.Boolean)">
            <summary>
            Flips the image in the orientation desired.
            </summary>
            <param name="flipX">Whether to flip horizontally.</param>
            <param name="flipY">Whether to flip vertically.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ConvertToGrayscale(System.Boolean)">
            <summary>
            Converts this image to 8-bit grayscale image (beware that this starts writing to a new buffer unless it's already grayscale).
            </summary>
            <param name="premultiplyAlpha">If true, the alpha channel is premultiplied to the color channels.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ConvertTo24Bit(System.Boolean)">
            <summary>
            Converts this image to 24-bit BGR image (beware that this starts writing to a new buffer unless it's already BGR).
            </summary>
            <param name="premultiplyAlpha">If true, the alpha channel is premultiplied to the color channels.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.ConvertTo32Bit">
            <summary>
            Converts this image to 32-bit BGRA image (beware that this starts writing to a new buffer unless it's already BGRA).
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.PinPointer">
            <summary>
            Gets a pointer to the start of the image in memory. Be sure to dispose the pointer after use.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.WriteChanges(System.Boolean)">
            <summary>
            Writes all modifications to the bitmap.
            </summary>
            <param name="unlockAfter">Whether to unlock bitmap after writing changes.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.LockBits(System.Drawing.Imaging.ImageLockMode)">
            <summary>
            DO NOT USE UNLESS NECESSARY. Locks the bits of the image.
            </summary>
            <param name="mode">The mode to lock with.</param>
        </member>
        <member name="M:System.Drawing.PixelWorker.UnlockBits">
            <summary>
            DO NOT USE UNLESS NECESSARY. Unlocks the bits of the image.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.GetEnumerator">
            <summary>
            Returns an enumerator that quickly iterates through the bytes of the PixelWorker.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that quickly iterates through the bytes of the PixelWorker.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.ShallowClone">
            <summary>
            Makes a shallow clone of this instance in place.
            Do this when you want to keep a reference from being disposed by simply increasing the reference counter.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.Clone">
            <summary>
            Makes a shallow clone the PixelWorker.
            Do this when you want to keep a reference from being disposed by simply increasing the reference counter.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.ToString">
            <summary>
            Returns a string that describes this instance.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.Finalize">
            <summary>
            Disposes the current instance.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.Dispose">
            <summary>
            Disposes of the original image.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.Dispose(System.Boolean)">
            <summary>
            Disposes of the original image.
            </summary>
            <param name="writeChanges">Whether to write any modifications to the image.</param>
        </member>
        <member name="T:System.Drawing.PixelWorker.PointerWrapper">
            <summary>
            Handles a pointer to an image in memory. DO NOT CALL DISPOSE TWICE.
            This intended to be used within a 'using' block.
            </summary>
        </member>
        <member name="F:System.Drawing.PixelWorker.PointerWrapper.Pointer">
            <summary>
            A pointer to the image in memory.
            </summary>
        </member>
        <member name="P:System.Drawing.PixelWorker.PointerWrapper.IsDisposed">
            <summary>
            Gets whether the pointer is disposed.
            </summary>
        </member>
        <member name="M:System.Drawing.PixelWorker.PointerWrapper.Dispose">
            <summary>
            Frees the pointer.
            </summary>
        </member>
        <member name="T:System.ExceptionMode">
            <summary>
            Represents the exception handling mode.
            </summary>
        </member>
        <member name="F:System.ExceptionMode.Log">
            <summary>
            Logs any exception that may arise but does not throw.
            </summary>
        </member>
        <member name="F:System.ExceptionMode.Throw">
            <summary>
            Throws the exception that was encountered.
            </summary>
        </member>
        <member name="F:System.ExceptionMode.Ignore">
            <summary>
            Silently ignores any exceptions.
            </summary>
        </member>
        <member name="T:System.Half">
            <summary>
            Represents a half-precision floating-point number. It occupies only 16 bits, which are split into 1 Sign bit, 5 Exponent bits and 10 Mantissa bits.
            </summary>
        </member>
        <member name="F:System.Half.SizeInBytes">
            <summary>
            The size in bytes for an instance of the Half struct.
            </summary>
        </member>
        <member name="F:System.Half.Type">
            <summary>
            The type of Half.
            </summary>
        </member>
        <member name="F:System.Half.Zero">
            <summary>
            A value that represents 0.
            </summary>
        </member>
        <member name="F:System.Half.One">
            <summary>
            A value that represents 1.
            </summary>
        </member>
        <member name="F:System.Half.MinusOne">
            <summary>
            A value that represents -1.
            </summary>
        </member>
        <member name="F:System.Half.MinValue">
            <summary>Smallest positive half</summary>
        </member>
        <member name="F:System.Half.MinNormalizedValue">
            <summary>Smallest positive normalized half</summary>
        </member>
        <member name="F:System.Half.MaxValue">
            <summary>Largest positive half</summary>
        </member>
        <member name="F:System.Half.Epsilon">
            <summary>Smallest positive e for which half (1.0 + e) != half (1.0)</summary>
        </member>
        <member name="F:System.Half.Bits">
            <summary>
            The bits used to represent this instance.
            </summary>
        </member>
        <member name="P:System.Half.IsZero">
            <summary>Returns true if the Half is zero.</summary>
        </member>
        <member name="P:System.Half.IsNaN">
            <summary>Returns true if the Half represents Not A Number (NaN)</summary>
        </member>
        <member name="P:System.Half.IsPositiveInfinity">
            <summary>Returns true if the Half represents positive infinity.</summary>
        </member>
        <member name="P:System.Half.IsNegativeInfinity">
            <summary>Returns true if the Half represents negative infinity.</summary>
        </member>
        <member name="M:System.Half.#ctor(System.Single)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="f">32-bit single-precision floating-point number.</param>
        </member>
        <member name="M:System.Half.#ctor(System.Double)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="d">64-bit double-precision floating-point number.</param>
        </member>
        <member name="M:System.Half.ToSingle">
            <summary>Converts the 16-bit half to 32-bit floating-point.</summary>
            <returns>A single-precision floating-point number.</returns>
        </member>
        <member name="M:System.Half.HalfToFloat(System.UInt16)">
            <summary>Ported from OpenEXR's IlmBase 1.0.1</summary>
        </member>
        <member name="M:System.Half.op_Explicit(System.Single)~System.Half">
            <summary>
            Converts a System.Single to a System.Half.
            </summary>
            <param name="f">The value to convert.
            A <see cref="T:System.Single"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Half"/>
            </returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Double)~System.Half">
            <summary>
            Converts a System.Double to a System.Half.
            </summary>
            <param name="d">The value to convert.
            A <see cref="T:System.Double"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Half"/>
            </returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Half)~System.Single">
            <summary>
            Converts a System.Half to a System.Single.
            </summary>
            <param name="h">The value to convert.
            A <see cref="T:System.Half"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Single"/>
            </returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Half)~System.Double">
            <summary>
            Converts a System.Half to a System.Double.
            </summary>
            <param name="h">The value to convert.
            A <see cref="T:System.Half"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Double"/>
            </returns>
        </member>
        <member name="M:System.Half.op_Equality(System.Half,System.Half)">
            <summary>
            Compares the two values and return true if equal.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Inequality(System.Half,System.Half)">
            <summary>
            Compares the two values and return true if not equal.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_LessThan(System.Half,System.Single)">
            <summary>
            Compares the two values and return true if left is smaller.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_GreaterThan(System.Half,System.Single)">
            <summary>
            Compares the two values and return true if left is smaller.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_LessThan(System.Single,System.Half)">
            <summary>
            Compares the two values and return true if left is smaller.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_GreaterThan(System.Single,System.Half)">
            <summary>
            Compares the two values and return true if left is smaller.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_LessThan(System.Half,System.Half)">
            <summary>
            Compares the two values and return true if left is smaller.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_GreaterThan(System.Half,System.Half)">
            <summary>
            Compares the two values and return true if left is smaller.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_LessThanOrEqual(System.Half,System.Single)">
            <summary>
            Compares the two values and return true if left is smaller or equal.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_GreaterThanOrEqual(System.Half,System.Single)">
            <summary>
            Compares the two value and return true if left is greater or equal.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_LessThanOrEqual(System.Single,System.Half)">
            <summary>
            Compares the two values and return true if left is smaller or equal.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_GreaterThanOrEqual(System.Single,System.Half)">
            <summary>
            Compares the two value and return true if left is greater or equal.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_LessThanOrEqual(System.Half,System.Half)">
            <summary>
            Compares the two values and return true if left is smaller or equal.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_GreaterThanOrEqual(System.Half,System.Half)">
            <summary>
            Compares the two value and return true if left is greater or equal.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_UnaryPlus(System.Half)">
            <summary>
            Does nothing lol
            </summary>
            <param name="value">lol why</param>
        </member>
        <member name="M:System.Half.op_UnaryNegation(System.Half)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value to negate.</param>
        </member>
        <member name="M:System.Half.op_Addition(System.Half,System.Single)">
            <summary>
            Adds the two values.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Addition(System.Single,System.Half)">
            <summary>
            Adds the two values.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Addition(System.Half,System.Half)">
            <summary>
            Adds the two values.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Subtraction(System.Single,System.Half)">
            <summary>
            Subtracts the second value from the first value.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Subtraction(System.Half,System.Single)">
            <summary>
            Subtracts the second value from the first value.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Subtraction(System.Half,System.Half)">
            <summary>
            Subtracts the second value from the first value.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Multiply(System.Half,System.Half)">
            <summary>
            Multiplies the two value.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Multiply(System.Half,System.Single)">
            <summary>
            Multiplies the two value.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Multiply(System.Single,System.Half)">
            <summary>
            Multiplies the two value.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Division(System.Half,System.Half)">
            <summary>
            Divides the second value from the first half.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Division(System.Half,System.Single)">
            <summary>
            Divides the second value from the first half.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.op_Division(System.Single,System.Half)">
            <summary>
            Divides the second value from the first half.
            </summary>
            <param name="left">Left value</param>
            <param name="right">Right value</param>
        </member>
        <member name="M:System.Half.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:System.Half.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:System.Half.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the Half by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:System.Half.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the Half into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:System.Half.Equals(System.Half)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified System.Half value.
            </summary>
            <param name="other">System.Half object to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:System.Half.Equals(System.Object)">
            <summary>
            Returns whether the specified object is equal to this one.
            </summary>
            <param name="obj">The object to compare against.</param>
        </member>
        <member name="M:System.Half.GetHashCode">
            <summary>
            Gets the hash code of this instance.
            </summary>
        </member>
        <member name="M:System.Half.CompareTo(System.Single)">
            <summary>
            Compares this instance to a specified half-precision floating-point number
            and returns an integer that indicates whether the value of this instance
            is less than, equal to, or greater than the value of the specified half-precision
            floating-point number. 
            </summary>
            <param name="other">A half-precision floating-point number to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. If the number is:
            <para>Less than zero, then this instance is less than other, or this instance is not a number
            (System.Half.NaN) and other is a number.</para>
            <para>Zero: this instance is equal to value, or both this instance and other
            are not a number (System.Half.NaN), System.Half.PositiveInfinity, or
            System.Half.NegativeInfinity.</para>
            <para>Greater than zero: this instance is greater than othrs, or this instance is a number
            and other is not a number (System.Half.NaN).</para>
            </returns>
        </member>
        <member name="M:System.Half.CompareTo(System.Half)">
            <summary>
            Compares this instance to a specified half-precision floating-point number
            and returns an integer that indicates whether the value of this instance
            is less than, equal to, or greater than the value of the specified half-precision
            floating-point number. 
            </summary>
            <param name="other">A half-precision floating-point number to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. If the number is:
            <para>Less than zero, then this instance is less than other, or this instance is not a number
            (System.Half.NaN) and other is a number.</para>
            <para>Zero: this instance is equal to value, or both this instance and other
            are not a number (System.Half.NaN), System.Half.PositiveInfinity, or
            System.Half.NegativeInfinity.</para>
            <para>Greater than zero: this instance is greater than othrs, or this instance is a number
            and other is not a number (System.Half.NaN).</para>
            </returns>
        </member>
        <member name="M:System.Half.ToString">
            <summary>Converts this Half into a human-legible string representation.</summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:System.Half.ToString(System.String,System.IFormatProvider)">
            <summary>Converts this Half into a human-legible string representation.</summary>
            <param name="format">Formatting for the output string.</param>
            <param name="formatProvider">Culture-specific formatting information.</param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:System.Half.Parse(System.String)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent.</summary>
            <param name="s">String representation of the number to convert.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="M:System.Half.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent.</summary>
            <param name="s">String representation of the number to convert.</param>
            <param name="style">Specifies the format of s.</param>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="M:System.Half.TryParse(System.String,System.Half@)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent. Returns success.</summary>
            <param name="s">String representation of the number to convert.</param>
            <param name="result">The Half instance to write to.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:System.Half.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Half@)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent. Returns success.</summary>
            <param name="s">String representation of the number to convert.</param>
            <param name="style">Specifies the format of s.</param>
            <param name="provider">Culture-specific formatting information.</param>
            <param name="result">The Half instance to write to.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:System.Half.GetBytes(System.Half)">
            <summary>Returns the Half as an array of bytes.</summary>
            <param name="h">The Half to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:System.Half.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half.</summary>
            <param name="value">A Half in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="T:System.IO.Json">
            <summary>
            Provides methods for working with data in JavaScript Object Notation (JSON) format.
            </summary>
        </member>
        <member name="M:System.IO.Json.Decode(System.String,System.Boolean)">
            <summary>
            Converts data in JavaScript Object Notation (JSON) format into a data object.
            </summary>
            <param name="value">The JSON object to deserialize.</param>
            <param name="caseInsensitiveDictonary">Whether the returned dictionary is case insensitive.
            Note that sub-dictionaries would still be case-sensitive.</param>
        </member>
        <member name="M:System.IO.Json.Decode(System.String,System.Type)">
            <summary>
            Converts data in JavaScript Object Notation (JSON) format into a data object.
            </summary>
            <param name="value">The JSON object to deserialize.</param>
            <param name="targetType">The type to deserialize to.</param>
        </member>
        <member name="M:System.IO.Json.Decode``1(System.String)">
            <summary>
            Converts data in JavaScript Object Notation (JSON) format into a data object.
            </summary>
            <param name="value">The JSON object to deserialize.</param>
        </member>
        <member name="M:System.IO.Json.Encode(System.Object)">
            <summary>
            Converts a data object to a string that is in the JavaScript Object Notation (JSON) format.
            </summary>
            <param name="value">The JSON object to serialize.</param>
        </member>
        <member name="M:System.IO.Json.Encode``2(System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Converts a data object to a string that is in the JavaScript Object Notation (JSON) format.
            </summary>
            <param name="pair">The JSON object to serialize.</param>
        </member>
        <member name="T:System.IO.Compression.CompressionUtils">
            <summary>
            Contains utilities for handling Zip compression.
            </summary>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.Compress(System.Byte[])">
            <summary>
            Compresses the byte array using a Zip algorithm.
            </summary>
            <param name="bytes">The byte array to compress.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.CompressToStream(System.Byte[])">
            <summary>
            Compresses the byte array onto a stream in memory.
            </summary>
            <param name="bytes">The byte array to compress.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.Compress(System.IO.Stream)">
            <summary>
            Compresses the stream into a byte array.
            </summary>
            <param name="stream">The stream of data to compress.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.CompressToStream(System.IO.Stream)">
            <summary>
            Compresses the stream onto a memory stream.
            </summary>
            <param name="stream">The stream of data to compress.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.Decompress(System.Byte[])">
            <summary>
            Deompresses the byte array using a Zip algorithm.
            </summary>
            <param name="bytes">The byte array of compressed data.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.DecompressToStream(System.Byte[])">
            <summary>
            Decompresses the byte array onto a stream in memory.
            </summary>
            <param name="bytes">The byte array of compressed data.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.Decompress(System.IO.Stream)">
            <summary>
            Decompresses the stream into a byte array.
            </summary>
            <param name="stream">The stream of compressed data.</param>
        </member>
        <member name="M:System.IO.Compression.CompressionUtils.DecompressToStream(System.IO.Stream)">
            <summary>
            Decompresses the stream onto a memory stream.
            </summary>
            <param name="stream">The stream of compressed data.</param>
        </member>
        <member name="T:System.IO.FileUtils">
            <summary>
            A collection of tools for managing and loading files.
            </summary>
        </member>
        <member name="F:System.IO.FileUtils.Directories">
            <summary>
            The directories to add to relative path searching.
            </summary>
        </member>
        <member name="M:System.IO.FileUtils.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:System.IO.FileUtils.LoadFileTimeout(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Loads the specified file and returns null if the file could not be loaded. If the file is currently locked/in use,
            the function will retry loading until the specified timeout expires.
            </summary>
            <param name="path">>A path to the file (can be relative or absolute).</param>
            <param name="mode">The file mode to use.</param>
            <param name="accessLevel">The access right level requested by this instance.</param>
            <param name="permissionsForOtherStreams">What to allow other filestreams to do while this stream is open.</param>
            <param name="timeout">The retry timeout in milliseconds if a file is in use (or 0 to only try once, -1 to retry indefinitely).</param>
        </member>
        <member name="M:System.IO.FileUtils.LoadFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Boolean)">
            <summary>
            Loads the specified file using a stream.
            </summary>
            <param name="path">A path to the file (can be relative or absolute).</param>
            <param name="mode">The file mode to use.</param>
            <param name="accessLevel">The access right level requested by this instance.</param>
            <param name="permissionsForOtherStreams">What to allow other filestreams to do while this stream is open.</param>
            <param name="throwOnError">Whether to throw an exception when the file is not found.</param>
        </member>
        <member name="M:System.IO.FileUtils.LoadFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Loads the specified file using a stream.
            </summary>
            <param name="path">A path to the file (can be relative or absolute).</param>
            <param name="mode">The file mode to use.</param>
            <param name="accessLevel">The access right level requested by this instance.</param>
            <param name="permissionsForOtherStreams">What to allow other filestreams to do while this stream is open.</param>
        </member>
        <member name="M:System.IO.FileUtils.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Loads the specified file as a string.
            </summary>
            <param name="path">A path to the file (can be relative or absolute).</param>
            <param name="encoding">The encoding to use (null is UTF-8).</param>
        </member>
        <member name="M:System.IO.FileUtils.FolderExists(System.String)">
            <summary>
            Returns whether the specified folder exists.
            </summary>
            <param name="path">The path to the directory.</param>
        </member>
        <member name="M:System.IO.FileUtils.FileExists(System.String)">
            <summary>
            Returns whether the specified file exists.
            </summary>
            <param name="path">The path to the file.</param>
        </member>
        <member name="M:System.IO.FileUtils.Exists(System.String)">
            <summary>
            Returns whether the specified file or folder exists.
            </summary>
            <param name="path">The path to the file or folder.</param>
        </member>
        <member name="M:System.IO.FileUtils.LoadFileBuffered(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Boolean)">
            <summary>
            Loads the specified file using a buffered stream.
            </summary>
            <param name="path">A path to the file (can be relative or absolute).</param>
            <param name="mode">The file mode to use.</param>
            <param name="throwOnError">Whether to throw an exception when the file is not found.</param>
            <param name="accessLevel">The access right level requested by this instance.</param>
            <param name="permissionsForOtherStreams">What to allow other filestreams to do while this stream is open.</param>
        </member>
        <member name="M:System.IO.FileUtils.ToRelativePath(System.String,System.String)">
            <summary>
            Converts an absolute path to path relative to a specified directory which will be used as root.
            No directory separator is appended at the end of the returned string, and the directories do not need to exist.
            If an invalid paths are given, there is high chance that an invalid path is returned.
            </summary>
            <param name="absolutePath">The absolute path to a file/folder to convert to relative path.</param>
            <param name="absolutePathToCurrentDirectory">An absolute path to the directory which the returned path is relative to.</param>
        </member>
        <member name="M:System.IO.FileUtils.SimplifyPath(System.String)">
            <summary>
            Simplifies the specified absolute path by resolving any ".\", "./", "..\" or "../" found.
            Any path separator at the end of the string is removed from the return value.
            If the input is invalid, the output will most probably be invalid as well.
            </summary>
            <param name="absolutePath">The absolute path to resolve (does not need to exist).</param>
        </member>
        <member name="M:System.IO.FileUtils.CombinePath(System.String,System.String)">
            <summary>
            Concatenates the specified path into a single path. Path.DirectorySeparatorChar is used to combine the paths.
            </summary>
            <param name="firstPart">The directory part.</param>
            <param name="secondPart">The subfolder or file part.</param>
        </member>
        <member name="M:System.IO.FileUtils.ResolvePath(System.String,System.Boolean)">
            <summary>
            If the path is relative, it is resolved into absolute, else leave it as is.
            </summary>
            <param name="path">The path to resolve.</param>
            <param name="addDirToPath">Whether to store the directory name so that subsequent lookups would not require directory path.</param>
        </member>
        <member name="M:System.IO.FileUtils.ResolvePath(System.String@,System.Boolean)">
            <summary>
            If the path is relative, it is resolved into absolute, else leave it as is.
            </summary>
            <param name="path">The path to resolve.</param>
            <param name="addDirToPath">Whether to store the directory name so that subsequent lookups would not require directory path.</param>
        </member>
        <member name="M:System.IO.FileUtils.ResolveShortcut(System.String)">
            <summary>
            Resolves the target file of the specified shortcut.
            </summary>
            <param name="file">The path to the shortcut to resolve.</param>
        </member>
        <member name="T:System.IO.StreamUtil">
            <summary>
            Collection of utility methods which operate on streams.
            (With C# 3.0, these could well become extension methods on Stream.)
            </summary>
        </member>
        <member name="M:System.IO.StreamUtil.ReadFully(System.IO.Stream)">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array.
            </summary>
            <param name="input">The stream to read from</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the stream</exception>
            <returns>The data read from the stream</returns>
        </member>
        <member name="M:System.IO.StreamUtil.ReadFully(System.IO.Stream,System.Int32)">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array, using the given buffer size.
            </summary>
            <param name="input">The stream to read from</param>
            <param name="bufferSize">The size of buffer to use when reading</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bufferSize is less than 1</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the stream</exception>
            <returns>The data read from the stream</returns>
        </member>
        <member name="M:System.IO.StreamUtil.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array, using the given buffer for transferring data. Note that the
            current contents of the buffer is ignored, so the buffer needn't
            be cleared beforehand.
            </summary>
            <param name="input">The stream to read from</param>
            <param name="buffer">The buffer to use to transfer data</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentException">buffer is a zero-length array</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the stream</exception>
            <returns>The data read from the stream</returns>
        </member>
        <member name="M:System.IO.StreamUtil.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all the data from one stream into another.
            </summary>
            <param name="input">The stream to read from</param>
            <param name="output">The stream to write to</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentNullException">output is null</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading or writing</exception>
        </member>
        <member name="M:System.IO.StreamUtil.Copy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies all the data from one stream into another, using a buffer
            of the given size.
            </summary>
            <param name="input">The stream to read from</param>
            <param name="output">The stream to write to</param>
            <param name="bufferSize">The size of buffer to use when reading</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentNullException">output is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bufferSize is less than 1</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading or writing</exception>
        </member>
        <member name="M:System.IO.StreamUtil.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copies all the data from one stream into another, using the given 
            buffer for transferring data. Note that the current contents of 
            the buffer is ignored, so the buffer needn't be cleared beforehand.
            </summary>
            <param name="input">The stream to read from</param>
            <param name="output">The stream to write to</param>
            <param name="buffer">The buffer to use to transfer data</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentNullException">output is null</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentException">buffer is a zero-length array</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading or writing</exception>
        </member>
        <member name="M:System.IO.StreamUtil.ReadExactly(System.IO.Stream,System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream.
            If the end of the stream is reached before the specified amount
            of data is read, an exception is thrown.
            </summary>
            <param name="input">The stream to read from</param>
            <param name="bytesToRead">The number of bytes to read</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bytesToRead is less than 1</exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached before 
            enough data has been read</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the stream</exception>
            <returns>The data read from the stream</returns>
        </member>
        <member name="M:System.IO.StreamUtil.ReadExactly(System.IO.Stream,System.Byte[])">
            <summary>
            Reads into a buffer, filling it completely.
            </summary>
            <param name="input">The stream to read from</param>
            <param name="buffer">The buffer to read into</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The buffer is of zero length</exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached before 
            enough data has been read</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the stream</exception>
            <returns>The data read from the stream</returns>
        </member>
        <member name="M:System.IO.StreamUtil.ReadExactly(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream,
            into the given buffer, starting at position 0 of the array.
            </summary>
            <param name="input">The stream to read from</param>
            <param name="buffer">The byte array to read into</param>
            <param name="bytesToRead">The number of bytes to read</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bytesToRead is less than 1</exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached before 
            enough data has been read</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the stream</exception>
        </member>
        <member name="M:System.IO.StreamUtil.ReadExactly(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream,
            into the given buffer, starting at position 0 of the array.
            </summary>
            <param name="input">The stream to read from</param>
            <param name="buffer">The byte array to read into</param>
            <param name="startIndex">The index into the buffer at which to start writing</param>
            <param name="bytesToRead">The number of bytes to read</param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bytesToRead is less than 1, startIndex is less than 0,
            or startIndex+bytesToRead is greater than the buffer length</exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached before 
            enough data has been read</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the stream</exception>
        </member>
        <member name="T:System.Extensions">
            <summary>
            A generic multi-purpose extension library.
            </summary>
        </member>
        <member name="T:System.Extensions.MemsetDelegate">
            <summary>
            The delegate for memset().
            </summary>
            <param name="pointer">Points to the memory region to set.</param>
            <param name="value">The value to set the region to.</param>
            <param name="length">The size of the region.</param>
        </member>
        <member name="F:System.Extensions.TypeOfObject">
            <summary>
            The type of object.
            </summary>
        </member>
        <member name="F:System.Extensions.DesignMode">
            <summary>
            Gets whether the form is currently running in design mode.
            </summary>
        </member>
        <member name="F:System.Extensions.ImageFileExtensions">
            <summary>
            A list of image file extensions.
            </summary>
        </member>
        <member name="M:System.Extensions.CallWndProc(System.Windows.Forms.Control,System.Windows.Forms.Message@)">
            <summary>
            Calles the WndProc method of the specified control, and returns the result.
            </summary>
            <param name="ctrl">The control to send the specified message to.</param>
            <param name="msg">The message to send.</param>
        </member>
        <member name="M:System.Extensions.Memset(System.Byte[],System.Byte,System.Int32,System.Int32)">
            <summary>
            Sets every byte in the specified array to the specified value.
            </summary>
            <param name="array">The array whose values to set.</param>
            <param name="value">The value to set the region to.</param>
            <param name="startIndex">The first index to set.</param>
            <param name="length">The size of the region.</param>
        </member>
        <member name="M:System.Extensions.Memset(System.IntPtr,System.Byte,System.Int32)">
            <summary>
            Sets every byte in the specified memory region to the specified value.
            </summary>
            <param name="pointer">Points to the memory region to set.</param>
            <param name="value">The value to set the region to.</param>
            <param name="length">The size of the region.</param>
        </member>
        <member name="M:System.Extensions.EqualsUnordered``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns whether the specified collections contain the same items are equal ignoring order but not ignoring multiple instances of each item.
            Example: {0, 4, 6, 6} is equal to {6, 0, 4, 6}, but not equal to {0, 6, 4, 6, 6} which is not equal to {4, 4, 0, 6, 6}.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list1">The items in the first list to compare.</param>
            <param name="list2">The items in the second list to compare with.</param>
            <param name="comparer">The item equality comparer to use.</param>
        </member>
        <member name="M:System.Extensions.EqualsUnordered``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns whether the specified collections contain the same items are equal ignoring order but not ignoring multiple instances of each item.
            Example: {0, 4, 6, 6} is equal to {6, 0, 4, 6}, but not equal to {0, 6, 4, 6, 6} which is not equal to {4, 4, 0, 6, 6}.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list1">The items in the first list to compare.</param>
            <param name="list2">The items in the second list to compare with.</param>
            <param name="comparer">The item equality comparer to use.</param>
        </member>
        <member name="M:System.Extensions.Equals(System.Byte[],System.Byte[])">
            <summary>
            Compares the contents of specified byte arrays and returns whether they are equal.
            </summary>
            <param name="array1">The array to compare.</param>
            <param name="array2">The array to compare with.</param>
        </member>
        <member name="M:System.Extensions.Equals(System.Byte*,System.Byte*,System.Int64)">
            <summary>
            Compares the two memory regions are returns whether they are equal.
            </summary>
            <param name="array1">The memory region to compare.</param>
            <param name="array2">The memory region to compare with.</param>
            <param name="length">The length of the memory region length in bytes.</param>
        </member>
        <member name="M:System.Extensions.Or``1(System.Predicate{``0}[])">
            <summary>
            Concatenates the specified predicates by OR-ing their results.
            </summary>
            <typeparam name="T">The type of items to filter.</typeparam>
            <param name="predicates">The predicates to concatenate.</param>
        </member>
        <member name="M:System.Extensions.And``1(System.Predicate{``0}[])">
            <summary>
            Concatenates the specified predicates by AND-ing their results.
            </summary>
            <typeparam name="T">The type of items to filter.</typeparam>
            <param name="predicates">The predicates to concatenate.</param>
        </member>
        <member name="M:System.Extensions.ToDictionary(System.Object,System.Reflection.BindingFlags)">
            <summary>
            Gets a dictionary that represents the specified object (where keys represent properties).
            </summary>
            <param name="source">The object to serialize into a dictionary.</param>
            <param name="bindingAttr">The attirbutes to use when searching for properties.</param>
        </member>
        <member name="M:System.Extensions.SizeOf``1">
            <summary>
            Gets the size of the specified class type.
            </summary>
            <typeparam name="T">The type of object whose size to find.</typeparam>
        </member>
        <member name="M:System.Extensions.Combine(System.Int32,System.Int32)">
            <summary>
            Combines the specified hash codes into a suitable hash code.
            </summary>
            <param name="h1">The hash code to combine.</param>
            <param name="h2">The hash code to combine with.</param>
        </member>
        <member name="M:System.Extensions.Create``1(System.Comparison{``0})">
            <summary>
            Returns a comparer object that wraps the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of item to compare.</typeparam>
            <param name="comparison">The comparison delegate.</param>
        </member>
        <member name="M:System.Extensions.Create``1(System.Collections.Generic.EqualityComparison{``0},System.Func{``0,System.Int32})">
            <summary>
            Returns a comparer object that wraps the specified equality comparison delegate.
            </summary>
            <typeparam name="T">The type of item to compare.</typeparam>
            <param name="comparison">The comparison delegate.</param>
            <param name="hashCode">The hash code generator to use. The rule is: equal items MUST have the save hash-code,
            and for the same item, the gerenated hash-code must always be the same.</param>
        </member>
        <member name="M:System.Extensions.IsValidEmail(System.String)">
            <summary>
            Checks whether the specified string is considered a valid email.
            </summary>
            <param name="email">The string to check for validity as an email.</param>
        </member>
        <member name="M:System.Extensions.TrimExcept(System.String,System.Char[])">
            <summary>
            Removes leading and trailing characters that are not in the specified array of characters to keep.
            </summary>
            <param name="str">The string to trim.</param>
            <param name="toKeep">The characters that are not trimmed (if empty, and empty string is returned).</param>
        </member>
        <member name="M:System.Extensions.TrimStartExcept(System.String,System.Char[])">
            <summary>
            Removes leading characters that are not in the specified array of characters to keep.
            </summary>
            <param name="str">The string to trim.</param>
            <param name="toKeep">The characters that are not trimmed (if empty, and empty string is returned).</param>
        </member>
        <member name="M:System.Extensions.TrimEndExcept(System.String,System.Char[])">
            <summary>
            Removes trailing characters that are not in the specified array of characters to keep.
            </summary>
            <param name="str">The string to trim.</param>
            <param name="toKeep">The characters that are not trimmed (if empty, and empty string is returned).</param>
        </member>
        <member name="M:System.Extensions.RemoveAll``1(System.Collections.Generic.LinkedList{``0},System.Predicate{``0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to filter.</param>
            <param name="match">The predicate delegate that defines the conditions of the elements to remove.</param>
        </member>
        <member name="M:System.Extensions.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sorts the specified IList in-place using QuickSort.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to sort using the default comparer.</param>
        </member>
        <member name="M:System.Extensions.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts the specified IList in-place using QuickSort.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use for sorting.</param>
        </member>
        <member name="M:System.Extensions.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the specified IList in-place using QuickSort.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use for sorting.</param>
        </member>
        <member name="M:System.Extensions.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the specified IList in-place using QuickSort.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="index">The index of the first element to sort.</param>
            <param name="count">The number of elements to sort.</param>
            <param name="comparer">The comparer to use for sorting.</param>
        </member>
        <member name="M:System.Extensions.SetState(System.Windows.Forms.Control,System.Int32,System.Boolean)">
            <summary>
            Sets the specified state for the given control.
            </summary>
            <param name="contol">The control whose state to modify.</param>
            <param name="key">The flag of the state to modify.</param>
            <param name="value">The new state value.</param>
        </member>
        <member name="M:System.Extensions.BeginInvokeFast(System.Windows.Forms.Control,System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method on the window's thread asynchronously.
            </summary>
            <param name="control">The control on which to make the specified method call.</param>
            <param name="method">The method to call.</param>
            <param name="parameters">The parameters to pass to the method.</param>
        </member>
        <member name="M:System.Extensions.InvokeFast(System.Windows.Forms.Control,System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method on the window's thread synchronously.
            </summary>
            <param name="control">The control on which to make the specified method call.</param>
            <param name="method">The method to call.</param>
            <param name="parameters">The parameters to pass to the method.</param>
        </member>
        <member name="M:System.Extensions.InvokeFast(System.Windows.Forms.Control,System.UInt32,System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method on the window's thread synchronously.
            </summary>
            <param name="control">The control on which to make the specified method call.</param>
            <param name="timeout">The invocation timeout.</param>
            <param name="method">The method to call.</param>
            <param name="parameters">The parameters to pass to the method.</param>
        </member>
        <member name="M:System.Extensions.PointToClient(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Translates the specified screen coordinates to the corresponding client coordinate relative to the specified control.
            </summary>
            <param name="ctrl">The control that the return value coordinate is respect with.</param>
            <param name="screenPoint">The point on the screen to translate to client coordinates.</param>
        </member>
        <member name="M:System.Extensions.Inject(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            WARNING: DO NOT USE! Replaces the specified method with another method dynamically at runtime (dirty hack).
            </summary>
            <param name="methodToReplace">The method to replace.</param>
            <param name="methodToInject">The method to replace with.</param>
        </member>
        <member name="M:System.Extensions.PointToScreen(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Translates the specified client coordinates to the corresponding screen location.
            </summary>
            <param name="ctrl">The control that the given point is respect with.</param>
            <param name="clientPoint">The point in client coordinates to translate to screen coordinates.</param>
        </member>
        <member name="M:System.Extensions.RectangleToClient(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Translates the specified screen coordinates to the corresponding client coordinate relative to the specified control.
            </summary>
            <param name="ctrl">The control that the return value rectangle is respect with.</param>
            <param name="screenRect">The rectangle on the screen to translate to client coordinates.</param>
        </member>
        <member name="M:System.Extensions.RectangleToScreen(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Translates the specified client coordinates to the corresponding screen location.
            </summary>
            <param name="ctrl">The control that the given rectangle is respect with.</param>
            <param name="clientRect">The rectangle in client coordinates to translate to screen coordinates.</param>
        </member>
        <member name="M:System.Extensions.CreateGetter``2(System.Reflection.FieldInfo)">
            <summary>
            Returns a function that gets the value of the specified field.
            </summary>
            <typeparam name="S">The type of the containing class.</typeparam>
            <typeparam name="T">The type of field value.</typeparam>
            <param name="field">The field to wrap with a getter.</param>
        </member>
        <member name="M:System.Extensions.CreateSetter``2(System.Reflection.FieldInfo)">
            <summary>
            Returns a function that sets the value of the specified field.
            </summary>
            <typeparam name="S">The type of the containing class.</typeparam>
            <typeparam name="T">The type of field value.</typeparam>
            <param name="field">The field to wrap with a setter.</param>
        </member>
        <member name="M:System.Extensions.IsModifier(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a modifier key.
            </summary>
            <param name="key">The key to check if it is a modifier key.</param>
        </member>
        <member name="M:System.Extensions.ToString(System.Windows.Forms.Keys,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the characters associated with the specified keys (takes keyboard layout into account).
            </summary>
            <param name="key">The keys that are pressed.</param>
            <param name="shift">Whether the shift modifier key is also pressed.</param>
            <param name="alt">Whether the alt modifier key is also pressed.</param>
            <param name="control">Whether the control modifier key is also pressed.</param>
        </member>
        <member name="M:System.Extensions.ToString(System.Windows.Forms.Keys)">
            <summary>
            Gets the characters associated with the specified keys (takes keyboard layout into account).
            </summary>
            <param name="keys">The keys that are pressed. Modifier keys are assumed to be assumed to be included.</param>
        </member>
        <member name="M:System.Extensions.MemoryCopy(System.Byte*,System.Byte*,System.UInt32)">
            <summary>
            Copies the specified number of bytes from the source to the destination memory region.
            </summary>
            <param name="src">The source to copy from.</param>
            <param name="dest">The destination to copy to.</param>
            <param name="bytesToCopy">The number of bytes to copy.</param>
        </member>
        <member name="M:System.Extensions.LevenshteinDistance(System.String,System.String)">
            <summary>
            Calculates the Levenshtein distance between the two strings.
            </summary>
            <param name="a">The string to compare.</param>
            <param name="b">The string to compare with.</param>
        </member>
        <member name="M:System.Extensions.ImageFromFile(System.String)">
            <summary>
            Initializes a new bitmap from the specified file
            </summary>
            <param name="path">The path of the bitmap to open.</param>
        </member>
        <member name="M:System.Extensions.ToString(System.Single,System.Int32)">
            <summary>
            Gets a string that represents the specified float value trimmed and proper.
            </summary>
            <param name="val">The value to display.</param>
            <param name="decimalPlaces">The number of decimal places to keep.</param>
        </member>
        <member name="M:System.Extensions.GetFirstNonNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the first non-null element in the specified collection.
            The return value is null if 'items' is null or all elements are null.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="items"></param>
        </member>
        <member name="M:System.Extensions.ToFunc(System.Action)">
            <summary>
            Returns a Func&lt;object, object&gt; from the given Action.
            </summary>
            <param name="action">The action to include.</param>
        </member>
        <member name="M:System.Extensions.ToFunc(System.Action{System.Object})">
            <summary>
            Returns a Func&lt;object, object&gt; from the given Action&lt;object&gt;.
            </summary>
            <param name="action">The action to include.</param>
        </member>
        <member name="M:System.Extensions.Contains(System.Drawing.Size,System.Drawing.Point)">
            <summary>
            Checks whether the specified bounds contain the specified point if the area was originated at (0, 0).
            </summary>
            <param name="bounds">The size of the area to check whether the point is contained inside.</param>
            <param name="point">The point to check.</param>
        </member>
        <member name="M:System.Extensions.ToFunc(System.Func{System.Object})">
            <summary>
            Returns a Func&lt;object, object&gt; from the given Func&lt;object&gt;.
            </summary>
            <param name="function">The function to include.</param>
        </member>
        <member name="M:System.Extensions.EndsWith(System.String,System.Char)">
            <summary>
            Gets whether the string ends with the specified character
            </summary>
            <param name="str">The string to use.</param>
            <param name="lastChar">The character to check.</param>
        </member>
        <member name="M:System.Extensions.AddRange(System.Collections.IList,System.Collections.IEnumerable)">
            <summary>
            Adds the specified elements to the list.
            </summary>
            <param name="list">The list to add to.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:System.Extensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified elements to the list.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to add to.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:System.Extensions.CastTo(System.Object,System.Type)">
            <summary>
            Casts an object to the specified type including implicit casts. The generic overload of this method is faster.
            </summary>
            <param name="value">The value to cast.</param>
            <param name="type">The target type of the object.</param>
        </member>
        <member name="M:System.Extensions.CastTo``1(System.Object)">
            <summary>
            Casts an object to the specified type including implicit casts.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="value">The value to cast.</param>
        </member>
        <member name="M:System.Extensions.Append(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Appends StringBuilder content to a StringBuilder without reallocation (hence is faster).
            </summary>
            <param name="builder">The StringBuilder instance to append to.</param>
            <param name="toAppend">The StringBuilder whose content to append.</param>
            <returns>The first StringBuilder instance (the one that has been appended to).</returns>
        </member>
        <member name="M:System.Extensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the index of the start of the contents in a StringBuilder.
            </summary>
            <param name="sb">The StringBuilder value to search.</param>
            <param name="value">The string to find.</param>
            <param name="startIndex">The starting index.</param>
            <param name="ignoreCase">Whether to ignore case.</param>
            <returns>The index of the specified value, and if not found returns -1.</returns>
        </member>
        <member name="M:System.Extensions.DisposeSafe(System.Drawing.Pen)">
            <summary>
            Disposes of the pen, but checks for null and for system pens.
            </summary>
            <param name="pen">The pen to dispose of.</param>
        </member>
        <member name="M:System.Extensions.DisposeSafe(System.Drawing.Bitmap)">
            <summary>
            Disposes of the image, but checks for null and whether it's disposed.
            </summary>
            <param name="image">The image to dispose of.</param>
        </member>
        <member name="M:System.Extensions.DisposeSafe(System.Drawing.Brush)">
            <summary>
            Disposes of the brush, but checks for null and for system brush.
            </summary>
            <param name="brush">The brush to dispose of.</param>
        </member>
        <member name="M:System.Extensions.ToJaggedArray``1(``0[0:,0:])">
            <summary>
            Casts the specified 2D array to a jagged array.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The array to convert to jagged.</param>
        </member>
        <member name="M:System.Extensions.Initialize``1(``0[],``0)">
            <summary>
            Sets all indices of the given array to the specified value. Nulls are tolerated.
            </summary>
            <param name="array">The array to initialize</param>
            <param name="value">The value to initialize it to.</param>
        </member>
        <member name="M:System.Extensions.Initialize``1(``0[][],``0)">
            <summary>
            Sets all indices of the given array to the specified value. All nulls are tolerated.
            </summary>
            <param name="array">The array to initialize</param>
            <param name="value">The value to initialize it to.</param>
        </member>
        <member name="M:System.Extensions.Add(System.Byte[],System.Single)">
            <summary>
            Adds all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to add.</param>
            <param name="toAdd">The value to add.</param>
        </member>
        <member name="M:System.Extensions.Add(System.Byte[][],System.Single)">
            <summary>
            Adds all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to add.</param>
            <param name="toAdd">The value to add.</param>
        </member>
        <member name="M:System.Extensions.Add(System.Byte[][][],System.Single)">
            <summary>
            Adds all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to add.</param>
            <param name="toAdd">The value to add.</param>
        </member>
        <member name="M:System.Extensions.Add(System.Int32[],System.Single)">
            <summary>
            Adds all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to add.</param>
            <param name="toAdd">The value to add.</param>
        </member>
        <member name="M:System.Extensions.Add(System.Int32[][],System.Single)">
            <summary>
            Adds all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to add.</param>
            <param name="toAdd">The value to add.</param>
        </member>
        <member name="M:System.Extensions.Add(System.Int32[][][],System.Single)">
            <summary>
            Adds all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to add.</param>
            <param name="toAdd">The value to add.</param>
        </member>
        <member name="M:System.Extensions.Add(System.Single[],System.Single)">
            <summary>
            Adds all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to add.</param>
            <param name="toAdd">The value to add.</param>
        </member>
        <member name="M:System.Extensions.Add(System.Single[][],System.Single)">
            <summary>
            Adds all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to add.</param>
            <param name="toAdd">The value to add.</param>
        </member>
        <member name="M:System.Extensions.Add(System.Single[][][],System.Single)">
            <summary>
            Adds all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to add.</param>
            <param name="toAdd">The value to add.</param>
        </member>
        <member name="M:System.Extensions.Multiply(System.Byte[],System.Single)">
            <summary>
            Multiplies all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to multiply.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:System.Extensions.Multiply(System.Byte[][],System.Single)">
            <summary>
            Multiplies all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to multiply.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:System.Extensions.Multiply(System.Byte[][][],System.Single)">
            <summary>
            Multiplies all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to multiply.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:System.Extensions.Multiply(System.Int32[],System.Single)">
            <summary>
            Multiplies all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to multiply.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:System.Extensions.Multiply(System.Int32[][],System.Single)">
            <summary>
            Multiplies all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to multiply.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:System.Extensions.Multiply(System.Int32[][][],System.Single)">
            <summary>
            Multiplies all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to multiply.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:System.Extensions.Multiply(System.Single[],System.Single)">
            <summary>
            Multiplies all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to multiply.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:System.Extensions.Multiply(System.Single[][],System.Single)">
            <summary>
            Multiplies all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to multiply.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:System.Extensions.Multiply(System.Single[][][],System.Single)">
            <summary>
            Multiplies all the values of the array by the specified value.
            </summary>
            <param name="values">The array of values to multiply.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:System.Extensions.FFT(System.Numerics.ComplexF[])">
            <summary>
            Computes an in-place 1D fourier transform of the specified values.
            </summary>
            <param name="values">An array of the values to transform.</param>
        </member>
        <member name="M:System.Extensions.InverseFFT(System.Numerics.ComplexF[],System.Boolean)">
            <summary>
            Computes an in-place 1D inverse fourier transform of the specified values.
            </summary>
            <param name="values">An array of the values to transform.</param>
            <param name="truncatePadding">Whether to remove trailing 0s.</param>
        </member>
        <member name="M:System.Extensions.FFTShift(System.Numerics.ComplexF[])">
            <summary>
            Performs a fourier shift on the specified values.
            </summary>
            <param name="values">The values to shift.</param>
        </member>
        <member name="M:System.Extensions.InverseFFTShift(System.Numerics.ComplexF[])">
            <summary>
            Performs an inverse fourier shift on the specified values.
            </summary>
            <param name="values">The values to shift.</param>
        </member>
        <member name="M:System.Extensions.InterpolateCubic(System.Numerics.ComplexF[],System.Int32)">
            <summary>
            Interpolates the specified values cubically.
            </summary>
            <param name="values">The values to interpolate</param>
            <param name="targetLength">The length of the output array.</param>
        </member>
        <member name="M:System.Extensions.Normalize(System.Single[],System.Single)">
            <summary>
            Normalizes the specified set of values in place. WARNING: This assumes only positive values for better performance.
            </summary>
            <param name="values">The values to normalize.</param>
            <param name="max">The maximum to normalize to.</param>
        </member>
        <member name="M:System.Extensions.Normalize(System.Single[][],System.Single)">
            <summary>
            Normalizes the specified set of values in place. WARNING: This assumes only positive values for better performance.
            </summary>
            <param name="values">The values to normalize.</param>
            <param name="max">The maximum to normalize to.</param>
        </member>
        <member name="M:System.Extensions.Max(System.Byte[],System.Byte)">
            <summary>
            Gets the maximum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Min(System.Byte[],System.Byte)">
            <summary>
            Gets the minimum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Max(System.Byte[][],System.Byte)">
            <summary>
            Gets the maximum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Min(System.Byte[][],System.Byte)">
            <summary>
            Gets the minimum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Max(System.Int32[],System.Int32)">
            <summary>
            Gets the maximum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Min(System.Int32[],System.Int32)">
            <summary>
            Gets the minimum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Max(System.Int32[][],System.Int32)">
            <summary>
            Gets the maximum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Min(System.Int32[][],System.Int32)">
            <summary>
            Gets the minimum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Max(System.Single[],System.Single)">
            <summary>
            Gets the maximum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Min(System.Single[],System.Single)">
            <summary>
            Gets the minimum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Max(System.Single[][],System.Single)">
            <summary>
            Gets the maximum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Min(System.Single[][],System.Single)">
            <summary>
            Gets the minimum value.
            </summary>
            <param name="values">An array of values.</param>
            <param name="initialValue">The initial value to start with.</param>
        </member>
        <member name="M:System.Extensions.Reverse(System.String)">
            <summary>
            Reverses the string.
            </summary>
            <param name="str">The string to reverse.</param>
        </member>
        <member name="M:System.Extensions.ToPixels(System.Single[][],System.Boolean)">
            <summary>
            Gets a pixel byte array from the specified float values [x][y].
            </summary>
            <param name="values">The values to load the image from.</param>
            <param name="normalize">Whether to normalize the values to byte range. Negative values are truncated.</param>
        </member>
        <member name="M:System.Extensions.IsDisposed(System.Drawing.Image)">
            <summary>
            Gets whether the specified image is disposed (returns true if null).
            </summary>
            <param name="image">The image to check if disposed.</param>
        </member>
        <member name="M:System.Extensions.Transform(System.Numerics.Plane,System.Numerics.Matrix4@)">
            <summary>
            Transforms a normalized Plane by a Matrix.
            </summary>
            <param name="plane"> The normalized Plane to transform. 
            This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
            <param name="matrix">The transformation matrix to apply to the Plane.</param>
            <returns>The transformed Plane.</returns>
        </member>
        <member name="M:System.Extensions.ToAxisAngle(System.Numerics.Quaternion)">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Quaternion that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="M:System.Extensions.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4@)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Extensions.TripleProduct(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Dot(Cross(v1, v2), v3)
            </summary>
            <param name="v1">V1</param>
            <param name="v2">V2</param>
            <param name="v3">V3</param>
        </member>
        <member name="M:System.Extensions.TransformPosition(System.Numerics.Vector3,System.Numerics.Matrix4@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:System.Extensions.Transform(System.Numerics.Vector3,System.Numerics.Matrix4@)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Extensions.SetAngleFrom(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Places the point about the specified axis at the specified angle.
            </summary>
            <param name="vector">The vector to set the angle with respect to it.</param>
            <param name="axis">The center point to use as origin.</param>
            <param name="angle">The angle to set in relation to the vector (absolute).</param>
        </member>
        <member name="M:System.Extensions.RotateAbout(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Rotates the point about the specified axis at the specified angle.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="axis">The center point of rotation.</param>
            <param name="angle">The cumulative angle of rotation.</param>
        </member>
        <member name="M:System.Extensions.GetAngleFrom(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Gets the current angle from another point in Radians.
            </summary>
            <param name="v">The vector.</param>
            <param name="axis">The axis vector to get rotation from (consider it as origin).</param>
        </member>
        <member name="M:System.Extensions.MoveAt(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Moves the point at the specified angle (measured in Radians) at the specified distance.
            </summary>
            <param name="vector">The point to move.</param>
            <param name="distance">The distance to move.</param>
            <param name="angle">The angle to move.</param>
        </member>
        <member name="M:System.Extensions.ToMoveAt(System.Single,System.Single)">
            <summary>
            Returns the movement required for the point to move at the specified distance and angle.
            Polar to Eucledean coordinates.
            </summary>
            <param name="distance">The distance to move at.</param>
            <param name="angle">The angle to move at</param>
        </member>
        <member name="M:System.Extensions.MoveTowards(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Moves the point towards the specified point for the specified distance.
            </summary>
            <param name="vector">The vector to move.</param>
            <param name="point">The point to move towards.</param>
            <param name="distance">The distance to move.</param>
        </member>
        <member name="M:System.Extensions.DirectionTowards(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Returns the movement required to move the point the specified distance towards the specified point.
            </summary>
            <param name="vector">The vector to move.</param>
            <param name="point">The point to move towards.</param>
            <param name="distance">The distance to move at.</param>
        </member>
        <member name="M:System.Extensions.MoveAwayFrom(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Moves the point away from the specified point at the specified distance.
            </summary>
            <param name="vector">The vector to move.</param>
            <param name="point">The point to move away from.</param>
            <param name="distance">The distance to move.</param>
        </member>
        <member name="M:System.Extensions.DirectionAwayFrom(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Returns the movement required to move the point the specified distance away from the specified point.
            </summary>
            <param name="vector">The vector to move.</param>
            <param name="point">The point to move towards.</param>
            <param name="distance">The distance to move at.</param>
        </member>
        <member name="M:System.Extensions.GetVectorOnEllipseFromAngle(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Gets the relative point on the circumference of an ellipse that is located at the specified angle from the center.
            </summary>
            <param name="radii">The radii of the ellipse (width and height).</param>
            <param name="ellipseRotation">The angle of rotation of the ellipse itself.</param>
            <param name="angle">The angle the point to obtain on the circumference makes with the center.</param>
        </member>
        <member name="M:System.Extensions.GetPointOnEllipseFromAngle(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Gets the point on the circumference of an ellipse that is located at the specified angle from the center.
            </summary>
            <param name="center">The center point of the ellipse.</param>
            <param name="radii">The radii of the ellipse (width and height).</param>
            <param name="ellipseRotation">The angle of rotation of the ellipse itself.</param>
            <param name="angle">The angle the point to obtain on the circumference makes with the center.</param>
        </member>
        <member name="M:System.Extensions.GetPerpendicularRight(System.Numerics.Vector2)">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="M:System.Extensions.GetPerpendicularLeft(System.Numerics.Vector2)">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="M:System.Extensions.SwapComponents(System.Numerics.Vector2)">
            <summary>
            Gets a Vector2 like this one but with X and Y swapped.
            </summary>
        </member>
        <member name="M:System.Extensions.ToVector3(System.Numerics.Vector4)">
            <summary>
            Casts the Vector4 to Vector3 by discarding the W component.
            </summary>
            <param name="vec">The source vector.</param>
        </member>
        <member name="M:System.Extensions.ToVector2(System.Numerics.Vector4)">
            <summary>
            Casts the Vector4 to Vector2 by discarding the Z and W component.
            </summary>
            <param name="vec">The source vector.</param>
        </member>
        <member name="M:System.Extensions.ToVector2(System.Numerics.Vector3)">
            <summary>
            Casts the Vector3 to Vector2 by discarding the Z component.
            </summary>
            <param name="vec">The source vector.</param>
        </member>
        <member name="M:System.Extensions.ToPointF(System.Numerics.Vector2)">
            <summary>
            Casts a Vector2 to PointF
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToVector2(System.Drawing.PointF)">
            <summary>
            Casts a PointF to Vector2
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToPoint(System.Numerics.Vector2)">
            <summary>
            Casts a Vector2 to Point
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToVector2(System.Drawing.Point)">
            <summary>
            Casts a Point to Vector2
            </summary>
            <param name="v">The point to cast</param>
        </member>
        <member name="M:System.Extensions.ToPointF(System.Numerics.Vector3)">
            <summary>
            Casts a Vector3 to PointF
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToVector3(System.Drawing.PointF)">
            <summary>
            Casts a PointF to Vector3
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToPoint(System.Numerics.Vector3)">
            <summary>
            Casts a Vector3 to Point
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToVector3(System.Drawing.Point)">
            <summary>
            Casts a Point to Vector3
            </summary>
            <param name="v">The point to cast</param>
        </member>
        <member name="M:System.Extensions.ToSizeF(System.Numerics.Vector2)">
            <summary>
            Casts a Vector2 to SizeF
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToVector2(System.Drawing.SizeF)">
            <summary>
            Casts a SizeF to Vector2
            </summary>
            <param name="v">The size to cast</param>
        </member>
        <member name="M:System.Extensions.ToSize(System.Numerics.Vector2)">
            <summary>
            Casts a Vector2 to Size
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToVector2(System.Drawing.Size)">
            <summary>
            Casts a Size to Vector2
            </summary>
            <param name="v">The size to cast</param>
        </member>
        <member name="M:System.Extensions.ToSizeF(System.Numerics.Vector3)">
            <summary>
            Casts a Vector3 to SizeF
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToVector3(System.Drawing.SizeF)">
            <summary>
            Casts a SizeF to Vector3
            </summary>
            <param name="v">The size to cast</param>
        </member>
        <member name="M:System.Extensions.ToSize(System.Numerics.Vector3)">
            <summary>
            Casts a Vector3 to Size
            </summary>
            <param name="v">The vector to cast</param>
        </member>
        <member name="M:System.Extensions.ToVector3(System.Drawing.Size)">
            <summary>
            Casts a Size to Vector3
            </summary>
            <param name="v">The size to cast</param>
        </member>
        <member name="M:System.Extensions.GetMaxComponent(System.Numerics.Vector3)">
            <summary>
            Gets the biggest from X, Y, and Z.
            </summary>
        </member>
        <member name="M:System.Extensions.GetMinComponent(System.Numerics.Vector3)">
            <summary>
            Gets the smallest from X, Y, and Z.
            </summary>
        </member>
        <member name="T:System.MajorMinorVersion">
            <summary>
            Holds a version number represented by a major version and a minor sub-version number.
            </summary>
        </member>
        <member name="F:System.MajorMinorVersion.Major">
            <summary>
            The major version.
            </summary>
        </member>
        <member name="F:System.MajorMinorVersion.Minor">
            <summary>
            The minor sub-version.
            </summary>
        </member>
        <member name="M:System.MajorMinorVersion.#ctor(System.Int32)">
            <summary>
            Initializes a new version representation.
            </summary>
            <param name="major">The major version number.</param>
        </member>
        <member name="M:System.MajorMinorVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new version representation.
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor sub-version.</param>
        </member>
        <member name="M:System.MajorMinorVersion.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
        </member>
        <member name="M:System.MajorMinorVersion.ToString">
            <summary>
            Gets a string that represents this instance.
            </summary>
        </member>
        <member name="M:System.MajorMinorVersion.op_Equality(System.MajorMinorVersion,System.MajorMinorVersion)">
            <summary>
            Returns whether the specified versions are considered equal.
            </summary>
            <param name="v1">The first version.</param>
            <param name="v2">The second version.</param>
        </member>
        <member name="M:System.MajorMinorVersion.op_Inequality(System.MajorMinorVersion,System.MajorMinorVersion)">
            <summary>
            Returns whether the specified versions are considered unequal.
            </summary>
            <param name="v1">The first version.</param>
            <param name="v2">The second version.</param>
        </member>
        <member name="M:System.MajorMinorVersion.op_LessThan(System.MajorMinorVersion,System.MajorMinorVersion)">
            <summary>
            Returns whether the first version is considered older than the second.
            </summary>
            <param name="v1">The first version.</param>
            <param name="v2">The second version.</param>
        </member>
        <member name="M:System.MajorMinorVersion.op_LessThanOrEqual(System.MajorMinorVersion,System.MajorMinorVersion)">
            <summary>
            Returns whether the first version is considered older or equal to the second.
            </summary>
            <param name="v1">The first version.</param>
            <param name="v2">The second version.</param>
        </member>
        <member name="M:System.MajorMinorVersion.op_GreaterThan(System.MajorMinorVersion,System.MajorMinorVersion)">
            <summary>
            Returns whether the first version is considered more recent than the second.
            </summary>
            <param name="v1">The first version.</param>
            <param name="v2">The second version.</param>
        </member>
        <member name="M:System.MajorMinorVersion.op_GreaterThanOrEqual(System.MajorMinorVersion,System.MajorMinorVersion)">
            <summary>
            Returns whether the first version is considered more recent or equal to the second.
            </summary>
            <param name="v1">The first version.</param>
            <param name="v2">The second version.</param>
        </member>
        <member name="M:System.MajorMinorVersion.Equals(System.MajorMinorVersion)">
            <summary>
            Returns whether the version is equal to this version.
            </summary>
            <param name="version">The version to compare with.</param>
        </member>
        <member name="M:System.MajorMinorVersion.Equals(System.Object)">
            <summary>
            Returns whether the version is equal to this version.
            </summary>
            <param name="obj">The object to compare with.</param>
        </member>
        <member name="M:System.MajorMinorVersion.CompareTo(System.MajorMinorVersion)">
            <summary>
            Compares the current version with the specified version.
            </summary>
            <param name="version">The version to compare with.</param>
        </member>
        <member name="T:System.Maths">
            <summary>
            Contains common mathematical functions and constants.
            </summary>
        </member>
        <member name="F:System.Maths.TwoPIInverseF">
            <summary>
            Defines the value of 1/2Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.TwoPIInverseD">
            <summary>
            Defines the value of 1/2Pi as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PIInverseF">
            <summary>
            Defines the value of 1/Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PIInverseD">
            <summary>
            Defines the value of 1/Pi as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiF">
            <summary>
            Defines the value of Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiD">
            <summary>
            Defines the value of Pi as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver2F">
            <summary>
            Defines the value of Pi/2 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver2D">
            <summary>
            Defines the value of Pi/2 divided by two as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver3F">
            <summary>
            Defines the value of Pi/3 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver3D">
            <summary>
            Defines the value of Pi/3 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver4F">
            <summary>
            Defines the value of Pi/4 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver4D">
            <summary>
            Defines the value of Pi/4 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver5F">
            <summary>
            Defines the value of Pi/5 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver5D">
            <summary>
            Defines the value of Pi/5 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver6F">
            <summary>
            Defines the value of Pi/6 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.PiOver6D">
            <summary>
            Defines the value of Pi/6 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.TwoPiF">
            <summary>
            Defines the value of Pi*2 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.TwoPiD">
            <summary>
            Defines the value of Pi*2 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.ThreePiF">
            <summary>
            Defines the value of Pi*3 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.ThreePiD">
            <summary>
            Defines the value of Pi*3 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.ThreePiOver2F">
            <summary>
            Defines the value of Pi*3/2 as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.ThreePiOver2D">
            <summary>
            Defines the value of Pi*3/2 as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.Log10eF">
            <summary>
            Defines the base-10 logarithm of E as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:System.Maths.Log10eD">
            <summary>
            Defines the base-10 logarithm of E as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:System.Maths.DegToRadF">
            <summary>
            Defines a constant that when multiplied to a degrees value converts it to radians (PI/180). 
            </summary>
        </member>
        <member name="F:System.Maths.DegToRadD">
            <summary>
            Defines a constant that when multiplied to a degrees value converts it to radians (PI/180). 
            </summary>
        </member>
        <member name="F:System.Maths.RadToDegF">
            <summary>
            Defines a constant that when multiplied to a radian value converts it to degrees (180/PI). 
            </summary>
        </member>
        <member name="F:System.Maths.RadToDegD">
            <summary>
            Defines a constant that when multiplied to a radian value converts it to degrees (180/PI). 
            </summary>
        </member>
        <member name="F:System.Maths.SqrtOf2F">
            <summary>
            Defines the square root of 2. 
            </summary>
        </member>
        <member name="F:System.Maths.SqrtOf2D">
            <summary>
            Defines the square root of 2. 
            </summary>
        </member>
        <member name="M:System.Maths.NormInv(System.Double,System.Double,System.Double)">
            <summary>
            Quantile function (Inverse CDF) for the normal distribution (based on the R function QNorm()).
            </summary>
            <param name="p">Probability.</param>
            <param name="mean">The mean of normal distribution.</param>
            <param name="sigma">Standard deviation of normal distribution.</param>
        </member>
        <member name="M:System.Maths.Sigmoid(System.Double)">
            <summary>
            Computes the sigmoid of the specified parameter.
            </summary>
            <param name="value">The value to use as parameter.</param>
        </member>
        <member name="M:System.Maths.Sinc(System.Double)">
            <summary>
            Computes the normalized sinc (sin πx)/πx.
            </summary>
            <param name="value">The value to use as parameter.</param>
        </member>
        <member name="M:System.Maths.ApplyNormativeSkew(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Skews the specified uniform values into a normal frequency distribution approximation (no randomization).
            </summary>
            <param name="min">The minimum value of the distribution graph.</param>
            <param name="value">The value to convert into the corresponding normally-distributed value.</param>
            <param name="max">The maximum value of the distribution graph.</param>
            <param name="inverted">Whether to flip the distribution upside down (favoring min and max instead of the center).</param>
        </member>
        <member name="M:System.Maths.IsPowerOf2(System.Int32)">
            <summary>
            Gets whether the value is a power of two.
            </summary>
            <param name="x">The value to check.</param>
        </member>
        <member name="M:System.Maths.Square(System.Int32)">
            <summary>
            Squares the given value.
            </summary>
            <param name="x">The value to square.</param>
        </member>
        <member name="M:System.Maths.Square(System.Single)">
            <summary>
            Squares the given value.
            </summary>
            <param name="x">The value to square.</param>
        </member>
        <member name="M:System.Maths.Square(System.Double)">
            <summary>
            Squares the given value.
            </summary>
            <param name="x">The value to square.</param>
        </member>
        <member name="M:System.Maths.Cube(System.Int32)">
            <summary>
            Cubes the given value.
            </summary>
            <param name="x">The value to cube.</param>
        </member>
        <member name="M:System.Maths.Cube(System.Single)">
            <summary>
            Cubes the given value.
            </summary>
            <param name="x">The value to cube.</param>
        </member>
        <member name="M:System.Maths.Cube(System.Double)">
            <summary>
            Cubes the given value.
            </summary>
            <param name="x">The value to cube.</param>
        </member>
        <member name="M:System.Maths.CeilingPowerOfTwo(System.UInt32)">
            <summary>
            Returns the next power of two that is equal or larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
        </member>
        <member name="M:System.Maths.CeilingPowerOfTwo(System.UInt64)">
            <summary>
            Returns the next power of two that is equal or larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
        </member>
        <member name="M:System.Maths.FloorPowerOfTwo(System.UInt32)">
            <summary>
            Returns the last power of two that is equal or smaller than the specified number.
            </summary>
            <param name="n">The specified number.</param>
        </member>
        <member name="M:System.Maths.FloorPowerOfTwo(System.UInt64)">
            <summary>
            Returns the last power of two that is equal or smaller than the specified number.
            </summary>
            <param name="n">The specified number.</param>
        </member>
        <member name="M:System.Maths.Log2(System.UInt32)">
            <summary>
            Calculates the truncated log base 2 of a natural number.
            </summary>
            <param name="n">The number.</param>
        </member>
        <member name="M:System.Maths.Log2(System.UInt64)">
            <summary>
            Calculates the truncated log base 2 of a natural number. 0 is returned for 0.
            </summary>
            <param name="n">The number.</param>
        </member>
        <member name="M:System.Maths.Factorial(System.Int32)">
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:System.Maths.Sqrt(System.UInt32)">
            <summary>
            Finds the integer square root of the specified value.
            </summary>
            <param name="num">The value whose square root to return.</param>
        </member>
        <member name="M:System.Maths.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="M:System.Maths.NumberOfSetBits(System.Int32)">
            <summary>
            Gets the number of bits set in the specified value.
            </summary>
            <param name="val">The value whose set bits to count.</param>
        </member>
        <member name="M:System.Maths.NumberOfSetBits(System.UInt32)">
            <summary>
            Gets the number of bits set in the specified value.
            </summary>
            <param name="val">The value whose set bits to count.</param>
        </member>
        <member name="M:System.Maths.NumberOfSetBits(System.Int64)">
            <summary>
            Gets the number of bits set in the specified value.
            </summary>
            <param name="val">The value whose set bits to count.</param>
        </member>
        <member name="M:System.Maths.NumberOfSetBits(System.UInt64)">
            <summary>
            Gets the number of bits set in the specified value.
            </summary>
            <param name="val">The value whose set bits to count.</param>
        </member>
        <member name="M:System.Maths.HighestSetBit(System.Int32)">
            <summary>
            Gets the zero-based index of the highest bit set in the specified value (or -1 if no bit is set).
            </summary>
            <param name="val">The value to check.</param>
        </member>
        <member name="M:System.Maths.HighestSetBit(System.UInt32)">
            <summary>
            Gets the zero-based index of the highest bit set in the specified value (or -1 if no bit is set).
            </summary>
            <param name="val">The value to check.</param>
        </member>
        <member name="M:System.Maths.HighestSetBit(System.Int64)">
            <summary>
            Gets the zero-based index of the highest bit set in the specified value (or -1 if no bit is set).
            </summary>
            <param name="val">The value to check.</param>
        </member>
        <member name="M:System.Maths.HighestSetBit(System.UInt64)">
            <summary>
            Gets the zero-based index of the highest bit set in the specified value (or -1 if no bit is set).
            </summary>
            <param name="val">The value to check.</param>
        </member>
        <member name="M:System.Maths.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="M:System.Maths.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Clamps the value to the specified range. If min is larger than max, the return value is either min or max (unspecified for speed).
            </summary>
            <param name="value">The value to clamp to the specified range.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
        </member>
        <member name="T:System.Numerics.ComplexF">
            <summary>
            Represents a complex number.
            </summary>
        </member>
        <member name="F:System.Numerics.ComplexF.Real">
            <summary>
            The real component.
            </summary>
        </member>
        <member name="F:System.Numerics.ComplexF.Imaginary">
            <summary>
            The imaginary component.
            </summary>
        </member>
        <member name="F:System.Numerics.ComplexF.Zero">
            <summary>
            Returns a new ComplexF instance with a real number equal to zero and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:System.Numerics.ComplexF.One">
            <summary>
            Returns a new ComplexF instance with a real number equal to one and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:System.Numerics.ComplexF.Two">
            <summary>
            Returns a new ComplexF instance with a real number equal to two and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:System.Numerics.ComplexF.ImaginaryOne">
            <summary>
            Returns a new ComplexF instance with a real number equal to zero and an imaginary number equal to one.
            </summary>
        </member>
        <member name="F:System.Numerics.ComplexF.OnePlusi">
            <summary>
            Returns a new ComplexF instance with a real number equal to zero and an imaginary number equal to one.
            </summary>
        </member>
        <member name="P:System.Numerics.ComplexF.MagnitudeDB">
            <summary>
            Gets the magnitude (or absolute value) of a complex number in decibels.
            </summary>
        </member>
        <member name="P:System.Numerics.ComplexF.Magnitude">
            <summary>
            Gets the magnitude (or absolute value) of a complex number.
            </summary>
        </member>
        <member name="P:System.Numerics.ComplexF.MagnitudeSquared">
            <summary>
            Gets the squared magnitude (or absolute value) of a complex number.
            </summary>
        </member>
        <member name="P:System.Numerics.ComplexF.Phase">
            <summary>
            Gets the phase of a complex number in radians.
            </summary>
        </member>
        <member name="M:System.Numerics.ComplexF.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the ComplexF structure using the specified real value.
            </summary>
            <param name="real">The real part of the complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the ComplexF structure using the specified real and imaginary values.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <param name="imaginary">The imaginary part of the complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Acos(System.Numerics.ComplexF)">
            <summary>
            Returns the angle that is the arc cosine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Add(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Adds two complex numbers and returns the result.
            </summary>
            <param name="left">The first complex number to add.</param>
            <param name="right">The second complex number to add.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Asin(System.Numerics.ComplexF)">
            <summary>
            Returns the angle that is the arc sine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Atan(System.Numerics.ComplexF)">
            <summary>
            Returns the angle that is the arc tangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Conjugate(System.Numerics.ComplexF)">
            <summary>
            Computes the conjugate of a complex number and returns the result.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Cos(System.Numerics.ComplexF)">
            <summary>
            Returns the cosine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Cosh(System.Numerics.ComplexF)">
            <summary>
            Returns the hyperbolic cosine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Divide(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Divides one complex number by another and returns the result.
            </summary>
            <param name="dividend">The complex number to be divided.</param>
            <param name="divisor">The complex number to divide by.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance and a specified object have the same value.
            </summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Equals(System.Numerics.ComplexF)">
            <summary>
            Returns a value that indicates whether the current instance and a specified complex number have the same value.
            </summary>
            <param name="value">The complex number to compare.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Exp(System.Numerics.ComplexF)">
            <summary>
            Returns e raised to the power specified by a complex number.
            </summary>
            <param name="value">A complex number that specifies a power.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.FromPolarCoordinates(System.Single,System.Single)">
            <summary
            >Creates a complex number from a point's polar coordinates.
            </summary>
            <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
            <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.GetHashCode">
            <summary>
            Returns the hash code for the current ComplexF object.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Log(System.Numerics.ComplexF)">
            <summary>
            Returns the natural (base e) logarithm of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Log(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Returns the logarithm of a specified complex number in a specified base.
            </summary>
            <param name="value">A complex number.</param>
            <param name="baseValue">The base of the logarithm.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Log10(System.Numerics.ComplexF)">
            <summary>
            Returns the base-10 logarithm of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Multiply(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Returns the product of two complex numbers.
            </summary>
            <param name="left">The first complex number to multiply.</param>
            <param name="right">The second complex number to multiply.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Negate(System.Numerics.ComplexF)">
            <summary>
            Returns the additive inverse of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Explicit(System.Decimal)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.Int16)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.Int32)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.Int64)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.UInt16)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.UInt32)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.UInt64)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.SByte)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.Byte)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.Single)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.Double)~System.Numerics.ComplexF">
            <summary>
            Casts the specified value to a Complex number.
            </summary>
            <param name="value">The value to cast to ComplexF.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Equality(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Returns a value that indicates whether two complex numbers are equal.
            </summary>
            <param name="left">The first complex number to compare.</param>
            <param name="right">The second complex number to compare.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Inequality(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Returns a value that indicates whether two complex numbers are not equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Addition(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Adds two complex numbers.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Addition(System.Numerics.ComplexF,System.Single)">
            <summary>
            Adds two complex numbers.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Addition(System.Single,System.Numerics.ComplexF)">
            <summary>
            Adds two complex numbers.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Multiply(System.Numerics.ComplexF,System.Single)">
            <summary>
            Multiplies the specified complex number by the specified real number.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Multiply(System.Single,System.Numerics.ComplexF)">
            <summary>
            Multiplies the specified complex number by the specified real number.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Multiply(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Multiplies two specified complex numbers.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Division(System.Numerics.ComplexF,System.Single)">
            <summary>
            Divides the specified complex number by the specified real number.
            </summary>
            <param name="left">The value to be divided.</param>
            <param name="right">The value to divide by.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Division(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Divides a specified complex number by another specified complex number.
            </summary>
            <param name="left">The value to be divided.</param>
            <param name="right">The value to divide by.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_UnaryPlus(System.Numerics.ComplexF)">
            <summary>
            Does nothing.
            </summary>
            <param name="value">The value to waste time on.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Subtraction(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Subtracts a complex number from another complex number.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
        </member>
        <member name="M:System.Numerics.ComplexF.op_UnaryNegation(System.Numerics.ComplexF)">
            <summary>
            Returns the additive inverse of a specified complex number.
            </summary>
            <param name="value">The value to negate.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Pow(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Returns a specified complex number raised to a power specified by a complex number.
            </summary>
            <param name="value">A complex number to be raised to a power.</param>
            <param name="power">A complex number that specifies a power.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Reciprocal(System.Numerics.ComplexF)">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Sin(System.Numerics.ComplexF)">
            <summary>
            Returns the sine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Sinh(System.Numerics.ComplexF)">
            <summary>
            Returns the hyperbolic sine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Sqrt(System.Numerics.ComplexF)">
            <summary>
            Returns the square root of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Subtract(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Subtracts one complex number from another and returns the result.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Tan(System.Numerics.ComplexF)">
            <summary>
            Returns the tangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.Tanh(System.Numerics.ComplexF)">
            <summary>
            Returns the hyperbolic tangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.ToString">
            <summary>
            Converts the value of the current complex number to its equivalent string representation in Cartesian form.
            </summary>
            <returns>The string representation of the current instance in Cartesian form.</returns>
        </member>
        <member name="M:System.Numerics.ComplexF.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.
            </summary>
            <param name="format">A standard or custom numeric format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="T:System.Numerics.Matrix3">
            <summary>
            Represents a hardware-accelerated 3x3 matrix containing 3D rotation and scale.
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3.Row0">
            <summary>
            First row of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3.Row1">
            <summary>
            Second row of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3.Row2">
            <summary>
            Third row of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3.Zero">
            <summary>
            The zero matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.Determinant">
            <summary>
            Gets the determinant of this matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.Column0">
            <summary>
            Gets the first column of this matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.Column1">
            <summary>
            Gets the second column of this matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.Column2">
            <summary>
            Gets the third column of this matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.Diagonal">
            <summary>
            Gets or sets the values along the main diagonal of the matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3.Trace">
            <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3.#ctor(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Bottom row of the matrix</param>
        </member>
        <member name="M:System.Numerics.Matrix3.#ctor(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Bottom row of the matrix</param>
        </member>
        <member name="M:System.Numerics.Matrix3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.#ctor(System.Numerics.Matrix4@)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="matrix">A Matrix4 to take the upper-left 3x3 from.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.Normalized">
            <summary>
            Divides each element in the Matrix by the <see cref="P:System.Numerics.Matrix3.Determinant"/>.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3.Invert(System.Numerics.Matrix3@)">
            <summary>
            Outs an inverted copy of this instance. Returns whether the inversion was successful.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3.ClearScale">
            <summary>
            Returns a copy of this Matrix3 without scale.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3.ClearRotation">
            <summary>
            Returns a copy of this Matrix3 without rotation.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3.ExtractScale">
            <summary>
            Returns the scale component of this instance.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3.ExtractRotation(System.Boolean)">
            <summary>
            Returns the rotation component of this instance. Quite slow.
            </summary>
            <param name="rowNormalise">Whether the method should row-normalise (i.e. remove scale from) the Matrix. Pass false if you know it's already normalised.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.CrossProductMatrix(System.Numerics.Vector3@)">
            <summary>
            Returns the cross product of a vector.
            </summary>
            <param name="v">The vector to use as input.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.CreateFromAxisAngle(System.Numerics.Vector3@,System.Single,System.Numerics.Matrix3@)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.CreateFromQuaternion(System.Numerics.Quaternion@,System.Numerics.Matrix3@)">
            <summary>
            Build a rotation matrix from the specified quaternion.
            </summary>
            <param name="q">Quaternion to translate.</param>
            <param name="result">Matrix result.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.CreateRotationX(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.CreateRotationY(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.CreateRotationZ(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.CreateScale(System.Single)">
            <summary>
            Creates a scale matrix.
            </summary>
            <param name="scale">Single scale factor for the x, y, and z axes.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.CreateScale(System.Numerics.Vector3@)">
            <summary>
            Creates a scale matrix.
            </summary>
            <param name="scale">Scale factors for the x, y, and z axes.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates a scale matrix.
            </summary>
            <param name="x">Scale factor for the x axis.</param>
            <param name="y">Scale factor for the y axis.</param>
            <param name="z">Scale factor for the z axis.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.Add(System.Numerics.Matrix3@,System.Numerics.Matrix3@)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The left operand of the addition.</param>
            <param name="right">The right operand of the addition.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.Subtract(System.Numerics.Matrix3@,System.Numerics.Matrix3@)">
            <summary>
            Subtracts the second matrix from the first.
            </summary>
            <param name="left">The left operand of the subtraction.</param>
            <param name="right">The right operand of the subtraction.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.Negate(System.Numerics.Matrix3@)">
            <summary>
            The matrix to negate (not invert, ie. 0 - matrix)
            </summary>
            <param name="matrix">The matrix to negate.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.Mult(System.Numerics.Matrix3@,System.Single)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.Mult(System.Numerics.Matrix3@,System.Numerics.Vector3@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="matrix">The left operand of the multiplication.</param>
            <param name="vertex">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.Mult(System.Numerics.Matrix3@,System.Numerics.Matrix3@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
        </member>
        <member name="M:System.Numerics.Matrix3.Invert(System.Numerics.Matrix3@,System.Numerics.Matrix3@)">
            <summary>
            Calculate the inverse of the given matrix, and returns whether the inversion was successful.
            </summary>
            <param name="mat">The matrix to invert</param>
            <param name="result">The inverse of the given matrix if it has one, or the input if it is singular</param>
        </member>
        <member name="M:System.Numerics.Matrix3.Transpose(System.Numerics.Matrix3@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.Transpose">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3.op_Addition(System.Numerics.Matrix3,System.Numerics.Matrix3)">
            <summary>
            Matrix addition
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
        </member>
        <member name="M:System.Numerics.Matrix3.op_UnaryPlus(System.Numerics.Matrix3)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3.op_UnaryNegation(System.Numerics.Matrix3)">
            <summary>
            Negates the matrix
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3.op_Subtraction(System.Numerics.Matrix3,System.Numerics.Matrix3)">
            <summary>
            Matrix subtraction
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
        </member>
        <member name="M:System.Numerics.Matrix3.op_Multiply(System.Numerics.Matrix3,System.Numerics.Matrix3)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix3 which holds the result of the multiplication</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.op_Multiply(System.Numerics.Matrix3,System.Numerics.Vector3)">
            <summary>
            Multiplies the matrix with the vector
            </summary>
            <param name="left">The matrix</param>
            <param name="right">The vector</param>
        </member>
        <member name="M:System.Numerics.Matrix3.op_Multiply(System.Numerics.Matrix3,System.Single)">
            <summary>
            Multiplies the matrix with the scalar
            </summary>
            <param name="left">The matrix</param>
            <param name="right">The scalar</param>
        </member>
        <member name="M:System.Numerics.Matrix3.op_Multiply(System.Single,System.Numerics.Matrix3)">
            <summary>
            Multiplies the matrix with the scalar
            </summary>
            <param name="left">The scalar</param>
            <param name="right">The matrix</param>
        </member>
        <member name="M:System.Numerics.Matrix3.op_Equality(System.Numerics.Matrix3,System.Numerics.Matrix3)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.op_Inequality(System.Numerics.Matrix3,System.Numerics.Matrix3)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.ToString">
            <summary>
            Returns a System.String that represents the current Matrix3d.
            </summary>
            <returns>The string representation of the matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.Equals(System.Numerics.Matrix3)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">A matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3.Equals(System.Numerics.Matrix3@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">A matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="T:System.Numerics.Matrix4">
            <summary>
            Represents a hardware-accelerated 4x4 Matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix4.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix4.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix4.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix4.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix4.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.#ctor(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:System.Numerics.Matrix4.#ctor(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:System.Numerics.Matrix4.#ctor(System.Numerics.Matrix3@)">
            <summary>
            Converts a 3x3 matrix to a 4x4 matrix.
            </summary>
            <param name="matrix">The matrix to convert.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m03">Fourth item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m13">Fourth item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
            <param name="m23">First item of the third row of the matrix.</param>
            <param name="m30">Fourth item of the fourth row of the matrix.</param>
            <param name="m31">Second item of the fourth row of the matrix.</param>
            <param name="m32">Third item of the fourth row of the matrix.</param>
            <param name="m33">Fourth item of the fourth row of the matrix.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.ToMatrix3">
            <summary>
            Gets the Matrix3 subset of this matrix.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.ToMatrix3(System.Numerics.Matrix3@)">
            <summary>
            Gets the Matrix3 subset of this matrix.
            </summary>
            <param name="matrix">The resultant matrix.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.Normalized">
            <summary>
            Divides each element in the Matrix by the <see cref="P:System.Numerics.Matrix4.Determinant"/>.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.Invert(System.Numerics.Matrix4@)">
            <summary>
            Outs an inverted copy of this instance, returns whether the inversion was successful.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.ClearScale">
            <summary>
            Returns a copy of this matrix without scale.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.ClearRotation">
            <summary>
            Returns a copy of this matrix without rotation.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.ExtractScale">
            <summary>
            Returns the scale component of this instance.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateFromAxisAngle(System.Numerics.Vector3@,System.Single,System.Numerics.Matrix4@)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateRotationX(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateRotationY(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateRotationZ(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateTranslation(System.Numerics.Vector3@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction in radians, greater than 0 by smaller than pi.</param>
            <param name="aspect">Aspect ratio of the view (width / height).</param>
            <param name="zNear">Distance to the near clip plane (greater than 0).</param>
            <param name="zFar">Distance to the far clip plane (greater than 0).</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane (must be greater than zNear)</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateScale(System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateScale(System.Numerics.Vector3@)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
        </member>
        <member name="M:System.Numerics.Matrix4.CreateFromQuaternion(System.Numerics.Quaternion@,System.Numerics.Matrix4@)">
            <summary>
            Build a rotation matrix from the specified quaternion.
            </summary>
            <param name="q">Quaternion to translate.</param>
            <param name="result">Matrix result.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.LookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            USE THE ref OVERLOAD OF THIS FUNCTION! Builds a world space to camera space matrix.
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
        </member>
        <member name="M:System.Numerics.Matrix4.LookAt(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Builds a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
        </member>
        <member name="M:System.Numerics.Matrix4.Subtract(System.Numerics.Matrix4@,System.Numerics.Matrix4@)">
            <summary>
            Subtracts the second matrix from the first.
            </summary>
            <param name="left">The left operand of the subtraction.</param>
            <param name="right">The right operand of the subtraction.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.Negate(System.Numerics.Matrix4@)">
            <summary>
            The matrix to negate (not invert, ie. 0 - matrix)
            </summary>
            <param name="matrix">The matrix to negate.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.Mult(System.Numerics.Matrix4@,System.Single)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:System.Numerics.Matrix4.Mult(System.Numerics.Matrix4@,System.Numerics.Vector4@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="matrix">The left operand of the multiplication.</param>
            <param name="vertex">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:System.Numerics.Matrix4.Mult(System.Numerics.Matrix4@,System.Numerics.Matrix4@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.Invert(System.Numerics.Matrix4@,System.Numerics.Matrix4@)">
            <summary>
            Calculate the inverse of the given matrix, and returns whether the inversion was successful.
            </summary>
            <param name="mat">The matrix to invert</param>
            <param name="result">The resultant inverse of the given matrix if it has one, or the input if it is singular</param>
        </member>
        <member name="M:System.Numerics.Matrix4.Transpose(System.Numerics.Matrix4@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:System.Numerics.Matrix4.Transpose">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.Add(System.Numerics.Matrix4@,System.Numerics.Matrix4@)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The left operand of the addition.</param>
            <param name="right">The right operand of the addition.</param>
        </member>
        <member name="M:System.Numerics.Matrix4.op_Multiply(System.Numerics.Matrix4,System.Numerics.Matrix4)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix4 which holds the result of the multiplication</returns>
        </member>
        <member name="M:System.Numerics.Matrix4.op_Addition(System.Numerics.Matrix4,System.Numerics.Matrix4)">
            <summary>
            Matrix addition
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
        </member>
        <member name="M:System.Numerics.Matrix4.op_UnaryPlus(System.Numerics.Matrix4)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.op_UnaryNegation(System.Numerics.Matrix4)">
            <summary>
            Negates the matrix
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix4.op_Subtraction(System.Numerics.Matrix4,System.Numerics.Matrix4)">
            <summary>
            Matrix subtraction
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
        </member>
        <member name="M:System.Numerics.Matrix4.op_Multiply(System.Numerics.Matrix4,System.Numerics.Vector4)">
            <summary>
            Multiplies the matrix with the vector
            </summary>
            <param name="left">The matrix</param>
            <param name="right">The vector</param>
        </member>
        <member name="M:System.Numerics.Matrix4.op_Multiply(System.Numerics.Matrix4,System.Single)">
            <summary>
            Multiplies the matrix with the scalar
            </summary>
            <param name="left">The matrix</param>
            <param name="right">The scalar</param>
        </member>
        <member name="M:System.Numerics.Matrix4.op_Multiply(System.Single,System.Numerics.Matrix4)">
            <summary>
            Multiplies the matrix with the scalar
            </summary>
            <param name="left">The scalar</param>
            <param name="right">The matrix</param>
        </member>
        <member name="M:System.Numerics.Matrix4.op_Equality(System.Numerics.Matrix4,System.Numerics.Matrix4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix4.op_Inequality(System.Numerics.Matrix4,System.Numerics.Matrix4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix4.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Numerics.Matrix4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:System.Numerics.Matrix4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare tresult.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix4.Equals(System.Numerics.Matrix4)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:System.Numerics.Matrix4.Equals(System.Numerics.Matrix4@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="T:System.PlatformType">
            <summary>
            The type of underlying platform.
            </summary>
        </member>
        <member name="F:System.PlatformType.None">
            <summary>
            The current platform is not supported.
            </summary>
        </member>
        <member name="F:System.PlatformType.Net">
            <summary>
            The current VM runtime is the .Net Framework.
            </summary>
        </member>
        <member name="F:System.PlatformType.Mono">
            <summary>
            The current VM runtime is the Mono Framework.
            </summary>
        </member>
        <member name="F:System.PlatformType.Windows">
            <summary>
            The current underlying platform is Windows.
            </summary>
        </member>
        <member name="F:System.PlatformType.Unix">
            <summary>
            The current underlying platform is Unix (ie. Linux or Mac OSX).
            </summary>
        </member>
        <member name="F:System.PlatformType.Linux">
            <summary>
            The current underlying platform is Linux.
            </summary>
        </member>
        <member name="F:System.PlatformType.MacOSX">
            <summary>
            The current underlying platform is Mac OSX.
            </summary>
        </member>
        <member name="F:System.PlatformType.X11">
            <summary>
            The current underlying platform is X11.
            </summary>
        </member>
        <member name="F:System.PlatformType.Xbox">
            <summary>
            The current underlying platform is Xbox.
            </summary>
        </member>
        <member name="F:System.PlatformType.Android">
            <summary>
            The current underlying platform is Android.
            </summary>
        </member>
        <member name="F:System.PlatformType.IOS">
            <summary>
            The current underlying platform is IOS.
            </summary>
        </member>
        <member name="T:System.Platform">
            <summary>Provides information about the underlying OS and runtime.</summary>
        </member>
        <member name="F:System.Platform.CurrentPlatform">
            <summary>
            The type of underlying platform.
            </summary>
        </member>
        <member name="P:System.Platform.IsWindowsXPOrNewer">
            <summary>
            Gets whether the OS is Windows and the version is XP or newer.
            </summary>
        </member>
        <member name="P:System.Platform.IsWindowsVistaOrNewer">
            <summary>
            Gets whether the OS is Windows and the version is Vista or newer.
            </summary>
        </member>
        <member name="P:System.Platform.Is64BitProcess">
            <summary>
            Determines whether the current process is a 64-bit process.
            </summary>
        </member>
        <member name="M:System.Platform.IsOnSpecifiedPlatform(System.PlatformType)">
            <summary>
            Gets whether the specified platform type is the current one.
            </summary>
            <param name="type">The current underlying platform.</param>
        </member>
        <member name="F:System.Platforms.MacOS.NativeApi.Carbon">
            <summary>
            Carbon library
            </summary>
        </member>
        <member name="T:System.Platforms.Unix.NativeApi">
            <summary>
            Unix function library.
            </summary>
        </member>
        <member name="T:System.Platforms.Unix.NativeApi.utsname">
            <summary>
            Struct for uname
            </summary>
        </member>
        <member name="F:System.Platforms.Unix.NativeApi.utsname.sysname">
            <summary>
            Name of this implementation of the operating system
            </summary>
        </member>
        <member name="F:System.Platforms.Unix.NativeApi.utsname.nodename">
            <summary>
            Name of this node within an implementation-dependent communications network
            </summary>
        </member>
        <member name="F:System.Platforms.Unix.NativeApi.utsname.release">
            <summary>
            Current release level of this implementation
            </summary>
        </member>
        <member name="F:System.Platforms.Unix.NativeApi.utsname.version">
            <summary>
            Current version level of this release
            </summary>
        </member>
        <member name="F:System.Platforms.Unix.NativeApi.utsname.machine">
            <summary>
            Name of the hardware type on which the system is running
            </summary>
        </member>
        <member name="F:System.Platforms.Unix.NativeApi.utsname.extraJustInCase">
            <summary>
            Padding
            </summary>
        </member>
        <member name="M:System.Platforms.Unix.NativeApi.GetUnixKernelName">
            <summary>
            Detects the unix kernel by p/invoking uname (libc).
            </summary>
        </member>
        <member name="M:System.Platforms.Unix.NativeApi.uname(System.Platforms.Unix.NativeApi.utsname@)">
            <summary>
            Gets name and information about current kernel.
            </summary>
            <param name="uname_struct">System information</param>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLGP_FLAGS.SLGP_SHORTPATH">
            <summary>Retrieves the standard short (8.3 format) file name</summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLGP_FLAGS.SLGP_UNCPRIORITY">
            <summary>Retrieves the Universal Naming Convention (UNC) path name of the file</summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLGP_FLAGS.SLGP_RAWPATH">
            <summary>Retrieves the raw path name. A raw path is something that might not exist and may include environment variables that need to be expanded</summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLR_FLAGS.SLR_NO_UI">
            <summary>
            Do not display a dialog box if the link cannot be resolved. When SLR_NO_UI is set,
            the high-order word of fFlags can be set to a time-out value that specifies the
            maximum amount of time to be spent resolving the link. The function returns if the
            link cannot be resolved within the time-out duration. If the high-order word is set
            to zero, the time-out duration will be set to the default value of 3,000 milliseconds
            (3 seconds). To specify a value, set the high word of fFlags to the desired time-out
            duration, in milliseconds.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLR_FLAGS.SLR_ANY_MATCH">
            <summary>Obsolete and no longer used</summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLR_FLAGS.SLR_UPDATE">
            <summary>If the link object has changed, update its path and list of identifiers.
            If SLR_UPDATE is set, you do not need to call IPersistFile::IsDirty to determine
            whether or not the link object has changed.</summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLR_FLAGS.SLR_NOUPDATE">
            <summary>Do not update the link information</summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLR_FLAGS.SLR_NOSEARCH">
            <summary>Do not execute the search heuristics</summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLR_FLAGS.SLR_NOTRACK">
            <summary>Do not use distributed link tracking</summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLR_FLAGS.SLR_NOLINKINFO">
            <summary>Disable distributed link tracking. By default, distributed link tracking tracks
            removable media across multiple devices based on the volume name. It also uses the
            Universal Naming Convention (UNC) path to track remote file systems whose drive letter
            has changed. Setting SLR_NOLINKINFO disables both types of tracking.</summary>
        </member>
        <member name="F:System.Platforms.Windows.Shell.SLR_FLAGS.SLR_INVOKE_MSI">
            <summary>Call the Microsoft Windows Installer</summary>
        </member>
        <member name="T:System.Platforms.Windows.Shell.IShellLinkW">
            <summary>The IShellLink interface allows Shell links to be created, modified, and resolved</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.GetPath(System.Text.StringBuilder,System.Int32,System.Platforms.Windows.Shell.WIN32_FIND_DATAW@,System.Platforms.Windows.Shell.SLGP_FLAGS)">
            <summary>Retrieves the path and file name of a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.GetIDList(System.IntPtr@)">
            <summary>Retrieves the list of item identifiers for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.SetIDList(System.IntPtr)">
            <summary>Sets the pointer to an item identifier list (PIDL) for a Shell link object.</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.GetDescription(System.Text.StringBuilder,System.Int32)">
            <summary>Retrieves the description string for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.SetDescription(System.String)">
            <summary>Sets the description for a Shell link object. The description can be any application-defined string</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.GetWorkingDirectory(System.Text.StringBuilder,System.Int32)">
            <summary>Retrieves the name of the working directory for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.SetWorkingDirectory(System.String)">
            <summary>Sets the name of the working directory for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.GetArguments(System.Text.StringBuilder,System.Int32)">
            <summary>Retrieves the command-line arguments associated with a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.SetArguments(System.String)">
            <summary>Sets the command-line arguments for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.GetHotkey(System.Int16@)">
            <summary>Retrieves the hot key for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.SetHotkey(System.Int16)">
            <summary>Sets a hot key for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.GetShowCmd(System.Int32@)">
            <summary>Retrieves the show command for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.SetShowCmd(System.Int32)">
            <summary>Sets the show command for a Shell link object. The show command sets the initial show state of the window.</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.GetIconLocation(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>Retrieves the location (path and index) of the icon for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.SetIconLocation(System.String,System.Int32)">
            <summary>Sets the location (path and index) of the icon for a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.SetRelativePath(System.String,System.Int32)">
            <summary>Sets the relative path to the Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.Resolve(System.IntPtr,System.Platforms.Windows.Shell.SLR_FLAGS)">
            <summary>Attempts to find the target of a Shell link, even if it has been moved or renamed</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.IShellLinkW.SetPath(System.String)">
            <summary>Sets the path and file name of a Shell link object</summary>
        </member>
        <member name="M:System.Platforms.Windows.Shell.GetPath(System.Platforms.Windows.Shell.KnownFolder,System.Boolean)">
            <summary>
            Gets the current path to the specified known folder as currently configured.
            Does not require the folder to be existent. The return value can be null.
            </summary>
            <param name="knownFolder">The known folder which current path will be returned.</param>
            <param name="defaultUser">Specifies if the paths of the default user (user profile template) will be used. This requires administrative rights.</param>
        </member>
        <member name="T:System.Platforms.Windows.Shell.KnownFolder">
            <summary>
            Standard folders registered with the system.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.PixelFormatDescriptor">
            <summary>
            Describes a pixel format. It is used when interfacing with the WINAPI to create a new Context.
            Found in WinGDI.h
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.DRIVERVERSION">
            <summary>
            Device driver version
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.TECHNOLOGY">
            <summary>
            Device classification
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.HORZSIZE">
            <summary>
            Horizontal size in millimeters
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.VERTSIZE">
            <summary>
            Vertical size in millimeters
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.HORZRES">
            <summary>
            Horizontal width in pixels
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.VERTRES">
            <summary>
            Vertical height in pixels
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.BITSPIXEL">
            <summary>
            Number of bits per pixel
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.PLANES">
            <summary>
            Number of planes
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.NUMBRUSHES">
            <summary>
            Number of brushes the device has
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.NUMPENS">
            <summary>
            Number of pens the device has
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.NUMMARKERS">
            <summary>
            Number of markers the device has
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.NUMFONTS">
            <summary>
            Number of fonts the device has
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.NUMCOLORS">
            <summary>
            Number of colors the device supports
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.PDEVICESIZE">
            <summary>
            Size required for device descriptor
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.CURVECAPS">
            <summary>
            Curve capabilities
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.LINECAPS">
            <summary>
            Line capabilities
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.POLYGONALCAPS">
            <summary>
            Polygonal capabilities
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.TEXTCAPS">
            <summary>
            Text capabilities
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.CLIPCAPS">
            <summary>
            Clipping capabilities
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.RASTERCAPS">
            <summary>
            Bitblt capabilities
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.ASPECTX">
            <summary>
            Length of the X leg
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.ASPECTY">
            <summary>
            Length of the Y leg
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.ASPECTXY">
            <summary>
            Length of the hypotenuse
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.SHADEBLENDCAPS">
            <summary>
            Shading and Blending caps
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.LOGPIXELSX">
            <summary>
            Logical pixels inch in X
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.LOGPIXELSY">
            <summary>
            Logical pixels inch in Y
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.SIZEPALETTE">
            <summary>
            Number of entries in physical palette
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.NUMRESERVED">
            <summary>
            Number of reserved entries in palette
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.COLORRES">
            <summary>
            Actual color resolution
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.PHYSICALWIDTH">
            <summary>
            Physical Width in device units
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.PHYSICALHEIGHT">
            <summary>
            Physical Height in device units
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.PHYSICALOFFSETX">
            <summary>
            Physical Printable Area x margin
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.PHYSICALOFFSETY">
            <summary>
            Physical Printable Area y margin
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.SCALINGFACTORX">
            <summary>
            Scaling factor x
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.SCALINGFACTORY">
            <summary>
            Scaling factor y
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.VREFRESH">
            <summary>
            Current vertical refresh rate of the display device (for displays only) in Hz
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.DESKTOPVERTRES">
            <summary>
            Vertical height of entire desktop in pixels
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.DESKTOPHORZRES">
            <summary>
            Horizontal width of entire desktop in pixels
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.DeviceCap.BLTALIGNMENT">
            <summary>
            Preferred blt alignment
            </summary>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.SetProcessDPIAware">
            <summary>
            Sets the current process as dots per inch (dpi) aware.
            Note: SetProcessDPIAware is subject to a possible race condition
            if a DLL caches dpi settings during initialization.
            For this reason, it is recommended that dpi-aware be set through
            the application (.exe) manifest rather than by calling SetProcessDPIAware.
            </summary>
            <returns>
            If the function succeeds, the return value is true.
            Otherwise, the return value is false.
            </returns>
            <remarks>
            DLLs should accept the dpi setting of the host process
            rather than call SetProcessDPIAware themselves.
            To be set properly, dpiAware should be specified as part
            of the application (.exe) manifest.
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.TimeBeginPeriod(System.UInt32)">
            <summary>TimeBeginPeriod(). See the Windows API documentation for details.</summary>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.TimeEndPeriod(System.UInt32)">
            <summary>TimeEndPeriod(). See the Windows API documentation for details.</summary>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.AdjustWindowRect(System.Platforms.Windows.Win32Rectangle@,System.Platforms.Windows.WindowStyle,System.Boolean)">
            <summary>
            Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size.
            </summary>
            <param name="lpRect">[in, out] Pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.</param>
            <param name="dwStyle">[in] Specifies the window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.</param>
            <param name="bMenu">[in] Specifies whether the window has a menu.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            A client rectangle is the smallest rectangle that completely encloses a client area. A window rectangle is the smallest rectangle that completely encloses the window, which includes the client area and the nonclient area. 
            The AdjustWindowRect function does not add extra space when a menu bar wraps to two or more rows. 
            The AdjustWindowRect function does not take the WS_VSCROLL or WS_HSCROLL styles into account. To account for the scroll bars, call the GetSystemMetrics function with SM_CXVSCROLL or SM_CYHSCROLL.
            Found Winuser.h, user32.dll
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.SetWindowLong(System.IntPtr,System.Platforms.Windows.GetWindowLongOffsets,System.UIntPtr)">
            <summary>
            Compatible with both 32-bit and 64-bit.
            </summary>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.SetWindowLong(System.IntPtr,System.Platforms.Windows.WindowProcedure)">
            <summary>
            Compatible with both 32-bit and 64-bit.
            </summary>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.SetClassLong(System.IntPtr,System.Platforms.Windows.ClassLongFlags,System.IntPtr)">
            <summary>
            Compatible with both 32-bit and 64-bit.
            </summary>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetClassLong(System.IntPtr,System.Platforms.Windows.ClassLongFlags)">
            <summary>
            Compatible with both 32-bit and 64-bit.
            </summary>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.PeekMessage(System.Platforms.Windows.MSG@,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Low-level WINAPI function that checks the next message in the queue.
            </summary>
            <param name="msg">The pending message (if any) is stored here.</param>
            <param name="hWnd">Not used</param>
            <param name="messageFilterMin">Not used</param>
            <param name="messageFilterMax">Not used</param>
            <param name="flags">Not used</param>
            <returns>True if there is a message pending.</returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetMessage(System.Platforms.Windows.MSG@,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Low-level WINAPI function that retrieves the next message in the queue.
            </summary>
            <param name="msg">The pending message (if any) is stored here.</param>
            <param name="windowHandle">Not used</param>
            <param name="messageFilterMin">Not used</param>
            <param name="messageFilterMax">Not used</param>
            <returns>
            Nonzero indicates that the function retrieves a message other than WM_QUIT.
            Zero indicates that the function retrieves the WM_QUIT message, or that lpMsg is an invalid pointer.
            1 indicates that an error occurred  for example, the function fails if hWnd is an invalid window handle.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetQueueStatus(System.Platforms.Windows.QueueStatusFlags)">
            <summary>
            Indicates the type of messages found in the calling thread's message queue.
            </summary>
            <param name="flags"></param>
            <returns>
            The high-order word of the return value indicates the types of messages currently in the queue.
            The low-order word indicates the types of messages that have been added to the queue and that are still
            in the queue since the last call to the GetQueueStatus, GetMessage, or PeekMessage function.
            </returns>
            <remarks>
            The presence of a QS_ flag in the return value does not guarantee that
            a subsequent call to the GetMessage or PeekMessage function will return a message.
            GetMessage and PeekMessage perform some public filtering that may cause the message
            to be processed internally. For this reason, the return value from GetQueueStatus
            should be considered only a hint as to whether GetMessage or PeekMessage should be called. 
            <para>
            The QS_ALLPOSTMESSAGE and QS_POSTMESSAGE type differ in when they are cleared.
            QS_POSTMESSAGE is cleared when you call GetMessage or PeekMessage, whether or not you are filtering messages.
            QS_ALLPOSTMESSAGE is cleared when you call GetMessage or PeekMessage without filtering messages
            (wMsgFilterMin and wMsgFilterMax are 0). This can be useful when you call PeekMessage multiple times
            to get messages in different ranges.
            </para>
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetDC(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <param name="DC"></param>
            <returns></returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.FreeLibrary(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.ShowWindow(System.IntPtr,System.Platforms.Windows.ShowWindowCommand)">
            <summary>
            The ShowWindow function sets the specified window's show state.
            </summary>
            <param name="hWnd">[in] Handle to the window.</param>
            <param name="nCmdShow">[in] Specifies how the window is to be shown. This parameter is ignored the first time an application calls ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise, the first time ShowWindow is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter. In subsequent calls, this parameter can be one of the ShowWindowEnum values.</param>
            <returns>If the window was previously visible, the return value is true. Otherwise false.</returns>
            <remarks>
            <para>To perform certain special effects when showing or hiding a window, use AnimateWindow.</para>
            <para>The first time an application calls ShowWindow, it should use the WinMain function's nCmdShow parameter as its nCmdShow parameter. Subsequent calls to ShowWindow must use one of the values in the given list, instead of the one specified by the WinMain function's nCmdShow parameter.</para>
            <para>As noted in the discussion of the nCmdShow parameter, the nCmdShow value is ignored in the first call to ShowWindow if the program that launched the application specifies startup information in the structure. In this case, ShowWindow uses the information specified in the STARTUPINFO structure to show the window. On subsequent calls, the application must call ShowWindow with nCmdShow set to SW_SHOWDEFAULT to use the startup information provided by the program that launched the application. This behavior is designed for the following situations:</para>
            <list type="">
            <item>Applications create their main window by calling CreateWindow with the WS_VISIBLE flag set.</item>
            <item>Applications create their main window by calling CreateWindow with the WS_VISIBLE flag cleared, and later call ShowWindow with the SW_SHOW flag set to make it visible.</item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.SetWindowText(System.IntPtr,System.String)">
            <summary>
            The SetWindowText function changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.
            </summary>
            <param name="hWnd">[in] Handle to the window or control whose text is to be changed.</param>
            <param name="lpString">[in] Pointer to a null-terminated string to be used as the new title or control text.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>If the target window is owned by the current process, SetWindowText causes a WM_SETTEXT message to be sent to the specified window or control. If the control is a list box control created with the WS_CAPTION style, however, SetWindowText sets the text for the control, not for the list box entries. </para>
            <para>To set the text of a control in another process, send the WM_SETTEXT message directly instead of calling SetWindowText. </para>
            <para>The SetWindowText function does not expand tab characters (ASCII code 0x09). Tab characters are displayed as vertical bar (|) characters. </para>
            <para>Windows 95/98/Me: SetWindowTextW is supported by the Microsoft Layer for Unicode (MSLU). To use this, you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems .</para>
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            The GetWindowText function copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.
            </summary>
            <param name="hWnd">[in] Handle to the window or control containing the text.</param>
            <param name="lpString">[out] Pointer to the buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a NULL character.</param>
            <param name="nMaxCount">[in] Specifies the maximum number of characters to copy to the buffer, including the NULL character. If the text exceeds this limit, it is truncated.</param>
            <returns>
            If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating NULL character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call GetLastError.
            <para>This function cannot retrieve the text of an edit control in another application.</para>
            </returns>
            <remarks>
            <para>If the target window is owned by the current process, GetWindowText causes a WM_GETTEXT message to be sent to the specified window or control. If the target window is owned by another process and has a caption, GetWindowText retrieves the window caption text. If the window does not have a caption, the return value is a null string. This behavior is by design. It allows applications to call GetWindowText without becoming unresponsive if the process that owns the target window is not responding. However, if the target window is not responding and it belongs to the calling application, GetWindowText will cause the calling application to become unresponsive.</para>
            <para>To retrieve the text of a control in another process, send a WM_GETTEXT message directly instead of calling GetWindowText.</para>
            <para>Windows 95/98/Me: GetWindowTextW is supported by the Microsoft Layer for Unicode (MSLU). To use this, you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me</para>
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.ScreenToClient(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Converts the screen coordinates of a specified point on the screen to client-area coordinates.
            </summary>
            <param name="hWnd">Handle to the window whose client area will be used for the conversion.</param>
            <param name="point">Pointer to a POINT structure that specifies the screen coordinates to be converted.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. Windows NT/2000/XP: To get extended error information, call GetLastError.</returns>
            <remarks>
            <para>The function uses the window identified by the hWnd parameter and the screen coordinates given in the POINT structure to compute client coordinates. It then replaces the screen coordinates with the client coordinates. The new coordinates are relative to the upper-left corner of the specified window's client area. </para>
            <para>The ScreenToClient function assumes the specified point is in screen coordinates. </para>
            <para>All coordinates are in device units.</para>
            <para>Do not use ScreenToClient when in a mirroring situation, that is, when changing from left-to-right layout to right-to-left layout. Instead, use MapWindowPoints. For more information, see "Window Layout and Mirroring" in Window Features.</para>
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Converts the client-area coordinates of a specified point to screen coordinates.
            </summary>
            <param name="hWnd">Handle to the window whose client area will be used for the conversion.</param>
            <param name="point">Pointer to a POINT structure that contains the client coordinates to be converted. The new screen coordinates are copied into this structure if the function succeeds.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. Windows NT/2000/XP: To get extended error information, call GetLastError.</returns>
            <remarks>
            <para>The ClientToScreen function replaces the client-area coordinates in the POINT structure with the screen coordinates. The screen coordinates are relative to the upper-left corner of the screen. Note, a screen-coordinate point that is above the window's client area has a negative y-coordinate. Similarly, a screen coordinate to the left of a client area has a negative x-coordinate.</para>
            <para>All coordinates are device coordinates.</para>
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetClientRect(System.IntPtr,System.Platforms.Windows.Win32Rectangle@)">
            <summary>
            The GetClientRect function retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0).
            </summary>
            <param name="windowHandle">Handle to the window whose client coordinates are to be retrieved.</param>
            <param name="clientRectangle">Pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>In conformance with conventions for the RECT structure, the bottom-right coordinates of the returned rectangle are exclusive. In other words, the pixel at (right, bottom) lies immediately outside the rectangle.</remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetWindowRect(System.IntPtr,System.Platforms.Windows.Win32Rectangle@)">
            <summary>
            The GetWindowRect function retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="windowHandle">Handle to the window whose client coordinates are to be retrieved.</param>
            <param name="windowRectangle"> Pointer to a structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>In conformance with conventions for the RECT structure, the bottom-right coordinates of the returned rectangle are exclusive. In other words, the pixel at (right, bottom) lies immediately outside the rectangle.</remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.ChangeDisplaySettings(System.Platforms.Windows.DeviceMode,System.Platforms.Windows.ChangeDisplaySettingsEnum)">
            <summary>
            The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.
            </summary>
            <param name="device_mode">[in] Pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change.</param>
            <param name="flags">[in] Indicates how the graphics mode should be changed.</param>
            <returns></returns>
            <remarks>To change the settings of a specified display device, use the ChangeDisplaySettingsEx function.
            <para>To ensure that the DEVMODE structure passed to ChangeDisplaySettings is valid and contains only values supported by the display driver, use the DEVMODE returned by the EnumDisplaySettings function.</para>
            <para>When the display mode is changed dynamically, the WM_DISPLAYCHANGE message is sent to all running applications.</para>
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetCursorPos(System.Platforms.Windows.POINT@)">
            <summary>
            Retrieves the cursor's position, in screen coordinates.
            </summary>
            <param name="point">Pointer to a POINT structure that receives the screen coordinates of the cursor.</param>
            <returns>Returns nonzero if successful or zero otherwise. To get extended error information, call GetLastError.</returns>
            <remarks>
            <para>The cursor position is always specified in screen coordinates and is not affected by the mapping mode of the window that contains the cursor.</para>
            <para>The calling process must have WINSTA_READATTRIBUTES access to the window station.</para>
            <para>The input desktop must be the current desktop when you call GetCursorPos. Call OpenInputDesktop to determine whether the current desktop is the input desktop. If it is not, call SetThreadDesktop with the HDESK returned by OpenInputDesktop to switch to that desktop.</para>
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.DefRawInputProc(System.Platforms.Windows.RawInput[],System.Int32,System.UInt32)">
            <summary>
            calls the default raw input procedure to provide default processing for
            any raw input messages that an application does not process.
            This function ensures that every message is processed.
            DefRawInputProc is called with the same parameters received by the window procedure.
            </summary>
            <param name="RawInput">Pointer to an array of RawInput structures.</param>
            <param name="Input">Number of RawInput structures pointed to by paRawInput.</param>
            <param name="SizeHeader">Size, in bytes, of the RawInputHeader structure.</param>
            <returns>If successful, the function returns S_OK. Otherwise it returns an error value.</returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.RegisterRawInputDevices(System.Platforms.Windows.RawInputDevice[],System.UInt32,System.UInt32)">
            <summary>
            Registers the devices that supply the raw input data.
            </summary>
            <param name="RawInputDevices">
            Pointer to an array of RawInputDevice structures that represent the devices that supply the raw input.
            </param>
            <param name="NumDevices">
            Number of RawInputDevice structures pointed to by RawInputDevices.
            </param>
            <param name="Size">
            Size, in bytes, of a RAWINPUTDEVICE structure.
            </param>
            <returns>
            TRUE if the function succeeds; otherwise, FALSE. If the function fails, call GetLastError for more information.
            </returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetRawInputBuffer(System.Platforms.Windows.RawInput[],System.UInt32@,System.UInt32)">
            <summary>
            Does a buffered read of the raw input data.
            </summary>
            <param name="Data">
            Pointer to a buffer of RawInput structures that contain the raw input data.
            If NULL, the minimum required buffer, in bytes, is returned in Size.
            </param>
            <param name="Size">Pointer to a variable that specifies the size, in bytes, of a RawInput structure.</param>
            <param name="SizeHeader">Size, in bytes, of RawInputHeader.</param>
            <returns>
            If Data is NULL and the function is successful, the return value is zero.
            If Data is not NULL and the function is successful, the return value is the number
            of RawInput structures written to Data.
            If an error occurs, the return value is (UINT)-1. Call GetLastError for the error code.
            </returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetRegisteredRawInputDevices(System.Platforms.Windows.RawInput[],System.UInt32@,System.UInt32)">
            <summary>
            Gets the information about the raw input devices for the current application.
            </summary>
            <param name="RawInputDevices">
            Pointer to an array of RawInputDevice structures for the application.
            </param>
            <param name="NumDevices">
            Number of RawInputDevice structures in RawInputDevices.
            </param>
            <param name="cbSize">
            Size, in bytes, of a RawInputDevice structure.
            </param>
            <returns>
            <para>
            If successful, the function returns a non-negative number that is
            the number of RawInputDevice structures written to the buffer. 
            </para>
            <para>
            If the pRawInputDevices buffer is too small or NULL, the function sets
            the last error as ERROR_INSUFFICIENT_BUFFER, returns -1,
            and sets NumDevices to the required number of devices.
            </para>
            <para>
            If the function fails for any other reason, it returns -1. For more details, call GetLastError.
            </para>
            </returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetRawInputDeviceList(System.Platforms.Windows.RawInputDeviceList[],System.UInt32@,System.UInt32)">
            <summary>
            Enumerates the raw input devices attached to the system.
            </summary>
            <param name="RawInputDeviceList">
            ointer to buffer that holds an array of RawInputDeviceList structures
            for the devices attached to the system.
            If NULL, the number of devices are returned in NumDevices.
            </param>
            <param name="NumDevices">
            Pointer to a variable. If RawInputDeviceList is NULL, it specifies the number
            of devices attached to the system. Otherwise, it contains the size, in bytes,
            of the preallocated buffer pointed to by pRawInputDeviceList.
            However, if NumDevices is smaller than needed to contain RawInputDeviceList structures,
            the required buffer size is returned here.
            </param>
            <param name="Size">
            Size of a RawInputDeviceList structure.
            </param>
            <returns>
            If the function is successful, the return value is the number of devices stored in the buffer
            pointed to by RawInputDeviceList.
            If RawInputDeviceList is NULL, the return value is zero. 
            If NumDevices is smaller than needed to contain all the RawInputDeviceList structures,
            the return value is (UINT) -1 and the required buffer is returned in NumDevices.
            Calling GetLastError returns ERROR_INSUFFICIENT_BUFFER.
            On any other error, the function returns (UINT) -1 and GetLastError returns the error indication.
            </returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetRawInputDeviceList(System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            Enumerates the raw input devices attached to the system.
            </summary>
            <param name="RawInputDeviceList">
            ointer to buffer that holds an array of RawInputDeviceList structures
            for the devices attached to the system.
            If NULL, the number of devices are returned in NumDevices.
            </param>
            <param name="NumDevices">
            Pointer to a variable. If RawInputDeviceList is NULL, it specifies the number
            of devices attached to the system. Otherwise, it contains the size, in bytes,
            of the preallocated buffer pointed to by pRawInputDeviceList.
            However, if NumDevices is smaller than needed to contain RawInputDeviceList structures,
            the required buffer size is returned here.
            </param>
            <param name="Size">
            Size of a RawInputDeviceList structure.
            </param>
            <returns>
            If the function is successful, the return value is the number of devices stored in the buffer
            pointed to by RawInputDeviceList.
            If RawInputDeviceList is NULL, the return value is zero. 
            If NumDevices is smaller than needed to contain all the RawInputDeviceList structures,
            the return value is (UINT) -1 and the required buffer is returned in NumDevices.
            Calling GetLastError returns ERROR_INSUFFICIENT_BUFFER.
            On any other error, the function returns (UINT) -1 and GetLastError returns the error indication.
            </returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetRawInputDeviceInfo(System.IntPtr,System.Platforms.Windows.RawInputDeviceInfoEnum,System.IntPtr,System.UInt32@)">
            <summary>
            Gets information about the raw input device.
            </summary>
            <param name="Device">
            Handle to the raw input device. This comes from the lParam of the WM_INPUT message,
            from RawInputHeader.Device, or from GetRawInputDeviceList.
            It can also be NULL if an application inserts input data, for example, by using SendInput.
            </param>
            <param name="Command">
            Specifies what data will be returned in pData. It can be one of the following values. 
            RawInputDeviceInfoEnum.PREPARSEDDATA
            Data points to the previously parsed data.
            RawInputDeviceInfoEnum.DEVICENAME
            Data points to a string that contains the device name. 
            For this Command only, the value in Size is the character count (not the byte count).
            RawInputDeviceInfoEnum.DEVICEINFO
            Data points to an RawInputDeviceInfo structure.
            </param>
            <param name="Data">
            ointer to a buffer that contains the information specified by Command.
            If Command is RawInputDeviceInfoEnum.DEVICEINFO, set RawInputDeviceInfo.Size to sizeof(RawInputDeviceInfo)
            before calling GetRawInputDeviceInfo. (This is done automatically in System)
            </param>
            <param name="Size">
            Pointer to a variable that contains the size, in bytes, of the data in Data.
            </param>
            <returns>
            <para>If successful, this function returns a non-negative number indicating the number of bytes copied to Data.</para>
            <para>If Data is not large enough for the data, the function returns -1. If Data is NULL, the function returns a value of zero. In both of these cases, Size is set to the minimum size required for the Data buffer.</para>
            <para>Call GetLastError to identify any other errors.</para>
            </returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetRawInputDeviceInfo(System.IntPtr,System.Platforms.Windows.RawInputDeviceInfoEnum,System.Platforms.Windows.RawInputDeviceInfo,System.UInt32@)">
            <summary>
            Gets information about the raw input device.
            </summary>
            <param name="Device">
            Handle to the raw input device. This comes from the lParam of the WM_INPUT message,
            from RawInputHeader.Device, or from GetRawInputDeviceList.
            It can also be NULL if an application inserts input data, for example, by using SendInput.
            </param>
            <param name="Command">
            Specifies what data will be returned in pData. It can be one of the following values. 
            RawInputDeviceInfoEnum.PREPARSEDDATA
            Data points to the previously parsed data.
            RawInputDeviceInfoEnum.DEVICENAME
            Data points to a string that contains the device name. 
            For this Command only, the value in Size is the character count (not the byte count).
            RawInputDeviceInfoEnum.DEVICEINFO
            Data points to an RawInputDeviceInfo structure.
            </param>
            <param name="Data">
            ointer to a buffer that contains the information specified by Command.
            If Command is RawInputDeviceInfoEnum.DEVICEINFO, set RawInputDeviceInfo.Size to sizeof(RawInputDeviceInfo)
            before calling GetRawInputDeviceInfo. (This is done automatically in System)
            </param>
            <param name="Size">
            Pointer to a variable that contains the size, in bytes, of the data in Data.
            </param>
            <returns>
            <para>If successful, this function returns a non-negative number indicating the number of bytes copied to Data.</para>
            <para>If Data is not large enough for the data, the function returns -1. If Data is NULL, the function returns a value of zero. In both of these cases, Size is set to the minimum size required for the Data buffer.</para>
            <para>Call GetLastError to identify any other errors.</para>
            </returns>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetRawInputData(System.IntPtr,System.Platforms.Windows.GetRawInputDataEnum,System.IntPtr,System.Int32@,System.Int32)">
            <summary>
            Gets the raw input from the specified device.
            </summary>
            <param name="RawInput">Handle to the RawInput structure. This comes from the lParam in WM_INPUT.</param>
            <param name="Command">
            Command flag. This parameter can be one of the following values. 
            RawInputDateEnum.INPUT
            Get the raw data from the RawInput structure.
            RawInputDateEnum.HEADER
            Get the header information from the RawInput structure.
            </param>
            <param name="Data">Pointer to the data that comes from the RawInput structure. This depends on the value of uiCommand. If Data is NULL, the required size of the buffer is returned in Size.</param>
            <param name="Size">Pointer to a variable that specifies the size, in bytes, of the data in Data.</param>
            <param name="SizeHeader">Size, in bytes, of RawInputHeader.</param>
            <returns>
            <para>If Data is NULL and the function is successful, the return value is 0. If Data is not NULL and the function is successful, the return value is the number of bytes copied into Data.</para>
            <para>If there is an error, the return value is (UINT)-1.</para>
            </returns>
            <remarks>
            GetRawInputData gets the raw input one RawInput structure at a time. In contrast, GetRawInputBuffer gets an array of RawInput structures.
            </remarks>
        </member>
        <member name="M:System.Platforms.Windows.NativeApi.GetRawInputData(System.IntPtr,System.Platforms.Windows.GetRawInputDataEnum,System.Platforms.Windows.RawInput@,System.Int32@,System.Int32)">
            <summary>
            Gets the raw input from the specified device.
            </summary>
            <param name="RawInput">Handle to the RawInput structure. This comes from the lParam in WM_INPUT.</param>
            <param name="Command">
            Command flag. This parameter can be one of the following values. 
            RawInputDateEnum.INPUT
            Get the raw data from the RawInput structure.
            RawInputDateEnum.HEADER
            Get the header information from the RawInput structure.
            </param>
            <param name="Data">Pointer to the data that comes from the RawInput structure. This depends on the value of uiCommand. If Data is NULL, the required size of the buffer is returned in Size.</param>
            <param name="Size">Pointer to a variable that specifies the size, in bytes, of the data in Data.</param>
            <param name="SizeHeader">Size, in bytes, of RawInputHeader.</param>
            <returns>
            <para>If Data is NULL and the function is successful, the return value is 0. If Data is not NULL and the function is successful, the return value is the number of bytes copied into Data.</para>
            <para>If there is an error, the return value is (UINT)-1.</para>
            </returns>
            <remarks>
            GetRawInputData gets the raw input one RawInput structure at a time. In contrast, GetRawInputBuffer gets an array of RawInput structures.
            </remarks>
        </member>
        <member name="T:System.Platforms.Windows.NCHITTEST">
            <summary>
            Location of cursor hot spot returnet in WM_NCHITTEST.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTERROR">
            <summary>
            On the screen background or on a dividing line between windows 
            (same as HTNOWHERE, except that the DefWindowProc function produces a system beep to indicate an error).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTTRANSPARENT">
            <summary>
            In a window currently covered by another window in the same thread 
            (the message will be sent to underlying windows in the same thread until one of them returns a code that is not HTTRANSPARENT).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTNOWHERE">
            <summary>
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTCLIENT">
            <summary>In a client area.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTCAPTION">
            <summary>In a title bar.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTSYSMENU">
            <summary>In a window menu or in a Close button in a child window.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTGROWBOX">
            <summary>In a size box (same as HTSIZE).</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTMENU">
            <summary>In a menu.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTHSCROLL">
            <summary>In a horizontal scroll bar.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTVSCROLL">
            <summary>In the vertical scroll bar.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTMINBUTTON">
            <summary>In a Minimize button.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTMAXBUTTON">
            <summary>In a Maximize button.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTLEFT">
            <summary>In the left border of a resizable window 
            (the user can click the mouse to resize the window horizontally).</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTRIGHT">
            <summary>
            In the right border of a resizable window 
            (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTTOP">
            <summary>In the upper-horizontal border of a window.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTTOPLEFT">
            <summary>In the upper-left corner of a window border.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTTOPRIGHT">
            <summary>In the upper-right corner of a window border.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTBOTTOM">
            <summary>	In the lower-horizontal border of a resizable window 
            (the user can click the mouse to resize the window vertically).</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTBOTTOMLEFT">
            <summary>In the lower-left corner of a border of a resizable window 
            (the user can click the mouse to resize the window diagonally).</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTBOTTOMRIGHT">
            <summary>	In the lower-right corner of a border of a resizable window 
            (the user can click the mouse to resize the window diagonally).</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTBORDER">
            <summary>In the border of a window that does not have a sizing border.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTCLOSE">
            <summary>In a Close button.</summary>
        </member>
        <member name="F:System.Platforms.Windows.NCHITTEST.HTHELP">
            <summary>In a Help button.</summary>
        </member>
        <member name="F:System.Platforms.Windows.STARTUPINFO.wShowWindow">
            <summary>
            ShowWindowCommand flags
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.lpCreateParams">
            <summary>
            Contains additional data which may be used to create the window.
            </summary>
            <remarks>
             If the window is being created as a result of a call to the CreateWindow
             or CreateWindowEx function, this member contains the value of the lpParam 
             parameter specified in the function call.
             <para>
            If the window being created is a multiple-document interface (MDI) client window,
            this member contains a pointer to a CLIENTCREATESTRUCT structure. If the window
            being created is a MDI child window, this member contains a pointer to an 
            MDICREATESTRUCT structure.
             </para>
            <para>
            Windows NT/2000/XP: If the window is being created from a dialog template,
            this member is the address of a SHORT value that specifies the size, in bytes,
            of the window creation data. The value is immediately followed by the creation data.
            </para>
            <para>
            Windows NT/2000/XP: You should access the data represented by the lpCreateParams member
            using a pointer that has been declared using the UNALIGNED type, because the pointer
            may not be DWORD aligned.
            </para>
            </remarks>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.hInstance">
            <summary>
            Handle to the module that owns the new window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.hMenu">
            <summary>
            Handle to the menu to be used by the new window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.hwndParent">
            <summary>
            Handle to the parent window, if the window is a child window.
            If the window is owned, this member identifies the owner window.
            If the window is not a child or owned window, this member is NULL.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.cy">
            <summary>
            Specifies the height of the new window, in pixels.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.cx">
            <summary>
            Specifies the width of the new window, in pixels.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.y">
            <summary>
            Specifies the y-coordinate of the upper left corner of the new window.
            If the new window is a child window, coordinates are relative to the parent window.
            Otherwise, the coordinates are relative to the screen origin.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.x">
            <summary>
            Specifies the x-coordinate of the upper left corner of the new window.
            If the new window is a child window, coordinates are relative to the parent window.
            Otherwise, the coordinates are relative to the screen origin.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.style">
            <summary>
            Specifies the style for the new window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.lpszName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the new window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.lpszClass">
            <summary>
            Either a pointer to a null-terminated string or an atom that specifies the public class name
            of the new window.
            <remarks>
            Note  Because the lpszClass member can contain a pointer to a local (and thus inaccessable) atom,
            do not obtain the public class name by using this member. Use the GetClassName function instead.
            </remarks>
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.CreateStruct.dwExStyle">
            <summary>
            Specifies the extended window style for the new window.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.WindowsDisplayDevice">
            \public
            <summary>
            The DISPLAY_DEVICE structure receives information about the display device specified by the iDevNum parameter of the EnumDisplayDevices function.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.MINMAXINFO">
            \public
            <summary>
            Struct pointed to by WM_GETMINMAXINFO lParam
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.WindowPosition">
            \public
            <summary>
            The WindowPosition structure contains information about the size and position of a window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowPosition.hwnd">
            <summary>
            Handle to the window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowPosition.hwndInsertAfter">
            <summary>
            Specifies the position of the window in Z order (front-to-back position).
            This member can be a handle to the window behind which this window is placed,
            or can be one of the special values listed with the SetWindowPos function.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowPosition.x">
            <summary>
            Specifies the position of the left edge of the window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowPosition.y">
            <summary>
            Specifies the position of the top edge of the window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowPosition.cx">
            <summary>
            Specifies the window width, in pixels.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowPosition.cy">
            <summary>
            Specifies the window height, in pixels.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowPosition.flags">
            <summary>
            Specifies the window position.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.NOSIZE">
            <summary>
            Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.NOMOVE">
            <summary>
            Retains the current position (ignores the x and y parameters).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.NOZORDER">
            <summary>
            Retains the current Z order (ignores the hwndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.NOREDRAW">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs.
            This applies to the client area, the nonclient area (including the title bar and scroll bars),
            and any part of the parent window uncovered as a result of the window being moved.
            When this flag is set, the application must explicitly invalidate or redraw any parts
            of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.NOACTIVATE">
            <summary>
            Does not activate the window. If this flag is not set,
            the window is activated and moved to the top of either the topmost or non-topmost group
            (depending on the setting of the hwndInsertAfter member).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.FRAMECHANGED">
            <summary>
            Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed.
            If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.SHOWWINDOW">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.HIDEWINDOW">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area. If this flag is not specified,
            the valid contents of the client area are saved and copied back into the client area 
            after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.NOOWNERZORDER">
            <summary>
            Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.NOSENDCHANGING">
            <summary>
            Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.DRAWFRAME">
            <summary>
            Draws a frame (defined in the window's public class description) around the window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.SetWindowPosFlags.NOREPOSITION">
            <summary>
            Same as the NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawInputDevice">
            \public
            <summary>
            Defines information for the raw input devices.
            </summary>
            <remarks>
            If RIDEV_NOLEGACY is set for a mouse or a keyboard, the system does not generate any legacy message for that device for the application. For example, if the mouse TLC is set with RIDEV_NOLEGACY, WM_LBUTTONDOWN and related legacy mouse messages are not generated. Likewise, if the keyboard TLC is set with RIDEV_NOLEGACY, WM_KEYDOWN and related legacy keyboard messages are not generated.
            </remarks>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDevice.UsagePage">
            <summary>
            Top level collection Usage page for the raw input device.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDevice.Usage">
            <summary>
            Top level collection Usage for the raw input device.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDevice.Flags">
            <summary>
            Mode flag that specifies how to interpret the information provided by UsagePage and Usage.
            It can be zero (the default) or one of the following values.
            By default, the operating system sends raw input from devices with the specified top level collection (TLC)
            to the registered application as long as it has the window focus. 
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDevice.Target">
            <summary>
            Handle to the target window. If NULL it follows the keyboard focus.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawInputDeviceList">
            \public
            <summary>
            Contains information about a raw input device.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceList.Device">
            <summary>
            Handle to the raw input device.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceList.Type">
            <summary>
            Type of device.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawInput">
            \public
            <summary>
            Contains the raw input from a device.
            </summary>
            <remarks>
            <para>The handle to this structure is passed in the lParam parameter of WM_INPUT.</para>
            <para>To get detailed information -- such as the header and the content of the raw input -- call GetRawInputData.</para>
            <para>To get device specific information, call GetRawInputDeviceInfo with the hDevice from RAWINPUTHEADER.</para>
            <para>Raw input is available only when the application calls RegisterRawInputDevices with valid device specifications.</para>
            </remarks>
        </member>
        <member name="T:System.Platforms.Windows.RawInputHeader">
            \public
            <summary>
            Contains the header information that is part of the raw input data.
            </summary>
            <remarks>
            To get more information on the device, use hDevice in a call to GetRawInputDeviceInfo.
            </remarks>
        </member>
        <member name="F:System.Platforms.Windows.RawInputHeader.Type">
            <summary>
            Type of raw input.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputHeader.Size">
            <summary>
            Size, in bytes, of the entire input packet of data. This includes the RawInput public struct plus possible extra input reports in the RAWHID variable length array.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputHeader.Device">
            <summary>
            Handle to the device generating the raw input data.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputHeader.Param">
            <summary>
            Value passed in the wParam parameter of the WM_INPUT message.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawKeyboard">
            \public
            <summary>
            Contains information about the state of the keyboard.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawKeyboard.MakeCode">
            <summary>
            Scan code from the key depression. The scan code for keyboard overrun is KEYBOARD_OVERRUN_MAKE_CODE.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawKeyboard.Flags">
            <summary>
            Flags for scan code information. It can be one or more of the following.
            RI_KEY_MAKE
            RI_KEY_BREAK
            RI_KEY_E0
            RI_KEY_E1
            RI_KEY_TERMSRV_SET_LED
            RI_KEY_TERMSRV_SHADOW
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawKeyboard.Reserved">
            <summary>
            Reserved; must be zero.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawKeyboard.VKey">
            <summary>
            Microsoft Windows message compatible virtual-key code. For more information, see Virtual-Key Codes.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawKeyboard.Message">
            <summary>
            Corresponding window message, for example WM_KEYDOWN, WM_SYSKEYDOWN, and so forth.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawKeyboard.ExtraInformation">
            <summary>
            Device-specific additional information for the event.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawMouse">
            \public
            <summary>
            Contains information about the state of the mouse.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouse.Flags">
            <summary>
            Mouse state. This member can be any reasonable combination of the following. 
            MOUSE_ATTRIBUTES_CHANGED
            Mouse attributes changed; application needs to query the mouse attributes.
            MOUSE_MOVE_RELATIVE
            Mouse movement data is relative to the last mouse position.
            MOUSE_MOVE_ABSOLUTE
            Mouse movement data is based on absolute position.
            MOUSE_VIRTUAL_DESKTOP
            Mouse coordinates are mapped to the virtual desktop (for a multiple monitor system).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouse.ButtonData">
            <summary>
            If usButtonFlags is RI_MOUSE_WHEEL, this member is a signed value that specifies the wheel delta.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouse.RawButtons">
            <summary>
            Raw state of the mouse buttons.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouse.LastX">
            <summary>
            Motion in the X direction. This is signed relative motion or absolute motion, depending on the value of usFlags.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouse.LastY">
            <summary>
            Motion in the Y direction. This is signed relative motion or absolute motion, depending on the value of usFlags.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouse.ExtraInformation">
            <summary>
            Device-specific additional information for the event.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawHID">
            \public
            <summary>
            The RawHID structure describes the format of the raw input
            from a Human Interface Device (HID).
            </summary>
            <remarks>
            Each WM_INPUT can indicate several inputs, but all of the inputs
            come from the same HID. The size of the bRawData array is
            dwSizeHid * dwCount.
            </remarks>
        </member>
        <member name="F:System.Platforms.Windows.RawHID.SizeHid">
            <summary>
            Size, in bytes, of each HID input in bRawData.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawHID.Count">
            <summary>
            Number of HID inputs in bRawData.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawInputDeviceInfo">
            \public
            <summary>
            Defines the raw input data coming from any device.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceInfo.Size">
            <summary>
            Size, in bytes, of the RawInputDeviceInfo structure.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceInfo.Type">
            <summary>
            Type of raw input data.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawInputHIDDeviceInfo">
            \public
            <summary>
            Defines the raw input data coming from the specified Human Interface Device (HID).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputHIDDeviceInfo.VendorId">
            <summary>
            Vendor ID for the HID.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputHIDDeviceInfo.ProductId">
            <summary>
            Product ID for the HID.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputHIDDeviceInfo.VersionNumber">
            <summary>
            Version number for the HID.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputHIDDeviceInfo.UsagePage">
            <summary>
            Top-level collection Usage Page for the device.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputHIDDeviceInfo.Usage">
            <summary>
            Top-level collection Usage for the device.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawInputKeyboardDeviceInfo">
            \public
            <summary>
            Defines the raw input data coming from the specified keyboard.
            </summary>
            <remarks>
            For the keyboard, the Usage Page is 1 and the Usage is 6.
            </remarks>
        </member>
        <member name="F:System.Platforms.Windows.RawInputKeyboardDeviceInfo.Type">
            <summary>
            Type of the keyboard.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputKeyboardDeviceInfo.SubType">
            <summary>
            Subtype of the keyboard.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputKeyboardDeviceInfo.KeyboardMode">
            <summary>
            Scan code mode.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputKeyboardDeviceInfo.NumberOfFunctionKeys">
            <summary>
            Number of function keys on the keyboard.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputKeyboardDeviceInfo.NumberOfIndicators">
            <summary>
            Number of LED indicators on the keyboard.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputKeyboardDeviceInfo.NumberOfKeysTotal">
            <summary>
            Total number of keys on the keyboard.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawInputMouseDeviceInfo">
            \public
            <summary>
            Defines the raw input data coming from the specified mouse.
            </summary>
            <remarks>
            For the keyboard, the Usage Page is 1 and the Usage is 2.
            </remarks>
        </member>
        <member name="F:System.Platforms.Windows.RawInputMouseDeviceInfo.Id">
            <summary>
            ID for the mouse device.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputMouseDeviceInfo.NumberOfButtons">
            <summary>
            Number of buttons for the mouse.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputMouseDeviceInfo.SampleRate">
            <summary>
            Number of data points per second. This information may not be applicable for every mouse device.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputMouseDeviceInfo.HasHorizontalWheel">
            <summary>
            TRUE if the mouse has a wheel for horizontal scrolling; otherwise, FALSE.
            </summary>
            <remarks>
            This member is only supported under Microsoft Windows Vista and later versions.
            </remarks>
        </member>
        <member name="T:System.Platforms.Windows.Win32Rectangle">
            \public
            <summary>
            Defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
            <remarks>
            By convention, the right and bottom edges of the rectangle are normally considered exclusive. In other words, the pixel whose coordinates are (right, bottom) lies immediately outside of the the rectangle. For example, when RECT is passed to the FillRect function, the rectangle is filled up to, but not including, the right column and bottom row of pixels. This structure is identical to the RECTL structure.
            </remarks>
        </member>
        <member name="F:System.Platforms.Windows.Win32Rectangle.Left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.Win32Rectangle.Top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.Win32Rectangle.Right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.Win32Rectangle.Bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.WindowInfo">
            \public
            <summary>
            Contains window information.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.Size">
            <summary>
            The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.Window">
            <summary>
            Pointer to a RECT structure that specifies the coordinates of the window. 
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.Client">
            <summary>
            Pointer to a RECT structure that specifies the coordinates of the client area. 
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.Style">
            <summary>
            The window styles. For a table of window styles, see CreateWindowEx. 
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.ExStyle">
            <summary>
            The extended window styles. For a table of extended window styles, see CreateWindowEx.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.WindowStatus">
            <summary>
            The window status. If this member is WS_ACTIVECAPTION, the window is active. Otherwise, this member is zero.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.WindowBordersX">
            <summary>
            The width of the window border, in pixels. 
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.WindowBordersY">
            <summary>
            The height of the window border, in pixels.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.WindowType">
            <summary>
            The window public class atom (see RegisterClass). 
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowInfo.CreatorVersion">
            <summary>
            The Microsoft Windows version of the application that created the window. 
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceFlags.REMOVE">
            <summary>
            If set, this removes the top level collection from the inclusion list.
            This tells the operating system to stop reading from a device which matches the top level collection.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceFlags.EXCLUDE">
            <summary>
            If set, this specifies the top level collections to exclude when reading a complete usage page.
            This flag only affects a TLC whose usage page is already specified with RawInputDeviceEnum.PAGEONLY. 
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceFlags.PAGEONLY">
            <summary>
            If set, this specifies all devices whose top level collection is from the specified UsagePage.
            Note that usUsage must be zero. To exclude a particular top level collection, use EXCLUDE.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceFlags.NOLEGACY">
            <summary>
            If set, this prevents any devices specified by UsagePage or Usage from generating legacy messages.
            This is only for the mouse and keyboard. See RawInputDevice Remarks.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceFlags.INPUTSINK">
            <summary>
            If set, this enables the caller to receive the input even when the caller is not in the foreground.
            Note that Target must be specified in RawInputDevice.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceFlags.CAPTUREMOUSE">
            <summary>
            If set, the mouse button click does not activate the other window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceFlags.NOHOTKEYS">
            <summary>
            If set, the application-defined keyboard device hotkeys are not handled.
            However, the system hotkeys; for example, ALT+TAB and CTRL+ALT+DEL, are still handled.
            By default, all keyboard hotkeys are handled.
            NOHOTKEYS can be specified even if NOLEGACY is not specified and Target is NULL in RawInputDevice.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceFlags.APPKEYS">
            <summary>
            Microsoft Windows XP Service Pack 1 (SP1): If set, the application command keys are handled. APPKEYS can be specified only if NOLEGACY is specified for a keyboard device.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawInputDeviceFlags.EXINPUTSINK">
            <summary>
            If set, this enables the caller to receive input in the background only if the foreground application
            does not process it. In other words, if the foreground application is not registered for raw input,
            then the background application that is registered will receive the input.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.RawMouseFlags">
            <summary>
            Mouse indicator type (found in winuser.h).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouseFlags.MOUSE_MOVE_RELATIVE">
            <summary>
            LastX/Y indicate relative motion.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouseFlags.MOUSE_MOVE_ABSOLUTE">
            <summary>
            LastX/Y indicate absolute motion.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouseFlags.MOUSE_VIRTUAL_DESKTOP">
            <summary>
            The coordinates are mapped to the virtual desktop.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.RawMouseFlags.MOUSE_ATTRIBUTES_CHANGED">
            <summary>
            Requery for mouse attributes.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.QueueStatusFlags">
            \public
            <summary>
            Queue status type for GetQueueStatus() and MsgWaitForMultipleObjects()
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.KEY">
            <summary>
            A WM_KEYUP, WM_KEYDOWN, WM_SYSKEYUP, or WM_SYSKEYDOWN message is in the queue.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.MOUSEMOVE">
            <summary>
            A WM_MOUSEMOVE message is in the queue.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.MOUSEBUTTON">
            <summary>
            A mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.POSTMESSAGE">
            <summary>
            A posted message (other than those listed here) is in the queue.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.TIMER">
            <summary>
            A WM_TIMER message is in the queue.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.PAINT">
            <summary>
            A WM_PAINT message is in the queue.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.SENDMESSAGE">
            <summary>
            A message sent by another thread or application is in the queue.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.HOTKEY">
            <summary>
            A WM_HOTKEY message is in the queue.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.ALLPOSTMESSAGE">
            <summary>
            A posted message (other than those listed here) is in the queue.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.RAWINPUT">
            <summary>
            A raw input message is in the queue. For more information, see Raw Input.
            Windows XP and higher only.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.MOUSE">
            <summary>
            A WM_MOUSEMOVE message or mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.INPUT">
            <summary>
            An input message is in the queue. This is composed of KEY, MOUSE and RAWINPUT.
            Windows XP and higher only.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.INPUT_LEGACY">
            <summary>
            An input message is in the queue. This is composed of QS_KEY and QS_MOUSE.
            Windows 2000 and earlier.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.ALLEVENTS">
            <summary>
            An input, WM_TIMER, WM_PAINT, WM_HOTKEY, or posted message is in the queue.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.QueueStatusFlags.ALLINPUT">
            <summary>
            Any message is in the queue.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.WindowMessage">
            <summary>
            Represents a list of all common window messages.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowMessage.NCXBUTTONDOWN">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowMessage.NCXBUTTONUP">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowMessage.NCXBUTTONDBLCLK">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowMessage.XBUTTONDOWN">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowMessage.XBUTTONUP">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.WindowMessage.XBUTTONDBLCLK">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.KeyModifiers">
            <summary>
            Represents the key modifiers that can be used to trigger hotkeys.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.KeyModifiers.None">
            <summary>
            No modifier
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.KeyModifiers.Alt">
            <summary>
            Alt key
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.KeyModifiers.Control">
            <summary>
            Control key
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.KeyModifiers.Shift">
            <summary>
            Shift key
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.KeyModifiers.Windows">
            <summary>
            Windows Start key
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.KeyModifiers.NoRepeat">
            <summary>
            Disables press and hold to repeat for the hotkey.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.MouseMessages.XBUTTONDOWN">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.MouseMessages.XBUTTONUP">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.MouseMessages.XBUTTONDBLCLK">
            <summary>
            Windows 2000 and higher only.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.ShowWindowCommand">
            <summary>
            ShowWindow() Commands
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.SHOWNORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position. This value is similar to SW_SHOWNORMAL, except that the window is not activated.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.SHOWNA">
            <summary>
            Displays the window in its current size and position. This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.ShowWindowCommand.FORCEMINIMIZE">
            <summary>
            Windows 2000/XP: Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.ShowWindowMessageIdentifiers">
            <summary>
            Identifiers for the WM_SHOWWINDOW message
            </summary>
        </member>
        <member name="T:System.Platforms.Windows.GdiCharset">
            <summary>
            Enumerates the available character sets.
            </summary>
        </member>
        <member name="F:System.Platforms.Windows.MapVirtualKeyType.VirtualKeyToScanCode">
            <summary>uCode is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not distinguish between left- and right-hand keys, the left-hand scan code is returned. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:System.Platforms.Windows.MapVirtualKeyType.ScanCodeToVirtualKey">
            <summary>uCode is a scan code and is translated into a virtual-key code that does not distinguish between left- and right-hand keys. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:System.Platforms.Windows.MapVirtualKeyType.VirtualKeyToCharacter">
            <summary>uCode is a virtual-key code and is translated into an unshifted character value in the low-order word of the return value. Dead keys (diacritics) are indicated by setting the top bit of the return value. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:System.Platforms.Windows.MapVirtualKeyType.ScanCodeToVirtualKeyExtended">
            <summary>Windows NT/2000/XP: uCode is a scan code and is translated into a virtual-key code that distinguishes between left- and right-hand keys. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.Icon">
            <summary>get icon</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.DisplayName">
            <summary>get display name</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.TypeName">
            <summary>get type name</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.Attributes">
            <summary>get attributes</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.IconLocation">
            <summary>get icon location</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.ExeType">
            <summary>return exe type</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.SysIconIndex">
            <summary>get system icon index</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.LinkOverlay">
            <summary>put a link overlay on icon</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.Selected">
            <summary>show icon in selected state</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.Attr_Specified">
            <summary>get only specified attributes</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.LargeIcon">
            <summary>get large icon</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.SmallIcon">
            <summary>get small icon</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.OpenIcon">
            <summary>get open icon</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.ShellIconSize">
            <summary>get shell size icon</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.PIDL">
            <summary>pszPath is a pidl</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.UseFileAttributes">
            <summary>use passed dwFileAttribute</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.AddOverlays">
            <summary>apply the appropriate overlays</summary>
        </member>
        <member name="F:System.Platforms.Windows.ShGetFileIconFlags.OverlayIndex">
            <summary>Get the index of the overlay in the upper 8 bits of the iIcon</summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.background_pixmap">
            <summary>
            background, None, or ParentRelative
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.background_pixel">
            <summary>
            background pixel
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.border_pixmap">
            <summary>
            border of the window or CopyFromParent
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.border_pixel">
            <summary>
            border pixel value
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.bit_gravity">
            <summary>
            one of bit gravity values
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.win_gravity">
            <summary>
            one of the window gravity values
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.backing_store">
            <summary>
            NotUseful, WhenMapped, Always
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.backing_planes">
            <summary>
            planes to be preserved if possible
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.backing_pixel">
            <summary>
            value to use in restoring planes
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.save_under">
            <summary>
            should bits under be saved? (popups)
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.event_mask">
            <summary>
            set of events that should be saved
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.do_not_propagate_mask">
            <summary>
            set of events that should not propagate
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.override_redirect">
            <summary>
            boolean value for override_redirect
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.colormap">
            <summary>
            color map to be associated with window
            </summary>
        </member>
        <member name="F:System.Platforms.X11.SetWindowAttributes.cursor">
            <summary>
            cursor to be displayed (or None)
            </summary>
        </member>
        <member name="T:System.Platforms.X11.XKey">
            <summary>
            Defines LATIN-1 and miscellaneous keys.
            </summary>
        </member>
        <member name="M:System.Platforms.X11.NativeApi.Free(System.IntPtr)">
            <summary>
            Frees the memory used by an X structure. Only use on unmanaged structures!
            </summary>
            <param name="buffer">A pointer to the structure that will be freed.</param>
        </member>
        <member name="M:System.Platforms.X11.NativeApi.SelectInput(System.IntPtr,System.IntPtr,System.Platforms.X11.EventMask)">
            <summary>
            The XSelectInput() function requests that the X server report the events associated
            with the specified event mask.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="w">Specifies the window whose events you are interested in.</param>
            <param name="event_mask">Specifies the event mask.</param>
            <remarks>
            Initially, X will not report any of these events.
            Events are reported relative to a window.
            If a window is not interested in a device event,
            it usually propagates to the closest ancestor that is interested,
            unless the do_not_propagate mask prohibits it.
            Setting the event-mask attribute of a window overrides any previous call for the same window but not for other clients. Multiple clients can select for the same events on the same window with the following restrictions: 
            <para>Multiple clients can select events on the same window because their event masks are disjoint. When the X server generates an event, it reports it to all interested clients. </para>
            <para>Only one client at a time can select CirculateRequest, ConfigureRequest, or MapRequest events, which are associated with the event mask SubstructureRedirectMask. </para>
            <para>Only one client at a time can select a ResizeRequest event, which is associated with the event mask ResizeRedirectMask. </para>
            <para>Only one client at a time can select a ButtonPress event, which is associated with the event mask ButtonPressMask. </para>
            <para>The server reports the event to all interested clients. </para>
            <para>XSelectInput() can generate a BadWindow error.</para>
            </remarks>
        </member>
        <member name="M:System.Platforms.X11.NativeApi.CheckIfEvent(System.IntPtr,System.Platforms.X11.XEvent@,System.Platforms.X11.NativeApi.CheckEventPredicate,System.IntPtr)">
            <summary>
            When the predicate procedure finds a match, XCheckIfEvent() copies the matched event into the client-supplied XEvent structure and returns True. (This event is removed from the queue.) If the predicate procedure finds no match, XCheckIfEvent() returns False, and the output buffer will have been flushed. All earlier events stored in the queue are not discarded.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="event_return">Returns a copy of the matched event's associated structure.</param>
            <param name="predicate">Specifies the procedure that is to be called to determine if the next event in the queue matches what you want</param>
            <param name="arg">Specifies the user-supplied argument that will be passed to the predicate procedure.</param>
            <returns>true if the predicate returns true for some event, false otherwise</returns>
        </member>
        <member name="M:System.Platforms.X11.NativeApi.GetKeyboardMapping(System.IntPtr,System.Byte,System.Int32,System.Int32@)">
            <summary>
            The XGetKeyboardMapping() function returns the symbols for the specified number of KeyCodes starting with first_keycode.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="first_keycode">Specifies the first KeyCode that is to be returned.</param>
            <param name="keycode_count">Specifies the number of KeyCodes that are to be returned</param>
            <param name="keysyms_per_keycode_return">Returns the number of KeySyms per KeyCode.</param>
            <returns></returns>
            <remarks>
            <para>The value specified in first_keycode must be greater than or equal to min_keycode as returned by XDisplayKeycodes(), or a BadValue error results. In addition, the following expression must be less than or equal to max_keycode as returned by XDisplayKeycodes(): </para>
            <para>first_keycode + keycode_count - 1 </para>
            <para>If this is not the case, a BadValue error results. The number of elements in the KeySyms list is: </para>
            <para>keycode_count * keysyms_per_keycode_return </para>
            <para>KeySym number N, counting from zero, for KeyCode K has the following index in the list, counting from zero: </para>
            <para> (K - first_code) * keysyms_per_code_return + N </para>
            <para>The X server arbitrarily chooses the keysyms_per_keycode_return value to be large enough to report all requested symbols. A special KeySym value of NoSymbol is used to fill in unused elements for individual KeyCodes. To free the storage returned by XGetKeyboardMapping(), use XFree(). </para>
            <para>XGetKeyboardMapping() can generate a BadValue error.</para>
            <para>Diagnostics:</para>
            <para>BadValue:    Some numeric value falls outside the range of values accepted by the request. Unless a specific range is specified for an argument, the full range defined by the argument's type is accepted. Any argument defined as a set of alternatives can generate this error.</para>
            </remarks>
        </member>
        <member name="M:System.Platforms.X11.NativeApi.DisplayKeycodes(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
            The XDisplayKeycodes() function returns the min-keycodes and max-keycodes supported by the specified display.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="min_keycodes_return">Returns the minimum number of KeyCodes</param>
            <param name="max_keycodes_return">Returns the maximum number of KeyCodes.</param>
            <remarks> The minimum number of KeyCodes returned is never less than 8, and the maximum number of KeyCodes returned is never greater than 255. Not all KeyCodes in this range are required to have corresponding keys.</remarks>
        </member>
        <member name="T:System.Platforms.X11.NativeApi.XF86VidModeModeInfo">
            <summary>
            Specifies an XF86 display mode.
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.dotclock">
            <summary>
            Pixel clock.
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.hdisplay">
            <summary>
            Number of display pixels horizontally
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.hsyncstart">
            <summary>
            Horizontal sync start
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.hsyncend">
            <summary>
            Horizontal sync end
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.htotal">
            <summary>
            Total horizontal pixel
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.hskew">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.vdisplay">
            <summary>
            Number of display pixels vertically
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.vsyncstart">
            <summary>
            Vertical sync start
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.vsyncend">
            <summary>
            Vertical sync end
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.vtotal">
            <summary>
            Total vertical pixels
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.vskew">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Platforms.X11.NativeApi.XF86VidModeModeInfo.flags">
            <summary>
            Mode type
            </summary>
        </member>
        <member name="M:System.Platforms.X11.NativeApi.XCreateWindow(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,System.Platforms.X11.XSetWindowAttributes@)">
            <summary>
            The XCreateWindow function creates an unmapped subwindow for a specified parent window, returns the window ID of the created window, and causes the X server to generate a CreateNotify event. The created window is placed on top in the stacking order with respect to siblings.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="parent">Specifies the parent window.</param>
            <param name="x">Specify the x coordinates, which are the top-left outside corner of the window's borders and are relative to the inside of the parent window's borders.</param>
            <param name="y">Specify the y coordinates, which are the top-left outside corner of the window's borders and are relative to the inside of the parent window's borders.</param>
            <param name="width">Specify the width, which is the created window's inside dimensions and do not include the created window's borders.</param>
            <param name="height">Specify the height, which is the created window's inside dimensions and do not include the created window's borders.</param>
            <param name="border_width">Specifies the width of the created window's border in pixels.</param>
            <param name="depth">Specifies the window's depth. A depth of CopyFromParent means the depth is taken from the parent.</param>
            <param name="class">Specifies the created window's class. You can pass InputOutput, InputOnly, or CopyFromParent. A class of CopyFromParent means the class is taken from the parent.</param>
            <param name="visual">Specifies the visual type. A visual of CopyFromParent means the visual type is taken from the parent.</param>
            <param name="valuemask">Specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits. If valuemask is zero, the attributes are ignored and are not referenced.</param>
            <param name="attributes">Specifies the structure from which the values (as specified by the value mask) are to be taken. The value mask should have the appropriate bits set to indicate which attributes have been set in the structure.</param>
            <returns>The window ID of the created window.</returns>
            <remarks>
            The coordinate system has the X axis horizontal and the Y axis vertical with the origin [0, 0] at the upper-left corner. Coordinates are integral, in terms of pixels, and coincide with pixel centers. Each window and pixmap has its own coordinate system. For a window, the origin is inside the border at the inside, upper-left corner. 
            <para>The border_width for an InputOnly window must be zero, or a BadMatch error results. For class InputOutput, the visual type and depth must be a combination supported for the screen, or a BadMatch error results. The depth need not be the same as the parent, but the parent must not be a window of class InputOnly, or a BadMatch error results. For an InputOnly window, the depth must be zero, and the visual must be one supported by the screen. If either condition is not met, a BadMatch error results. The parent window, however, may have any depth and class. If you specify any invalid window attribute for a window, a BadMatch error results. </para>
            <para>The created window is not yet displayed (mapped) on the user's display. To display the window, call XMapWindow(). The new window initially uses the same cursor as its parent. A new cursor can be defined for the new window by calling XDefineCursor(). The window will not be visible on the screen unless it and all of its ancestors are mapped and it is not obscured by any of its ancestors. </para>
            <para>XCreateWindow can generate BadAlloc BadColor, BadCursor, BadMatch, BadPixmap, BadValue, and BadWindow errors. </para>
            <para>The XCreateSimpleWindow function creates an unmapped InputOutput subwindow for a specified parent window, returns the window ID of the created window, and causes the X server to generate a CreateNotify event. The created window is placed on top in the stacking order with respect to siblings. Any part of the window that extends outside its parent window is clipped. The border_width for an InputOnly window must be zero, or a BadMatch error results. XCreateSimpleWindow inherits its depth, class, and visual from its parent. All other window attributes, except background and border, have their default values. </para>
            <para>XCreateSimpleWindow can generate BadAlloc, BadMatch, BadValue, and BadWindow errors.</para>
            </remarks>
        </member>
        <member name="M:System.Platforms.X11.NativeApi.XQueryKeymap(System.IntPtr,System.Byte[])">
            <summary>
            The XQueryKeymap() function returns a bit vector for the logical state of the keyboard, where each bit set to 1 indicates that the corresponding key is currently pressed down. The vector is represented as 32 bytes. Byte N (from 0) contains the bits for keys 8N to 8N + 7 with the least-significant bit in the byte representing key 8N.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="keys">Returns an array of bytes that identifies which keys are pressed down. Each bit represents one key of the keyboard.</param>
            <remarks>Note that the logical state of a device (as seen by client applications) may lag the physical state if device event processing is frozen.</remarks>
        </member>
        <member name="M:System.Platforms.X11.NativeApi.XMaskEvent(System.IntPtr,System.Platforms.X11.EventMask,System.Platforms.X11.XEvent@)">
            <summary>
            The XMaskEvent() function searches the event queue for the events associated with the specified mask. When it finds a match, XMaskEvent() removes that event and copies it into the specified XEvent structure. The other events stored in the queue are not discarded. If the event you requested is not in the queue, XMaskEvent() flushes the output buffer and blocks until one is received.
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="event_mask">Specifies the event mask.</param>
            <param name="e">Returns the matched event's associated structure.</param>
        </member>
        <member name="M:System.Platforms.X11.NativeApi.XPutBackEvent(System.IntPtr,System.Platforms.X11.XEvent@)">
            <summary>
            The XPutBackEvent() function pushes an event back onto the head of the display's event queue by copying the event into the queue. This can be useful if you read an event and then decide that you would rather deal with it later. There is no limit to the number of times in succession that you can call XPutBackEvent().
            </summary>
            <param name="display">Specifies the connection to the X server.</param>
            <param name="event">Specifies the event.</param>
        </member>
        <member name="T:System.Reflection.FieldOrProperty">
            <summary>
            Delegates to a field or property.
            </summary>
        </member>
        <member name="F:System.Reflection.FieldOrProperty.Empty">
            <summary>
            An empty field or property.
            </summary>
        </member>
        <member name="F:System.Reflection.FieldOrProperty.Field">
            <summary>
            The field represented by this instance. If null, then this instance represents a property.
            </summary>
        </member>
        <member name="F:System.Reflection.FieldOrProperty.Property">
            <summary>
            The property represented by this instance. If null then this instance represents a field.
            </summary>
        </member>
        <member name="F:System.Reflection.FieldOrProperty.ContaningType">
            <summary>
            The class that contains the property or field.
            </summary>
        </member>
        <member name="F:System.Reflection.FieldOrProperty.TargetType">
            <summary>
            The type signature of the property or field.
            </summary>
        </member>
        <member name="F:System.Reflection.FieldOrProperty.Instance">
            <summary>
            The instance on which the field or property resides. If null, then the field/property is static.
            </summary>
        </member>
        <member name="F:System.Reflection.FieldOrProperty.Name">
            <summary>
            The name of the field or property.
            </summary>
        </member>
        <member name="P:System.Reflection.FieldOrProperty.Value">
            <summary>
            Gets the value of the field/property. To set value, use SetValue().
            </summary>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.#ctor(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Initializes a new FieldOrProperty instance.
            </summary>
            <param name="field">The field to represent.</param>
            <param name="instance">The instance on which the specified field resides (null if static).
            For equality comparison, == is used.</param>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Initializes a new FieldOrProperty instance.
            </summary>
            <param name="property">The property to represent.</param>
            <param name="instance">The instance on which the specified property resides (null if static).
            For equality comparison, == is used.</param>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Gets the corresponding field/property instance for the class member query.
            </summary>
            <param name="instance">The instance to get the field of (or type of class if static).</param>
            <param name="name">The name of the field/property to obtain.</param>
            <param name="throwIfNotFound">If true, an error will be thrown if the specified property/field is not found.</param>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.SetValue(System.Object)">
            <summary>
            Sets the field/property to the specified value.
            </summary>
            <param name="newValue">The new value to assign to the field/property.</param>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.op_Equality(System.Reflection.FieldOrProperty,System.Reflection.FieldOrProperty)">
            <summary>
            Compares the FieldOrProperty for equality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.op_Inequality(System.Reflection.FieldOrProperty,System.Reflection.FieldOrProperty)">
            <summary>
            Compares the FieldOrProperty for inequality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.GetHashCode">
            <summary>
            Calculates the hash code for this FieldOrProperty.
            </summary>
            <returns>A System.Int32 containing the hashcode of this FieldOrProperty.</returns>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.ToString">
            <summary>
            Creates a System.String that describes this FieldOrProperty.
            </summary>
            <returns>A System.String that describes this FieldOrProperty.</returns>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.Equals(System.Object)">
            <summary>
            Compares whether this FieldOrProperty is equal to the specified object.
            </summary>
            <param name="obj">An object to compare to.</param>
        </member>
        <member name="M:System.Reflection.FieldOrProperty.Equals(System.Reflection.FieldOrProperty)">
            <summary>
            Compares whether this FieldOrProperty is equal to the specified object.
            </summary>
            <param name="other">The object to compare to.</param>
        </member>
        <member name="M:System.Reflection.ReflectionUtils.GetTypedListItemType(System.Type)">
            <summary>
            Gets the type of the typed list's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed list's items.</returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Reflection.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.Resolution">
            <summary>Contains information regarding a monitor's display resolution.</summary>
        </member>
        <member name="F:System.Resolution.Empty">
            <summary>
            An empty resolution.
            </summary>
        </member>
        <member name="F:System.Resolution.Bounds">
            <summary>
            Gets the System.Drawing.Rectangle containing the bounds of the display in pixels.
            </summary>
        </member>
        <member name="F:System.Resolution.BitsPerPixel">
            <summary>
            Gets the colour depth of the display.
            </summary>
        </member>
        <member name="F:System.Resolution.RefreshRate">
            <summary>
            Gets the refresh rate of the display in Hertz.
            </summary>
        </member>
        <member name="P:System.Resolution.X">
            <summary>
            Gets or sets the X-coordinate of the origin of the display in pixels.
            </summary>
        </member>
        <member name="P:System.Resolution.Y">
            <summary>
            Gets or sets the Y-coordinate of the origin of the display in pixels.
            </summary>
        </member>
        <member name="P:System.Resolution.Width">
            <summary>
            Gets or sets the width of the display in pixels.
            </summary>
        </member>
        <member name="P:System.Resolution.Height">
            <summary>
            Gets or sets the height of the display in pixels.
            </summary>
        </member>
        <member name="M:System.Resolution.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new resolution structure.
            </summary>
            <param name="x">The relative X-coordinate of the origin of the display.</param>
            <param name="y">The relative Y-coordinate of the origin of the display.</param>
            <param name="width">The width of the display in pixels.</param>
            <param name="height">The height of the display in pixels.</param>
            <param name="bitsPerPixel">The bit-depth of each pixel.</param>
            <param name="refreshRate">The number of frames displayes each second.</param>
        </member>
        <member name="M:System.Resolution.ToString">
            <summary>
            Returns a System.String representing this Display.
            </summary>
            <returns>A System.String representing this Display.</returns>
        </member>
        <member name="M:System.Resolution.Equals(System.Resolution)">
            <summary>Determines whether the specified resolutions are equal.</summary>
            <param name="res">The resolution to check against.</param>
        </member>
        <member name="M:System.Resolution.Equals(System.Object)">
            <summary>Determines whether the specified resolutions are equal.</summary>
            <param name="obj">The System.Object to check against.</param>
            <returns>True if the System.Object is an equal Display; otherwise false.</returns>
        </member>
        <member name="M:System.Resolution.GetHashCode">
            <summary>Returns a unique hash representing this resolution.</summary>
            <returns>A System.Int32 that may serve as a hash code for this resolution.</returns>
        </member>
        <member name="M:System.Resolution.op_Equality(System.Resolution,System.Resolution)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:System.Resolution.op_Inequality(System.Resolution,System.Resolution)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="T:System.ResourceLeakException">
            <summary>
            Signifies that a resource has leaked.
            </summary>
        </member>
        <member name="F:System.ResourceLeakException.Resource">
            <summary>
            An object that represents the resource that leaked.
            </summary>
        </member>
        <member name="M:System.ResourceLeakException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ResourceLeakException class.
            </summary>
            <param name="resource">An object that represents the resource that leaked.</param>
        </member>
        <member name="M:System.ResourceLeakException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the ResourceLeakException class.
            </summary>
            <param name = "resource" > An object that represents the resource that leaked.</param>
            <param name="message">The message that describes what leaked.</param>
        </member>
        <member name="M:System.ResourceLeakException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ResourceLeakException class.
            </summary>
            <param name="resource" > An object that represents the resource that leaked.</param>
            <param name="message">The message that describes what leaked.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:System.ResourceLeakException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination. </param>
        </member>
        <member name="T:System.Security.Cryptography.SymmetricEncryption">
            <summary>
            An enumeration of the supported symmetric encryption algorithms.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.SymmetricEncryption.Advanced">
            <summary>
            AES - Advanced Encryption Standard (supports 16 bytes length)
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.SymmetricEncryption.Data">
            <summary>
            DES - Data Encryption Standard (supports 8 bytes length)
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.SymmetricEncryption.Rijndael">
            <summary>
            Rijndael Encryption Algorithm (supports 16, 24, or 32 bytes length)
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.SymmetricEncryption.Rivest">
            <summary>
            RC2 - Rivest Cipher 2 (supports 8 bytes length)
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.SymmetricEncryption.TripleData">
            <summary>
            TDES - Triple Data Encryption Standard (supports 8 bytes length)
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.StringEncryption">
            <summary>
            Provides simple methods to securely encrypt a string.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.StringEncryption.Encrypt(System.String,System.String,System.Security.Cryptography.SymmetricEncryption,System.Int32,System.Int32)">
            <summary>
            Encrypts the plain text using the specified key.
            </summary>
            <param name="text">The text to encrypt.</param>
            <param name="key">The key to encrypt with.</param>
            <param name="method">The symmetric encryption method to use to encrypt.</param>
            <param name="bytes">The length in bytes to encrypt with.</param>
            <param name="iterations">The number of iterations to repeat the encryption.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:System.Security.Cryptography.StringEncryption.Decrypt(System.String,System.String,System.Security.Cryptography.SymmetricEncryption,System.Int32,System.Int32)">
            <summary>
            Decrypts the encrypted cipher text using the specified key.
            </summary>
            <param name="cipherText">The encrypted text to decrypt.</param>
            <param name="key">The key to decrypt with.</param>
            <param name="method">The symmetric encryption method to use to decrypt.</param>
            <param name="bytes">The length in bytes to decrypt with.</param>
            <param name="iterations">The number of iterations to repeat the decryption.</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="M:System.Security.Cryptography.StringEncryption.GenerateRandomEntropy(System.Int32)">
            <summary>
            Generates a cryptographically random array of bytes.
            </summary>
            <param name="bytes">The number of bytes to return.</param>
            <returns>A cryptographically random array of bytes.</returns>
        </member>
        <member name="M:System.Security.Cryptography.StringEncryption.GetAlgorithm(System.Security.Cryptography.SymmetricEncryption)">
            <summary>
            Gets the encryptor instance that uses the specified encryption algorithm.
            </summary>
            <param name="algorithm">The algorithm whose instance to return.</param>
        </member>
        <member name="T:System.Text.IHjsonDsfProvider">
            <summary>
            A interface to support Domain Specific Formats for Hjson.
            </summary>
        </member>
        <member name="P:System.Text.IHjsonDsfProvider.Name">
            <summary>Gets the name of this DSF.</summary>
        </member>
        <member name="P:System.Text.IHjsonDsfProvider.Description">
            <summary>Gets the description of this DSF.</summary>
        </member>
        <member name="M:System.Text.IHjsonDsfProvider.Parse(System.String)">
            <summary>Tries to parse the text as a DSF value.</summary>
        </member>
        <member name="M:System.Text.IHjsonDsfProvider.Stringify(System.Text.JsonObject)">
            <summary>Stringifies DSF values.</summary>
        </member>
        <member name="T:System.Text.HjsonDsf">
            <summary>
            Provides standard DSF providers.
            </summary>
        </member>
        <member name="M:System.Text.HjsonDsf.Math">
            <summary>Returns a math DSF provider.</summary>
        </member>
        <member name="M:System.Text.HjsonDsf.Hex(System.Boolean)">
            <summary>Returns a hex DSF provider.</summary>
        </member>
        <member name="M:System.Text.HjsonDsf.Date">
            <summary>Returns a date DSF provider.</summary>
        </member>
        <member name="T:System.Text.HjsonOptions">
            <summary>Options for Save.</summary>
        </member>
        <member name="M:System.Text.HjsonOptions.#ctor">
            <summary>Initializes a new instance of this class.</summary>
        </member>
        <member name="P:System.Text.HjsonOptions.KeepWsc">
            <summary>Keep white space and comments.</summary>
        </member>
        <member name="P:System.Text.HjsonOptions.EmitRootBraces">
            <summary>Show braces at the root level (default true).</summary>
        </member>
        <member name="P:System.Text.HjsonOptions.DisposeStream">
            <summary>Whether to dispose the stream after reading the object.</summary>
        </member>
        <member name="P:System.Text.HjsonOptions.DsfProviders">
            <summary>
            Gets or sets DSF providers.
            </summary>
        </member>
        <member name="T:System.Text.HjsonValue">
            <summary>Contains functions to load and save in the Hjson format.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Load(System.String)">
            <summary>Loads Hjson/JSON from a file.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Load(System.String,System.Text.HjsonOptions)">
            <summary>Loads Hjson/JSON from a file, optionally preserving whitespace and comments.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Load(System.IO.Stream)">
            <summary>Loads Hjson/JSON from a stream.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Load(System.IO.Stream,System.Text.HjsonOptions)">
            <summary>Loads Hjson/JSON from a stream, optionally preserving whitespace and comments.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Load(System.IO.TextReader,System.Text.IJsonReader)">
            <summary>Loads Hjson/JSON from a TextReader.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Load(System.IO.TextReader,System.Text.HjsonOptions,System.Text.IJsonReader)">
            <summary>Loads Hjson/JSON from a TextReader, optionally preserving whitespace and comments.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Parse(System.String)">
            <summary>Parses the specified Hjson/JSON string.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Parse(System.String,System.Text.HjsonOptions)">
            <summary>Parses the specified Hjson/JSON string, optionally preserving whitespace and comments.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Save(System.Text.JsonObject,System.String,System.Text.HjsonOptions)">
            <summary>Saves Hjson to a file.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Save(System.Text.JsonObject,System.IO.Stream,System.Text.HjsonOptions)">
            <summary>Saves Hjson to a stream.</summary>
        </member>
        <member name="M:System.Text.HjsonValue.Save(System.Text.JsonObject,System.IO.TextWriter,System.Text.HjsonOptions)">
            <summary>Saves Hjson to a TextWriter.</summary>
        </member>
        <member name="T:System.Text.WscJsonObject">
            <summary>Implements an object value, including whitespace and comments.</summary>
        </member>
        <member name="M:System.Text.WscJsonObject.#ctor">
            <summary>Initializes a new instance of this class.</summary>
        </member>
        <member name="P:System.Text.WscJsonObject.RootBraces">
            <summary>Defines if braces are shown (root object only).</summary>
        </member>
        <member name="P:System.Text.WscJsonObject.Order">
            <summary>Defines the order of the keys.</summary>
        </member>
        <member name="P:System.Text.WscJsonObject.Comments">
            <summary>Defines a comment for each key. The "" entry is emitted before any element.</summary>
        </member>
        <member name="T:System.Text.WscJsonArray">
            <summary>Implements an array value, including whitespace and comments.</summary>
        </member>
        <member name="M:System.Text.WscJsonArray.#ctor">
            <summary>Initializes a new instance of this class.</summary>
        </member>
        <member name="P:System.Text.WscJsonArray.Comments">
            <summary>Defines a comment for each item. The [0] entry is emitted before any element.</summary>
        </member>
        <member name="T:System.Text.IJsonReader">
            <summary>Defines the reader interface.</summary>
        </member>
        <member name="M:System.Text.IJsonReader.Key(System.String)">
            <summary>Triggered when an item for an object is read.</summary>
        </member>
        <member name="M:System.Text.IJsonReader.Index(System.Int32)">
            <summary>Triggered when an item for an array is read.</summary>
        </member>
        <member name="M:System.Text.IJsonReader.Value(System.Text.JsonObject)">
            <summary>Triggered when a value is read.</summary>
        </member>
        <member name="T:System.Text.JScript.JavaScriptSerializer">
            <summary>
            Provides serialization and deserialization functionality for Javascript-enabled applications.
            </summary>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.#ctor">
            <summary>
            Initializes a new instance of the JavaScriptSerializer class that has no type resolver
            .</summary>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.#ctor(System.Text.JScript.JavaScriptTypeResolver)">
            <summary>
            Initializes a new instance of the JavaScriptSerializer that has a custom type resolver.
            </summary>
            <param name="resolver">The custom type-resolver object.</param>
        </member>
        <member name="P:System.Text.JScript.JavaScriptSerializer.RecursionLimit">
            <summary>
            Gets or sets the limit for constraining the number of object levels to process.
            </summary>
            <returns>The number of object levels. The default is 100.</returns>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.ConvertToType``1(System.Object)">
            <summary>Converts the given object to the specified type.</summary>
            <returns>The object that has been converted to the target type.</returns>
            <param name="obj">The object to convert.</param>
            <typeparam name="T">The type to which <paramref name="obj" /> will be converted.</typeparam>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.ConvertToType(System.Object,System.Type)">
            <summary>Converts the specified object to the specified type.</summary>
            <returns>The serialized JSON string.</returns>
            <param name="obj">The object to convert.</param>
            <param name="targetType">The type to convert the object to.</param>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.Deserialize``1(System.String)">
            <summary>Converts the specified JSON string to an object of type T.</summary>
            <returns>The deserialized object.</returns>
            <param name="input">The JSON string to be deserialized.</param>
            <typeparam name="T">The type of the resulting object.</typeparam>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.Deserialize(System.String,System.Type)">
            <summary>Converts a JSON-formatted string to an object of the specified type.</summary>
            <returns>The deserialized object.</returns>
            <param name="input">The JSON string to deserialize.</param>
            <param name="targetType">The type of the resulting object.</param>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.DeserializeObject(System.String)">
            <summary>Converts the specified JSON string to an object graph.</summary>
            <returns>The deserialized object.</returns>
            <param name="input">The JSON string to be deserialized.</param>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{System.Text.JScript.JavaScriptConverter})">
            <summary>Registers a custom converter with the JavaScriptSerializer instance. </summary>
            <param name="converters">An array that contains the custom converters to be registered.</param>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.Serialize(System.Object)">
            <summary>Converts an object to a JSON string.</summary>
            <returns>The serialized JSON string.</returns>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:System.Text.JScript.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>Serializes an object and writes the resulting JSON string to the specified StringBuilder object.</summary>
            <param name="obj">The object to serialize.</param>
            <param name="output">The StringBuilder object that is used to write the JSON string.</param>
        </member>
        <member name="T:System.Text.JScript.JavaScriptTypeResolver">
            <summary>
            Provides the abstract base class for implementing a custom type resolver.
            </summary>
        </member>
        <member name="M:System.Text.JScript.JavaScriptTypeResolver.#ctor">
            <summary>
            Initializes a new instance of the JavaScriptTypeResolver class.
            </summary>
        </member>
        <member name="M:System.Text.JScript.JavaScriptTypeResolver.ResolveType(System.String)">
            <summary>When overridden in a derived class, returns the <see cref="T:System.Type" /> object that is associated with the specified type name.</summary>
            <returns>The <see cref="T:System.Type" /> object that is associated with the specified type name.</returns>
            <param name="id">The name of the managed type.</param>
        </member>
        <member name="M:System.Text.JScript.JavaScriptTypeResolver.ResolveTypeId(System.Type)">
            <summary>When overridden in a derived class, returns the type name for the specified <see cref="T:System.Type" /> object.</summary>
            <returns>The name of the specified managed type.</returns>
            <param name="type">The managed type to be resolved.</param>
        </member>
        <member name="T:System.Text.JScript.JavaScriptConverter">
            <summary>
            Provides an abstract base class for a custom type converter. Simply inheriting this class is enough for an instance of the converter
            to be registered for JSON serialization.
            </summary>
        </member>
        <member name="P:System.Text.JScript.JavaScriptConverter.SupportedTypes">
            <summary>
            When overridden in a derived class, gets a collection of the supported types.
            </summary>
        </member>
        <member name="M:System.Text.JScript.JavaScriptConverter.#ctor">
            <summary>
            Initializes a new instance of the JavaScriptConverter class.
            </summary>
        </member>
        <member name="M:System.Text.JScript.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Text.JScript.JavaScriptSerializer)">
            <summary>When overridden in a derived class, converts the provided dictionary into an object of the specified type.</summary>
            <returns>The deserialized object.</returns>
            <param name="dictionary">An IDictionary instance of property data stored as name/value pairs.</param>
            <param name="type">The type of the resulting object.</param>
            <param name="serializer">The JavaScriptSerializer instance.</param>
        </member>
        <member name="M:System.Text.JScript.JavaScriptConverter.Serialize(System.Object,System.Text.JScript.JavaScriptSerializer)">
            <summary>When overridden in a derived class, builds a dictionary of name/value pairs.</summary>
            <returns>An object that contains key/value pairs that represent the object’s data.</returns>
            <param name="obj">The object to serialize.</param>
            <param name="serializer">The object that is responsible for the serialization.</param>
        </member>
        <member name="T:System.Text.JsonArray">
            <summary>Implements an array value.</summary>
        </member>
        <member name="M:System.Text.JsonArray.#ctor(System.Text.JsonObject[])">
            <summary>Initializes a new instance of this class.</summary>
        </member>
        <member name="M:System.Text.JsonArray.#ctor(System.Collections.Generic.IEnumerable{System.Text.JsonObject})">
            <summary>Initializes a new instance of this class.</summary>
        </member>
        <member name="P:System.Text.JsonArray.Count">
            <summary>Gets the count of the contained items.</summary>
        </member>
        <member name="P:System.Text.JsonArray.Item(System.Int32)">
            <summary>Gets or sets the value for the specified index.</summary>
        </member>
        <member name="P:System.Text.JsonArray.JsonType">
            <summary>The type of this value.</summary>
        </member>
        <member name="M:System.Text.JsonArray.Add(System.Text.JsonObject)">
            <summary>Adds a new item.</summary>
        </member>
        <member name="M:System.Text.JsonArray.AddRange(System.Collections.Generic.IEnumerable{System.Text.JsonObject})">
            <summary>Adds a range of items.</summary>
        </member>
        <member name="M:System.Text.JsonArray.Clear">
            <summary>Clears the array.</summary>
        </member>
        <member name="M:System.Text.JsonArray.Contains(System.Text.JsonObject)">
            <summary>Determines whether the array contains a specific value.</summary>
        </member>
        <member name="M:System.Text.JsonArray.CopyTo(System.Text.JsonObject[],System.Int32)">
            <summary>Copies the elements to an System.Array, starting at a particular System.Array index.</summary>
        </member>
        <member name="M:System.Text.JsonArray.IndexOf(System.Text.JsonObject)">
            <summary>Determines the index of a specific item.</summary>
        </member>
        <member name="M:System.Text.JsonArray.Insert(System.Int32,System.Text.JsonObject)">
            <summary>Inserts an item.</summary>
        </member>
        <member name="M:System.Text.JsonArray.Remove(System.Text.JsonObject)">
            <summary>Removes the specified item.</summary>
        </member>
        <member name="M:System.Text.JsonArray.RemoveAt(System.Int32)">
            <summary>Removes the item with the specified index.</summary>
        </member>
        <member name="T:System.Text.Stringify">
            <summary>The ToString format.</summary>
        </member>
        <member name="F:System.Text.Stringify.Plain">
            <summary>JSON (no whitespace).</summary>
        </member>
        <member name="F:System.Text.Stringify.Formatted">
            <summary>Formatted JSON.</summary>
        </member>
        <member name="F:System.Text.Stringify.Hjson">
            <summary>Hjson.</summary>
        </member>
        <member name="T:System.Text.JsonObject">
            <summary>Implements an object value.</summary>
        </member>
        <member name="F:System.Text.JsonObject.KeyComparer">
            <summary>
            The default key comparer used by the key dictionary.
            </summary>
        </member>
        <member name="P:System.Text.JsonObject.Eol">
            <summary>Gets or sets the newline charater(s).</summary>
            <remarks>Defaults to Environment.NewLine.</remarks>
        </member>
        <member name="M:System.Text.JsonObject.#ctor">
            <summary>
            Use this if you don't want to make use of the underlying dictionary and manage the items yourself.
            </summary>
        </member>
        <member name="M:System.Text.JsonObject.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Text.JsonObject}[])">
            <summary>Initializes a new instance of this class.</summary>
            <remarks>You can also initialize an object using the C# add syntax: new JsonObject { { "key", "value" }, ... }</remarks>
        </member>
        <member name="M:System.Text.JsonObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Text.JsonObject}})">
            <summary>Initializes a new instance of this class.</summary>
            <remarks>You can also initialize an object using the C# add syntax: new JsonObject { { "key", "value" }, ... }</remarks>
        </member>
        <member name="P:System.Text.JsonObject.Count">
            <summary>Gets the count of the contained items.</summary>
        </member>
        <member name="P:System.Text.JsonObject.Item(System.String)">
            <summary>Gets or sets the value for the specified key.</summary>
        </member>
        <member name="P:System.Text.JsonObject.Item(System.Int32)">
            <summary>Gets or sets the value for the specified key.</summary>
        </member>
        <member name="P:System.Text.JsonObject.JsonType">
            <summary>The type of this value.</summary>
        </member>
        <member name="P:System.Text.JsonObject.Keys">
            <summary>Gets the keys of this object.</summary>
        </member>
        <member name="P:System.Text.JsonObject.Values">
            <summary>Gets the values of this object.</summary>
        </member>
        <member name="M:System.Text.JsonObject.Add(System.String,System.Text.JsonObject)">
            <summary>Adds a new item.</summary>
            <remarks>You can also initialize an object using the C# add syntax: new JsonObject { { "key", "value" }, ... }</remarks>
        </member>
        <member name="M:System.Text.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Text.JsonObject})">
            <summary>Adds a new item.</summary>
        </member>
        <member name="M:System.Text.JsonObject.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Text.JsonObject}})">
            <summary>Adds a range of items.</summary>
        </member>
        <member name="M:System.Text.JsonObject.Clear">
            <summary>Clears the object.</summary>
        </member>
        <member name="M:System.Text.JsonObject.ContainsKey(System.String)">
            <summary>Determines whether the array contains a specific key.</summary>
        </member>
        <member name="M:System.Text.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Text.JsonObject}[],System.Int32)">
            <summary>Copies the elements to an System.Array, starting at a particular System.Array index.</summary>
        </member>
        <member name="M:System.Text.JsonObject.Remove(System.String)">
            <summary>Removes the item with the specified key.</summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.JsonObject.TryGetValue(System.String,System.Text.JsonObject@)">
            <summary>Gets the value associated with the specified key.</summary>
        </member>
        <member name="M:System.Text.JsonObject.Save(System.String,System.Text.Stringify)">
            <summary>Saves the JSON to a file.</summary>
        </member>
        <member name="M:System.Text.JsonObject.Save(System.IO.Stream,System.Text.Stringify)">
            <summary>Saves the JSON to a stream.</summary>
        </member>
        <member name="M:System.Text.JsonObject.Save(System.IO.TextWriter,System.Text.Stringify)">
            <summary>Saves the JSON to a TextWriter.</summary>
        </member>
        <member name="M:System.Text.JsonObject.ToString(System.Text.HjsonOptions)">
            <summary>Saves as Hjson to a string.</summary>
        </member>
        <member name="M:System.Text.JsonObject.ToString(System.Text.Stringify)">
            <summary>Saves the JSON to a string.</summary>
        </member>
        <member name="M:System.Text.JsonObject.ToString">
            <summary>Saves the JSON to a string.</summary>
        </member>
        <member name="M:System.Text.JsonObject.ToValue">
            <summary>Returns the contained primitive value.</summary>
        </member>
        <member name="M:System.Text.JsonObject.FromObject(System.Object)">
            <summary>Wraps an unknown object into a JSON value (to be used with DSF).</summary>
        </member>
        <member name="M:System.Text.JsonObject.Load(System.String)">
            <summary>Loads JSON from a file.</summary>
        </member>
        <member name="M:System.Text.JsonObject.Load(System.IO.Stream,System.Boolean)">
            <summary>Loads JSON from a stream.</summary>
        </member>
        <member name="M:System.Text.JsonObject.Load(System.IO.TextReader,System.Boolean,System.Text.IJsonReader)">
            <summary>Loads JSON from a TextReader.</summary>
        </member>
        <member name="M:System.Text.JsonObject.Parse(System.String,System.Boolean)">
            <summary>Parses the specified JSON string.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.Boolean)~System.Text.JsonObject">
            <summary>Converts from bool.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.Byte)~System.Text.JsonObject">
            <summary>Converts from byte.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.Char)~System.Text.JsonObject">
            <summary>Converts from char.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.Decimal)~System.Text.JsonObject">
            <summary>Converts from decimal.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.Double)~System.Text.JsonObject">
            <summary>Converts from double.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.Single)~System.Text.JsonObject">
            <summary>Converts from float.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.Int32)~System.Text.JsonObject">
            <summary>Converts from int.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.Int64)~System.Text.JsonObject">
            <summary>Converts from long.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.Int16)~System.Text.JsonObject">
            <summary>Converts from short.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Implicit(System.String)~System.Text.JsonObject">
            <summary>Converts from string.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.Boolean">
            <summary>Converts to bool. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.Byte">
            <summary>Converts to byte. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.Char">
            <summary>Converts to char. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.Decimal">
            <summary>Converts to decimal. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.Double">
            <summary>Converts to double. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.Single">
            <summary>Converts to float. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.Int32">
            <summary>Converts to int. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.Int64">
            <summary>Converts to long. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.Int16">
            <summary>Converts to short. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="M:System.Text.JsonObject.op_Explicit(System.Text.JsonObject)~System.String">
            <summary>Converts to string. Also see <see cref="T:System.Text.JsonUtil"/>.</summary>
        </member>
        <member name="T:System.Text.JsonPrimitive">
            <summary>Implements a primitive value.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.String)">
            <summary>Initializes a new string.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.Char)">
            <summary>Initializes a new char.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.Boolean)">
            <summary>Initializes a new bool.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.Decimal)">
            <summary>Initializes a new decimal.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.Double)">
            <summary>Initializes a new double.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.Single)">
            <summary>Initializes a new float.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.Int64)">
            <summary>Initializes a new long.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.Int32)">
            <summary>Initializes a new int.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.Byte)">
            <summary>Initializes a new byte.</summary>
        </member>
        <member name="M:System.Text.JsonPrimitive.#ctor(System.Int16)">
            <summary>Initializes a new short.</summary>
        </member>
        <member name="P:System.Text.JsonPrimitive.JsonType">
            <summary>The type of this value.</summary>
        </member>
        <member name="T:System.Text.JsonType">
            <summary>Defines the known json types.</summary>
            <remarks>There is no null type as the primitive will be null instead of the JsonPrimitive containing null.</remarks>
        </member>
        <member name="F:System.Text.JsonType.String">
            <summary>Json value of type string.</summary>
        </member>
        <member name="F:System.Text.JsonType.Number">
            <summary>Json value of type number.</summary>
        </member>
        <member name="F:System.Text.JsonType.Object">
            <summary>Json value of type object.</summary>
        </member>
        <member name="F:System.Text.JsonType.Array">
            <summary>Json value of type array.</summary>
        </member>
        <member name="F:System.Text.JsonType.Boolean">
            <summary>Json value of type boolean.</summary>
        </member>
        <member name="F:System.Text.JsonType.Unknown">
            <summary>Json value of an unknown type.</summary>
        </member>
        <member name="T:System.Text.JsonUtil">
            <summary>Provides Json extension methods.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qb(System.Text.JsonObject)">
            <summary>For JsonValues with type boolean, this method will return its
            value as bool, otherwise it will throw.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qb(System.Text.JsonObject,System.String,System.Boolean)">
            <summary>Gets the value of the member specified by key, then calls JsonObject.
            If the object does not contain the key, the defaultValue is returned.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qi(System.Text.JsonObject)">
            <summary>For JsonValues with type number, this method will return its
            value as int, otherwise it will throw.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qi(System.Text.JsonObject,System.String,System.Int32)">
            <summary>Gets the value of the member specified by key, then calls JsonObject.
            If the object does not contain the key, the defaultValue is returned.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Ql(System.Text.JsonObject)">
            <summary>For JsonValues with type number, this method will return its
            value as long, otherwise it will throw.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Ql(System.Text.JsonObject,System.String,System.Int64)">
            <summary>Gets the value of the member specified by key, then calls JsonObject.
            If the object does not contain the key, the defaultValue is returned.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qd(System.Text.JsonObject)">
            <summary>For JsonValues with type number, this method will return its
            value as double, otherwise it will throw.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qd(System.Text.JsonObject,System.String,System.Double)">
            <summary>Gets the value of the member specified by key, then calls JsonObject.
            If the object does not contain the key, the defaultValue is returned.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qs(System.Text.JsonObject)">
            <summary>For JsonValues with type string, this method will return its
            value as string, otherwise it will throw. Use JsonObject.
            to get a string value from number or boolean types as well.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qs(System.Text.JsonObject,System.String,System.String)">
            <summary>Gets the value of the member specified by key, then calls JsonObject.
            If the object does not contain the key, the defaultValue is returned.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qstr(System.Text.JsonObject)">
            <summary>For JsonValues with type string, number or boolean, this method will return
            its value as a string (converted if necessary). For arrays or objects it will throw.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qstr(System.Text.JsonObject,System.String,System.String)">
            <summary>Gets the value of the member specified by key, then,
            for string, number or boolean JsonValues, this method will return
            its value as a string (converted if necessary).</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qv(System.Text.JsonObject,System.String)">
            <summary>Gets the JsonObject of the member specified by key.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qo(System.Text.JsonObject,System.String)">
            <summary>Gets a JsonObject from a JsonObject.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qo(System.Text.JsonObject)">
            <summary>Gets the JsonObject from a JsonObject.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qa(System.Text.JsonObject,System.String)">
            <summary>Gets a JsonArray from a JsonObject.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qa(System.Text.JsonObject)">
            <summary>Gets the JsonArray from a JsonObject.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.Qqo(System.Text.JsonObject)">
            <summary>Enumerates JsonObjects from a JsonObject.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.ToJsonDate(System.DateTime)">
            <summary>Convert the date to json (unix epoch date offset).</summary>
        </member>
        <member name="M:System.Text.JsonUtil.ToDateTime(System.Int64)">
            <summary>Convert the json date (unix epoch date offset) to a DateTime.</summary>
        </member>
        <member name="M:System.Text.JsonUtil.ToJson(System.DateTime)">
            <summary>Convert the date to JSON/ISO 8601, compatible with ES5 Date.toJSON().</summary>
            <remarks>Use DateTime.Parse() to convert back (will be of local kind).</remarks>
        </member>
        <member name="M:System.Text.JsonUtil.ToPrecise(System.DateTime)">
            <summary>Convert the date to a precise string representations (ten millionths of a second).</summary>
            <remarks>Use DateTime.Parse() to convert back (will be of local kind).</remarks>
        </member>
        <member name="M:System.Text.JsonUtil.ToJson(System.TimeSpan)">
            <summary>Convert the timespan to JSON/ISO 8601.</summary>
        </member>
        <member name="T:System.Text.TextUtils">
            <summary>
            A collection of text processing tools.
            </summary>
        </member>
        <member name="M:System.Text.TextUtils.DetectTextEncoding(System.Byte[],System.String@)">
            <summary>
            Function to detect the encoding for UTF-7, UTF-8/16/32 (bom, no bom, little and big endian),
            and local default codepage, and potentially other codepages.
            </summary>
            <param name="bytes">The byte array to parse text encoding from.</param>
            <param name="text">The text output as a string.</param>
        </member>
        <member name="M:System.Text.TextUtils.StripHTML(System.String)">
            <summary>
            Keeps only the textual content from the specified HTML string.
            </summary>
            <param name="source">The HTML string to strip down.</param>
        </member>
        <member name="T:System.Threading.Dispatch.DispatcherSlim">
            <summary>
            A more optimized version of System.Threading.Dispatch.Dispatcher.
            </summary>
        </member>
        <member name="T:System.Threading.Dispatch.DispatcherSlim.DelegateInvoker">
            <summary>
            Invokes a delegate using the specified parameters. The return value of the call should be returned.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The parameter to use.</param>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.Tag">
            <summary>
            Just for debugging purposes.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.Name">
            <summary>
            Just for debugging purposes.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.IsBackground">
            <summary>
            Whether the thread is a background thread.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.InvokeHandler">
            <summary>
            Calls the delegate method, useful for intercepting invocations (default: null).
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.QueueCap">
            <summary>
            Gets or sets the maximum length of the queue. If max length is exceeded, new invocations are ignored until the queue has cleared below max.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.Exceptions">
            <summary>
            Gets or sets whether to catch exceptions.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherSlim.LogOnDeadlockResolve">
            <summary>
            Whether to log to console when a deadlock is detected and resolved.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.IsExecuting">
            <summary>
            Whether dispatcher is currently busy invoking methods.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.Running">
            <summary>
            Gets or sets whether the dispatcher is performing invocations.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.InvokeRequired">
            <summary>
            True if the current thread is not the dispatcher thread.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.QueueCount">
            <summary>
            Gets the number of queued invocations. Each invocation is dequeued before executing it.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.IsDisposed">
            <summary>
            Gets whether the dispatcher is disposed.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.DispatchThread">
            <summary>
            Gets the thread on which the dispatcher resides.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.DispatcherSlim.ThreadPriority">
            <summary>
            Gets or sets the priority of the background thread.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.#ctor(System.String,System.Boolean,System.ExceptionMode,System.Threading.ThreadPriority,System.Int32)">
            <summary>
            Initializes and starts new instance of DispatcherSlim.
            </summary>
            <param name="name">Optional. Useful for debugging.</param>
            <param name="isBackground">Whether the thread is a background thread.</param>
            <param name="exceptions">Whether to catch any exceptions that may come up.</param>
            <param name="threadPriority">The priority of the background thread.</param>
            <param name="queueCap">The invocation count cap. If max queue length is exceeded, new invocations are ignored until the queue has cleared below max.</param>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.BeginInvoke(System.Threading.Dispatch.InvocationData,System.Boolean)">
            <summary>
            Asychronously invokes the specified method with the specified parameters.
            </summary>
            <param name="e">Holds the data required for an invocation.</param>
            <param name="firstClass">Whether this method call should be prioritized above others (use sparingly).</param>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.InvokeOnCurrentThread(System.Threading.Dispatch.InvocationData)">
            <summary>
            Performs the specified invocation on the current thread.
            </summary>
            <param name="e">The data describing the invocation to perform.</param>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.Invoke(System.Threading.Dispatch.InvocationData,System.Boolean,System.Int32)">
            <summary>
            Sychronously invokes the specified method with the specified parameters.
            </summary>
            <param name="e">Holds the data required for an invocation.</param>
            <param name="firstClass">Whether this method call should be prioritized above others (use sparingly).</param>
            <param name="timeout">The waiting timeout for the invocation in milliseconds (only used if the value is greater than 0).</param>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.EndInvoke(System.Threading.Dispatch.InvocationData,System.Int32)">
            <summary>
            Waits for the invocation to finish.
            </summary>
            <param name="e">The invocation that was initiated.</param>
            <param name="timeout">The waiting timeout for the invocation in milliseconds (only used if the value is greater than 0).</param>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.InterruptExecution(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Interrupts the normal execution of the dispatcher (highly not recommended).
            </summary>
            <param name="abortCurrentThread">Whether to abort the current thread mid-execution.</param>
            <param name="restartThread">Whether to create a new fresh thread.</param>
            <param name="clearQueue">Whether to clear the dispatch queue.</param>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.Finalize">
            <summary>
            Disposes of the dispatcher asynchronously.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.Dispose">
            <summary>
            Disposes of the dispatcher asynchronously.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.DispatcherSlim.Dispose(System.Boolean,System.Int32)">
            <summary>
            Disposes of the dispatcher, specifying whether it is disposed synchronously or asynchronously.
            </summary>
            <param name="sync">Whether the dispatcher is disposed synchronously or asynchronously.</param>
            <param name="timeout">The sync timeout (leave to 0 to wait indefinitely).</param>
        </member>
        <member name="T:System.Threading.Dispatch.DispatcherState">
            <summary>
            Provides information about the dispatcher's state.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Starting">
            <summary>
            The dispatcher is starting.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Idle">
            <summary>
            The dispatcher is running and it is waiting for an invocation.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Busy">
            <summary>
            The dispatcher is running and it is busy invoking methods.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Disposing">
            <summary>
            The dispatcher is being disposed.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatcherState.Disposed">
            <summary>
            The dispatcher is disposed.
            </summary>
        </member>
        <member name="T:System.Threading.Dispatch.DispatchMode">
            <summary>
            Specifies the thread on which the dispatcher will reside.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatchMode.OnCurrentThread">
            <summary>
            The dispatcher will reside on the current thread (causing the thread to block until the dispatcher is disposed).
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.DispatchMode.OnSeperateThread">
            <summary>
            The dispatcher will reside on a seperate thread.
            </summary>
        </member>
        <member name="T:System.Threading.Dispatch.InvocationData">
            <summary>
            Holds the data required for a synchronous or asynchronous invocation.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvocationData.Method">
            <summary>
            Gets the method to invoke.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvocationData.Parameter">
            <summary>
            Gets the parameter to pass to the method.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvocationData.Tag">
            <summary>
            Available for use.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvocationData.ResetEvent">
            <summary>
            Gets the reset event to use as a wait handle.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvocationData.AsyncState">
            <summary>
            Gets the return value of the method. If the invocation has not yet completed, gets null.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvocationData.CompletedSynchronously">
            <summary>
            Gets whether the operation completed synchronously.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvocationData.State">
            <summary>
            Gets the current state of the invocation.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvocationData.AsyncWaitHandle">
            <summary>
            Gets the wait handle of the invocation. Use System.Threading.Dispatch.Dispatcher.EndInvoke() instead.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvocationData.IsQueued">
            <summary>
            Gets whether this instance has been queued for invocation.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvocationData.IsStarted">
            <summary>
            Gets whether the invocation has started.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvocationData.IsCompleted">
            <summary>
            Gets whether the operation is completed.
            </summary>
        </member>
        <member name="P:System.Threading.Dispatch.InvocationData.Priority">
            <summary>
            Gets or sets the priority of the invocation.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.InvocationData.#ctor(System.Func{System.Object,System.Object},System.Object)">
            <summary>
            Initializes an invocation.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameter">The parameter to use it with.</param>
        </member>
        <member name="M:System.Threading.Dispatch.InvocationData.CompareTo(System.Object)">
            <summary>
            Compares the priority of instance to the priority of the one specified.
            </summary>
            <param name="obj">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of this instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvocationData.CompareTo(System.Threading.Dispatch.InvocationData)">
            <summary>
            Compares the priority of the instance to the priority of the one specified.
            </summary>
            <param name="e">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of this instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvocationData.Compare(System.Threading.Dispatch.InvocationData,System.Threading.Dispatch.InvocationData)">
            <summary>
            Compares the priority of the instance of InvokeEventArgs to the priority of the one specified.
            </summary>
            <param name="instance">The instance of InvokeEventArgs.</param>
            <param name="toCompareWith">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of the instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvocationData.Compare(System.Object,System.Object)">
            <summary>
            Compares the priority of the instance of InvokeEventArgs to the priority of the one specified.
            </summary>
            <param name="instance">The instance of InvokeEventArgs.</param>
            <param name="toCompareWith">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of the instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvocationData.CompareStatic(System.Threading.Dispatch.InvocationData,System.Threading.Dispatch.InvocationData)">
            <summary>
            Compares the priority of the instance of InvokeEventArgs to the priority of the one specified.
            </summary>
            <param name="instance">The instance of InvokeEventArgs.</param>
            <param name="toCompareWith">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of the instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvocationData.CompareStatic(System.Object,System.Object)">
            <summary>
            Compares the priority of the instance of InvokeEventArgs to the priority of the one specified.
            </summary>
            <param name="instance">The instance of InvokeEventArgs.</param>
            <param name="toCompareWith">The instance of InvokeEventArgs to compare the priority to.</param>
            <returns>The comparison between the priority of the instance to the priority of the one specified.</returns>
        </member>
        <member name="M:System.Threading.Dispatch.InvocationData.Finalize">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="M:System.Threading.Dispatch.InvocationData.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="T:System.Threading.Dispatch.InvokeState">
            <summary>
            The state of the invocation.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvokeState.Idle">
            <summary>
            The invocation has not been used.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvokeState.Queued">
            <summary>
            The invocation has been queued.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvokeState.Started">
            <summary>
            The invocation has started.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvokeState.Completed">
            <summary>
            The invocation has completed.
            </summary>
        </member>
        <member name="F:System.Threading.Dispatch.InvokeState.Error">
            <summary>
            The invocation has thrown an error.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.ParallelLoop">
            <summary>
            Contains methods that aid in range parallellization.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.ParallelLoop.ThreadCount">
            <summary>
            Gets the number of threads that parallel loops will use from the thread pool when called.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.ParallelLoop.WhilePartitioner">
            <summary>
            The partitioner used for while loops.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.While(System.Threading.Tasks.ParallelOptions,System.Func{System.Boolean},System.Action)">
            <summary>
            Executes a while-loop concurrently.
            </summary>
            <param name="parallelOptions">Configures some parallelization options.</param>
            <param name="condition">The condition to check whether to stop or continue (true to continue, false to stop).</param>
            <param name="body">The method to call for each iteration.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.While(System.Threading.Tasks.ParallelOptions,System.Func{System.Boolean},System.Action{System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a while-loop concurrently.
            </summary>
            <param name="parallelOptions">Configures some parallelization options.</param>
            <param name="condition">The condition to check whether to stop or continue (true to continue, false to stop).</param>
            <param name="body">The method to call for each iteration.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.While(System.Threading.Tasks.ParallelOptions,System.Action{System.Boolean,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a while-loop concurrently.
            </summary>
            <param name="parallelOptions">Configures some parallelization options.</param>
            <param name="body">The method to call for each iteration.
            Ignore the boolean parameter, and if you want to interrupt the loop, simply invoke Stop() on the ParallelLoopState parameter.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.Invoke(System.Int32,System.Action[])">
            <summary>
            Executes the specified delegates concurrently.
            </summary>
            <param name="parallellizationCutoff">The invocations are parallellized only if the number of items is be greater or equal to the cutoff.</param>
            <param name="delegates">The delegates to invoke.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int32,System.Int32,System.Action{System.Int32},System.Int32,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="func">The callback of each iteration, where int holds the index.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int32,System.Int32,System.Int32,System.Action{System.Int32},System.Int32,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="step">The increment step (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int32,System.Int32,System.Int32,System.Object,System.Action{System.Int32,System.Object},System.Int32,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="step">The increment step (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index, and object is the "parameter" variable.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int32,System.Int32,System.Func{System.Int32,System.Boolean},System.Int32,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="func">The callback of each iteration, where int holds the index. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Boolean},System.Int32,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="step">The increment step (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int32,System.Int32,System.Int32,System.Object,System.Func{System.Int32,System.Object,System.Boolean},System.Int32,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="step">The increment step (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index, and object is the "parameter" variable. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int64,System.Int64,System.Action{System.Int64},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="func">The callback of each iteration, where int holds the index.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int64,System.Int64,System.Int64,System.Action{System.Int64},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="step">The increment step (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int64,System.Int64,System.Int64,System.Object,System.Action{System.Int64,System.Object},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="step">The increment step (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index, and object is the "parameter" variable.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int64,System.Int64,System.Func{System.Int64,System.Boolean},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="func">The callback of each iteration, where int holds the index. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int64,System.Int64,System.Int64,System.Func{System.Int64,System.Boolean},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="step">The increment step (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Int64,System.Int64,System.Int64,System.Object,System.Func{System.Int64,System.Object,System.Boolean},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="start">The start index.</param>
            <param name="endExclusive">The end index, which is not included in the iteration (ex. if it is 50, the loop stops at 49).</param>
            <param name="step">The increment step (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index, and object is the "parameter" variable. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.IntPtr,System.Int64,System.Int64,System.Action{System.IntPtr},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="ptr">The start pointer. Pointer should point to a byte.</param>
            <param name="count">The number of steps to make.</param>
            <param name="step">The size of each stride (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Byte*,System.Int64,System.Int64,System.Action{System.IntPtr},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="ptr">The start pointer.</param>
            <param name="count">The number of steps to make.</param>
            <param name="step">The size of each stride (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.IntPtr,System.Int64,System.Int64,System.Object,System.Action{System.IntPtr,System.Object},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="ptr">The start pointer. Pointer should point to a byte.</param>
            <param name="count">The number of steps to make.</param>
            <param name="step">The size of each stride (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index, and object is the "parameter" variable.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Byte*,System.Int64,System.Int64,System.Object,System.Action{System.IntPtr,System.Object},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="ptr">The start pointer.</param>
            <param name="count">The number of steps to make.</param>
            <param name="step">The size of each stride (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index, and object is the "parameter" variable.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.IntPtr,System.Int64,System.Int64,System.Func{System.IntPtr,System.Boolean},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="ptr">The start pointer. Pointer should point to a byte.</param>
            <param name="count">The number of steps to make.</param>
            <param name="step">The size of each stride (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Byte*,System.Int64,System.Int64,System.Func{System.IntPtr,System.Boolean},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="ptr">The start pointer.</param>
            <param name="count">The number of steps to make.</param>
            <param name="step">The size of each stride (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.IntPtr,System.Int64,System.Int64,System.Object,System.Func{System.IntPtr,System.Object,System.Boolean},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="ptr">The start pointer. Pointer should point to a byte.</param>
            <param name="count">The number of steps to make.</param>
            <param name="step">The size of each stride (can be negative).</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="func">The callback of each iteration, where int holds the index, and object is the "parameter" variable. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ParallelLoop.For(System.Byte*,System.Int64,System.Int64,System.Object,System.Func{System.IntPtr,System.Object,System.Boolean},System.Int64,System.Int32)">
            <summary>
            Executes a for-loop concurrently.
            </summary>
            <param name="ptr">The start pointer.</param>
            <param name="count">The number of steps to make.</param>
            <param name="step">The size of each stride (can be negative).</param>
            <param name="func">The callback of each iteration, where int holds the index, and object is the "parameter" variable. The return value is whether the loop should stop (true to stop, false to continue).</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="parallellizationCutoff">The loop is parallellized only if the number of iterations will be greater or equal to the cutoff.</param>
            <param name="maxThreads">The maximum number of threads to allocate to this task.</param>
        </member>
        <member name="T:System.Threading.AsyncTimer">
            <summary>
            Flexibly handles calling methods asynchronously at given intervals on a dedicated thread.
            It is a very accurate timer, and can be used to time gameplay renders and updates.
            </summary>
        </member>
        <member name="E:System.Threading.AsyncTimer.Tick">
            <summary>
            Fired when the timer is elapsed.
            </summary>
        </member>
        <member name="E:System.Threading.AsyncTimer.TickFinished">
            <summary>
            Fired when Tick callback is completed.
            </summary>
        </member>
        <member name="F:System.Threading.AsyncTimer.Exceptions">
            <summary>
            Gets or sets whether to catch exceptions.
            </summary>
        </member>
        <member name="F:System.Threading.AsyncTimer.DontWaitForInterval">
            <summary>
            If true, intervals are ignored and the callback is called immediately after the previous call (not recommended).
            </summary>
        </member>
        <member name="F:System.Threading.AsyncTimer.Tag">
            <summary>
            Available for your use.
            </summary>
        </member>
        <member name="P:System.Threading.AsyncTimer.IsDisposed">
            <summary>
            Gets whether the timer is disposed.
            </summary>
        </member>
        <member name="P:System.Threading.AsyncTimer.Running">
            <summary>
            Gets or sets whether the timer is running.
            </summary>
        </member>
        <member name="P:System.Threading.AsyncTimer.Interval">
            <summary>
            Gets or sets the interval elapse timer in milliseconds.
            </summary>
        </member>
        <member name="M:System.Threading.AsyncTimer.#ctor">
            <summary>
            Initializes a new asynchronous timer with the 1 second intervals by default.
            </summary>
        </member>
        <member name="M:System.Threading.AsyncTimer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new asynchronous timer with the specified tick period.
            </summary>
            <param name="interval">The interval length between ticks in milliseconds.</param>
            <param name="onBackgroundThread">Only set to false if you plan to exclusively use WaitForTick().</param>
        </member>
        <member name="M:System.Threading.AsyncTimer.WaitForTick(System.Int32)">
            <summary>
            Waits for the next timer tick. If the timer is not running, the function will still wait for the next tick.
            </summary>
            <param name="timeout">The timeout interval, in milliseconds. If timeout is -1, the function will wait for a tick indefnitely.
            If a nonzero value is specified, the function waits for a tick unless the specified timeout runs out.
            If timeout is zero, the function does not enter a wait state if the object is not signaled; it always returns immediately.</param>
        </member>
        <member name="M:System.Threading.AsyncTimer.Finalize">
            <summary>
            Disposes of the resources used by the timer.
            </summary>
        </member>
        <member name="M:System.Threading.AsyncTimer.Dispose">
            <summary>
            Disposes of the resources used by the timer.
            </summary>
        </member>
        <member name="T:System.Threading.TimedLock">
            <summary>
            Initializes a lock with timeout capabilities. Example usage: using (new TimedLock(root, 7000)) { }
            </summary>
        </member>
        <member name="F:System.Threading.TimedLock.LockWasTaken">
            <summary>
            Whether the lock was taken.
            </summary>
        </member>
        <member name="F:System.Threading.TimedLock.SyncRoot">
            <summary>
            The object that is used to lock onto.
            </summary>
        </member>
        <member name="M:System.Threading.TimedLock.#ctor(System.Object,System.Int32,System.ExceptionMode)">
            <summary>
            Initializes a lock with timeout capabilities.
            </summary>
            <param name="syncRoot">The object that is used to lock onto.</param>
            <param name="milliseconds">The lock timeout in milliseconds.</param>
            <param name="exceptions">Specifies how exceptions are handled.</param>
        </member>
        <member name="M:System.Threading.TimedLock.Dispose">
            <summary>
            Releases of the lock if it was taken.
            </summary>
        </member>
        <member name="T:System.TupleExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Tuple"/> instances to interop with C# tuples features (deconstruction syntax, converting from and to <see cref="T:System.ValueTuple"/>).
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``1(System.Tuple{``0})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 1 element.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``2(System.Tuple{``0,``1})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 2 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``3(System.Tuple{``0,``1,``2})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 3 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``4(System.Tuple{``0,``1,``2,``3})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 4 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 5 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 6 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 7 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 8 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 9 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 10 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 11 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 12 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 13 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 14 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 15 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 16 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 17 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 18 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 19 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 20 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 21 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``1(System.ValueTuple{``0})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 1 element.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``2(System.ValueTuple{``0,``1})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 2 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``3(System.ValueTuple{``0,``1,``2})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 3 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``4(System.ValueTuple{``0,``1,``2,``3})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 4 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``5(System.ValueTuple{``0,``1,``2,``3,``4})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 5 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``6(System.ValueTuple{``0,``1,``2,``3,``4,``5})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 6 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``7(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 7 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``8(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 8 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``9(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 9 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``10(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 10 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``11(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 11 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``12(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 12 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``13(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 13 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``14(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 14 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``15(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 15 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``16(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 16 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``17(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 17 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``18(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 18 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``19(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 19 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``20(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 20 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``21(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19,``20}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 21 elements.
            </summary>
        </member>
        <member name="T:System.UniformRandom">
            <summary>
            Contains methods for generating random numbers.
            </summary>
        </member>
        <member name="F:System.UniformRandom.Index">
            <summary>
            The current random value index counter.
            </summary>
        </member>
        <member name="P:System.UniformRandom.RandomColor">
            <summary>
            Generates a random color (alpha is always 255).
            </summary>
        </member>
        <member name="P:System.UniformRandom.RandomColorWithAlpha">
            <summary>
            Generates a random color with a random alpha component.
            </summary>
        </member>
        <member name="P:System.UniformRandom.RandomByte">
            <summary>
            Generates a random byte.
            </summary>
        </member>
        <member name="P:System.UniformRandom.Random">
            <summary>
            Generates a random integer.
            </summary>
        </member>
        <member name="P:System.UniformRandom.RandomDouble">
            <summary>
            Generates a random value in the range [0, 1).
            </summary>
        </member>
        <member name="M:System.UniformRandom.ToInterval(System.UInt64,System.Double,System.Double)">
            <summary>
            Returns a random double in the specified range for the specified integer value.
            </summary>
            <param name="value">The value to map to the specified range.</param>
            <param name="min">The inclusive minimum value in the range.</param>
            <param name="max">The excluded maximum value in the range.</param>
        </member>
        <member name="T:System.ITupleInternal">
            <summary>
            Helper so we can call some tuple methods recursively without knowing the underlying types.
            </summary>
        </member>
        <member name="T:System.ValueTuple">
            <summary>
            The ValueTuple types (from arity 0 to 8) comprise the runtime implementation that underlies tuples in C# and struct tuples in F#.
            Aside from created via language syntax, they are most easily created via the ValueTuple.Create factory methods.
            The System.ValueTuple types differ from the System.Tuple types in that:
            - they are structs rather than classes,
            - they are mutable rather than readonly, and
            - their members (such as Item1, Item2, etc) are fields rather than properties.
            </summary>
        </member>
        <member name="M:System.ValueTuple.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.ValueTuple"/>.</returns>
        </member>
        <member name="M:System.ValueTuple.Equals(System.ValueTuple)">
            <summary>Returns a value indicating whether this instance is equal to a specified value.</summary>
            <param name="other">An instance to compare to this instance.</param>
            <returns>true if <paramref name="other"/> has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.ValueTuple.CompareTo(System.ValueTuple)">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>()</c>.
            </remarks>
        </member>
        <member name="M:System.ValueTuple.Create">
            <summary>Creates a new struct 0-tuple.</summary>
            <returns>A 0-tuple.</returns>
        </member>
        <member name="M:System.ValueTuple.Create``1(``0)">
            <summary>Creates a new struct 1-tuple, or singleton.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <returns>A 1-tuple (singleton) whose value is (item1).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``2(``0,``1)">
            <summary>Creates a new struct 2-tuple, or pair.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <returns>A 2-tuple (pair) whose value is (item1, item2).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``3(``0,``1,``2)">
            <summary>Creates a new struct 3-tuple, or triple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <returns>A 3-tuple (triple) whose value is (item1, item2, item3).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``4(``0,``1,``2,``3)">
            <summary>Creates a new struct 4-tuple, or quadruple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <returns>A 4-tuple (quadruple) whose value is (item1, item2, item3, item4).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>Creates a new struct 5-tuple, or quintuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <returns>A 5-tuple (quintuple) whose value is (item1, item2, item3, item4, item5).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>Creates a new struct 6-tuple, or sextuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <returns>A 6-tuple (sextuple) whose value is (item1, item2, item3, item4, item5, item6).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>Creates a new struct 7-tuple, or septuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <returns>A 7-tuple (septuple) whose value is (item1, item2, item3, item4, item5, item6, item7).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>Creates a new struct 8-tuple, or octuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <param name="item8">The value of the eighth component of the tuple.</param>
            <returns>An 8-tuple (octuple) whose value is (item1, item2, item3, item4, item5, item6, item7, item8).</returns>
        </member>
        <member name="T:System.ValueTuple`1">
            <summary>Represents a 1-tuple, or singleton, as a value type.</summary>
            <typeparam name="T1">The type of the tuple's only component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`1.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`1"/> instance's first component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`1"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
        </member>
        <member name="M:System.ValueTuple`1.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`1"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`1.Equals(System.ValueTuple{`0})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`1"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its field
            is equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`1.CompareTo(System.ValueTuple{`0})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`1.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`1"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`1.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`1"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`1"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1)</c>,
            where <c>Item1</c> represents the value of <see cref="F:System.ValueTuple`1.Item1"/>. If the field is <see langword="null"/>,
            it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`2">
            <summary>
            Represents a 2-tuple, or pair, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`2.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`2"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`2.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`2"/> instance's second component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`2"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
        </member>
        <member name="M:System.ValueTuple`2.Equals(System.Object)">
             <summary>
             Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2"/> instance is equal to a specified object.
             </summary>
             <param name="obj">The object to compare with this instance.</param>
             <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            
             <remarks>
             The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
             <list type="bullet">
                 <item><description>It is a <see cref="T:System.ValueTuple`2"/> value type.</description></item>
                 <item><description>Its components are of the same types as those of the current instance.</description></item>
                 <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
             </list>
             </remarks>
        </member>
        <member name="M:System.ValueTuple`2.Equals(System.ValueTuple{`0,`1})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2"/> instance is equal to a specified <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
             <summary>
             Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2"/> instance is equal to a specified object based on a specified comparison method.
             </summary>
             <param name="other">The object to compare with this instance.</param>
             <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
             <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            
             <remarks>
             This member is an explicit interface member implementation. It can be used only when the
              <see cref="T:System.ValueTuple`2"/> instance is cast to an <see cref="T:System.Collections.IStructuralEquatable"/> interface.
            
             The <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)"/> implementation is called only if <c>other</c> is not <see langword="null"/>,
              and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <see cref="T:System.ValueTuple`2"/>
              whose components are of the same types as those of the current instance. The IStructuralEquatable.Equals(Object, IEqualityComparer) method
              first passes the <see cref="F:System.ValueTuple`2.Item1"/> values of the <see cref="T:System.ValueTuple`2"/> objects to be compared to the
              <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)"/> implementation. If this method call returns <see langword="true"/>, the method is
              called again and passed the <see cref="F:System.ValueTuple`2.Item2"/> values of the two <see cref="T:System.ValueTuple`2"/> instances.
             </remarks>
        </member>
        <member name="M:System.ValueTuple`2.CompareTo(System.ValueTuple{`0,`1})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`2.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`2"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`2.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`2"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`2"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2)</c>,
            where <c>Item1</c> and <c>Item2</c> represent the values of the <see cref="F:System.ValueTuple`2.Item1"/>
            and <see cref="F:System.ValueTuple`2.Item2"/> fields. If either field value is <see langword="null"/>,
            it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`3">
            <summary>
            Represents a 3-tuple, or triple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`3.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`3"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`3.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`3"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`3.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`3"/> instance's third component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`3"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
        </member>
        <member name="M:System.ValueTuple`3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`3"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`3.Equals(System.ValueTuple{`0,`1,`2})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`3"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`3.CompareTo(System.ValueTuple{`0,`1,`2})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`3.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`3"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`3.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`3"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`3"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`4">
            <summary>
            Represents a 4-tuple, or quadruple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`4.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`4.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`4.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`4.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's fourth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`4"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
        </member>
        <member name="M:System.ValueTuple`4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`4"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`4.Equals(System.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`4"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`4.CompareTo(System.ValueTuple{`0,`1,`2,`3})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`4.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`4"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`4.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`4"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`4"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`5">
            <summary>
            Represents a 5-tuple, or quintuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`5.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's fifth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`5"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
        </member>
        <member name="M:System.ValueTuple`5.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`5"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`5.Equals(System.ValueTuple{`0,`1,`2,`3,`4})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`5"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`5.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`5.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`5"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`5.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`5"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`5"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`6">
            <summary>
            Represents a 6-tuple, or sixtuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`6.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's fifth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item6">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's sixth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`6"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
            <param name="item6">The value of the tuple's sixth component.</param>
        </member>
        <member name="M:System.ValueTuple`6.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`6"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`6.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`6"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`6.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`6.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`6"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`6.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`6"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`6"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5, Item6)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`7">
            <summary>
            Represents a 7-tuple, or sentuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`7.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's fifth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item6">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's sixth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item7">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's seventh component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`7"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
            <param name="item6">The value of the tuple's sixth component.</param>
            <param name="item7">The value of the tuple's seventh component.</param>
        </member>
        <member name="M:System.ValueTuple`7.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`7"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`7.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`7"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`7.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`7.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`7"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`7.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`7"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`7"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5, Item6, Item7)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`8">
            <summary>
            Represents an 8-tuple, or octuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
            <typeparam name="TRest">The type of the tuple's eighth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`8.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's fifth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item6">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's sixth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item7">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's seventh component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Rest">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's eighth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`8"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
            <param name="item6">The value of the tuple's sixth component.</param>
            <param name="item7">The value of the tuple's seventh component.</param>
            <param name="rest">The value of the tuple's eight component.</param>
        </member>
        <member name="M:System.ValueTuple`8.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`8"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`8"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`8.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`8"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`8"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`8.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`8.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`8"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`8.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`8"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`8"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5, Item6, Item7, Rest)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.Hotkey">
            <summary>
            Represents a global hotkey.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Hotkey.Empty">
            <summary>
            Represents an empty hotkey.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Hotkey.Key">
            <summary>
            The key that triggers the hotkey if accompanied by the assigned modifiers.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Hotkey.Modifiers">
            <summary>
            The modifiers that must accompany the key in order to trigger the hotkey.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Hotkey.ID">
            <summary>
            Used for assigning an ID to the hotkey (or leave 0 if not used). Hotkeys that are
            the same should have the same ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Hotkey.TrueHash">
            <summary>
            Gets the true hash of the hotkey.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Hotkey.#ctor(System.Windows.Forms.Keys,System.Platforms.Windows.KeyModifiers)">
            <summary>
            Initializes a hotkey from the specified parameters.
            </summary>
            <param name="key">The key that triggers the hotkey if accompanied by the assigned modifiers.</param>
            <param name="modifiers">The modifiers that must accompany the key in order to trigger the hotkey.</param>
        </member>
        <member name="M:System.Windows.Forms.Hotkey.#ctor(System.UInt32)">
            <summary>
            Initializes a hotkey from the specified true hash.
            </summary>
            <param name="trueHash">The true hash of the hotkey.</param>
        </member>
        <member name="M:System.Windows.Forms.Hotkey.#ctor(System.Windows.Forms.Hotkey)">
            <summary>
            Clones the specified hotkey.
            </summary>
            <param name="key">The hotkey to clone.</param>
        </member>
        <member name="M:System.Windows.Forms.Hotkey.Equals(System.Object)">
            <summary>
            Returns whether this hotkey instance and the object are considered equal.
            </summary>
            <param name="obj">The object to compare with.</param>
        </member>
        <member name="M:System.Windows.Forms.Hotkey.Equals(System.Windows.Forms.Hotkey)">
            <summary>
            Returns whether this hotkey is equal to the specified hotkey.
            </summary>
            <param name="key">The hotkey to compare with.</param>
        </member>
        <member name="M:System.Windows.Forms.Hotkey.op_Equality(System.Windows.Forms.Hotkey,System.Windows.Forms.Hotkey)">
            <summary>
            Returns whether two hotkeys are considered equal.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Hotkey.op_Inequality(System.Windows.Forms.Hotkey,System.Windows.Forms.Hotkey)">
            <summary>
            Returns whether two hotkeys are considered different.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Hotkey.GetHashCode">
            <summary>
            Gets the hash code of the hotkey.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Hotkey.ToString">
            <summary>
            Gets a string that represents the hotkey.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IAutoSizable">
            <summary>
            Marks controls that support auto-size.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IAutoSizable.AutoSize">
            <summary>
            Gets or sets whether the control should be auto-sized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IAutoSizable.GetAutoSize">
            <summary>
            Gets the resultant size of the control if it were to be auto-sized with both grow and shrink enabled.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IAutoSizable.GetAutoSize(System.Drawing.Size,System.Boolean)">
            <summary>
            Gets the resultant size of the control if it were to be auto-sized with both grow and shrink enabled.
            </summary>
            <param name="maxBounds">The maximum size to allow (0 means unlimited).</param>
            <param name="includePadding">If true, padding is included within the size.</param>
        </member>
        <member name="M:System.Windows.Forms.IAutoSizable.FitToContent">
            <summary>
            Sets the size of the control to the autosize result.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IDrawable">
            <summary>
            Represents a control that can be drawn using different technologies.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDrawable.DrawGdi(System.Drawing.Graphics)">
            <summary>
            Draws the control with its children inside onto the specified Graphics canvas at the current location.
            </summary>
            <param name="g">The graphics object to draw on.</param>
        </member>
        <member name="M:System.Windows.Forms.IDrawable.DrawGdi(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Draws the control with its children inside onto the specified Graphics canvas at the specified location.
            </summary>
            <param name="g">The graphics object to draw on.</param>
            <param name="location">The location to draw at.</param>
        </member>
        <member name="T:System.Windows.Forms.ISmartControl">
            <summary>
            Marks controls that support auto-size and implement IDrawable.
            </summary>
        </member>
    </members>
</doc>
